                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; ****************************************************************************************
                      (         main.asm):00029         
                      (         main.asm):00030         ; Revision
                      (         main.asm):00031         ; --------
     0000             (         main.asm):00032         RevMajor    EQU $00             ; Major revision number: 0 = Breadboard, 1+ = PCB revision
     0004             (         main.asm):00033         RevMinor    EQU $0004           ; Minor revision number
                      (         main.asm):00034         
                      (         main.asm):00035         ; Keystrokes and delimiters
                      (         main.asm):00036         ; -------------------------
     0000             (         main.asm):00037         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00038         BS          EQU $08             ; Backspace
     0009             (         main.asm):00039         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00040         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00041         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00042         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00043         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00044         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00045         
                      (         main.asm):00046         ; Misc
                      (         main.asm):00047         ; ----
     E000             (         main.asm):00048         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00049         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     FC00             (         main.asm):00050         SysStack    EQU $FC00           ; Position system stack before Constant RAM space
     FA00             (         main.asm):00051         UsrStack    EQU $FA00           ; Position user stack before system stack
     0050             (         main.asm):00052         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00053         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00054         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00055         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00056         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00057         
                      (         main.asm):00058         ; I/O addresses
                      (         main.asm):00059         ; -------------
     FF08             (         main.asm):00060         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00061         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
                      (         main.asm):00062         
                      (         main.asm):00063         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00064         
                      (         main.asm):00065             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00066             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00067                 
                      (         main.asm):00068                     ORG $0000                   ; Start of code
                      (         main.asm):00069                 
0000                  (         main.asm):00070                 Reset:
                      (         main.asm):00071                 
0000 1A50             (         main.asm):00072 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00073 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00074                 
                      (         main.asm):00075                 ; -------------------
                      (         main.asm):00076                 ; *** SHADOW COPY ***
                      (         main.asm):00077                 ; -------------------
                      (         main.asm):00078                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00079                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00080                 
0005                  (         main.asm):00081                 ShadowCopy:
                      (         main.asm):00082                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00083 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00084 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00085 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00086 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00087                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00088                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00089 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00090 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00091 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00092 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00093 (3)     44          jmp     Init
                      (         main.asm):00094                 
0024                  (         main.asm):00095                 ShadowEnd:
0024 0000000000000000 (         main.asm):00096                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00097                 
                      (         main.asm):00098                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00099                 
                      (         main.asm):00100                     PRAGMA cc
                      (         main.asm):00101                     
                      (         main.asm):00102                     ORG RomStart
                      (         main.asm):00103                 
E000                  (         main.asm):00104                 Init:
E000 B7FF08           (         main.asm):00105 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00106                 
                      (         main.asm):00107                     ; Clear the shadow copy code
E003 8E0100           (         main.asm):00108 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00109 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00110 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00111 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00112                 
                      (         main.asm):00113                     ; Configure the stacks
E011 CEFA00           (         main.asm):00114 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFEE99           (         main.asm):00115 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00116 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFEE9B         (         main.asm):00117 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00118                     
                      (         main.asm):00119                     ; Initialize peripherals
E01F BDE197           (         main.asm):00120 (7)     46          jsr     Com1Init            ; Initialize ACIA1
                      (         main.asm):00121                     
                      (         main.asm):00122                     ; Print boot message
E022 BDE161           (         main.asm):00123 (7)     53          jsr     Cls                 ; Clears the screen
E025 8EE8D4           (         main.asm):00124 (3)     56          ldx     #BootMsg            ; Print title
E028 BDE3FE           (         main.asm):00125 (7)     63          jsr     OutStr              ;
E02B 8600             (         main.asm):00126 (2)     65          lda     #RevMajor           ; Print major version
E02D BDE3C5           (         main.asm):00127 (7)     72          jsr     OutByteNLZ          ;
E030 862E             (         main.asm):00128 (2)     74          lda     #'.'                ; Print dot
E032 BDE1C4           (         main.asm):00129 (7)     81          jsr     OutChar             ;
E035 CC0004           (         main.asm):00130 (3)     84          ldd     #RevMinor           ; Print minor version
E038 BDE446           (         main.asm):00131 (7)     91          jsr     OutWordNLZ          ;
E03B BDE3FE           (         main.asm):00132 (7)     98          jsr     OutStr              ;
E03E CCE000           (         main.asm):00133 (3)     101         ldd     #RomStart           ; Free RAM available
E041 BDE107           (         main.asm):00134 (7)     108         jsr     BinToBcd            ; Convert to BCD
E044 BDE38C           (         main.asm):00135 (7)     115         jsr     OutBcd
E047 BDE3FE           (         main.asm):00136 (7)     122         jsr     OutStr
E04A CC0E5A           (         main.asm):00137 (3)     125         ldd     #JmpStart-VarEnd    ; Free shadow RAM left
E04D BDE107           (         main.asm):00138 (7)     132         jsr     BinToBcd            ; Convert to BCD
E050 BDE38C           (         main.asm):00139 (7)     139         jsr     OutBcd
E053 BDE3FE           (         main.asm):00140 (7)     146         jsr     OutStr
                      (         main.asm):00141                 
                      (         main.asm):00142                     ; Clear the registers
E056 104F             (         main.asm):00143 (2)     148         clrd                        ; Clear the D register (A & B)
E058 105F             (         main.asm):00144 (2)     150         clrw                        ; Clear the W register (E & F)
E05A 8E0000           (         main.asm):00145 (3)     153         ldx     #$0000              ; Clear X register
E05D 108E0000         (         main.asm):00146 (4)     157         ldy     #$0000              ; Clear Y register
                      (         main.asm):00147                 
                      (         main.asm):00148                     ; Clears some variables
E061 FDEE8B           (         main.asm):00149 (5)     162         std     CurrAddress
E064 7FEE8D           (         main.asm):00150 (6)     168         clr     CurrBank
E067 7FEE8E           (         main.asm):00151 (6)     174         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00152                     
                      (         main.asm):00153                     PRAGMA cc
                      (         main.asm):00154                 
E06A                  (         main.asm):00155                 Main:
E06A BDE53F           (         main.asm):00156 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E06D C646             (         main.asm):00157 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E06F 8EED8A           (         main.asm):00158 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E072 BDE2FE           (         main.asm):00159 (7)     19          jsr     InStr               ; Read the a string
E075 24F3             (         main.asm):00160 (3)     22          bcc     Main                ; If no data in string then bypass parser
E077 BDE4F0           (         main.asm):00161 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00162                     ; Save registers after execution of a run command
E07A 3401             (         main.asm):00163 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E07C 7DEE8E           (         main.asm):00164 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E07F 2604             (         main.asm):00165 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E081 3501             (         main.asm):00166 (4+1)   47          puls    CC                  ; Restore CC
E083 20E5             (         main.asm):00167 (3)     50          bra     Main                ; Loop back, without recording the resistors
E085                  (         main.asm):00168                 MainRunExec:
E085 3501             (         main.asm):00169 (4+1)   55          puls    CC                  ; Restore CC
E087 BDE812           (         main.asm):00170 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E08A 7FEE8E           (         main.asm):00171 (6)     68          clr     RunFlag             ; Reset run flag
E08D 20DB             (         main.asm):00172 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00173                 
                      (         main.asm):00174                 ;  ___                  _               _              
                      (         main.asm):00175                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00176                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00177                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00178                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00179                 ;
                      (         main.asm):00180                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00181                 ; ---------------------------------------------------------------
                      (         main.asm):00182                 
                      (         main.asm):00183                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E08F                  (      convert.asm):00029                 AscToBinNibble:
E08F 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E091 BDE153           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E094 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E096 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E098 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E09A 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E09C                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E09C 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E09E                  (      convert.asm):00038                 AscToBinNibbleEnd
E09E 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E0A0 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E0A2                  (      convert.asm):00050                 AscToBinByte:
E0A2 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E0A4 BDE08F           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E0A7 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A8 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A9 48               (      convert.asm):00055 (1)     15          asla                        ;
E0AA 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0AB 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0AD 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0AF BDE08F           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0B2 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0B5 5F               (      convert.asm):00061 (1)     35          clrb
E0B6 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B8                  (      convert.asm):00072                 AscToBinWord:
E0B8 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0BA BDE0A2           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BD 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0BF BDE0A2           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0C2 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0C4 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0C6 105F             (      convert.asm):00079 (2)     34          clrw
E0C8 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0CA                  (      convert.asm):00098                 BinToAscNibble:
E0CA 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0CC 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0CE 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0D0 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0D2 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0D4 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0D6                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0D6 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D8                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D8 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0DA                  (      convert.asm):00117                 BinToAscByte:
E0DA 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0DC 1038             (      convert.asm):00119 (6)     11          pshsw
E0DE 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0E0 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0E1 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0E2 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0E3 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0E4 BDE0CA           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0E7 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E9 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0EB BDE0CA           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0EE 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0F0 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0F2 1039             (      convert.asm):00131 (6)     57          pulsw
E0F4 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0F6                  (      convert.asm):00141                 BinToAscWord:
E0F6 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F8 BDE0DA           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0FB 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0FD 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0FF 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E101 BDE0DA           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E104 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E106 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E107                  (      convert.asm):00167                 BinToBcd:
E107 3401             (      convert.asm):00168 (4+1)   5           pshs    CC
E109 7FEEA2           (      convert.asm):00169 (6)     11          clr     TempQ1              ; Clear Q's High MSB byte
                      (      convert.asm):00170                     ; Calculate 10,000's digit
E10C 1F06             (      convert.asm):00171 (4)     15          tfr     D,W                 ; Q = DW
E10E 104F             (      convert.asm):00172 (2)     17          clrd                        ; Clear Q's MSB
E110 118E2710         (      convert.asm):00173 (34)    51          divq    #10000              ; Divide Q by 10,000: Quotient in W, Remainder in D
E114 11F7EEA3         (      convert.asm):00174 (5)     56          stf     TempQ2              ; Save 10,000's digit to variable
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E118 1F06             (      convert.asm):00176 (4)     60          tfr     D,W                 ; Transfer Remainder to LSB
E11A 104F             (      convert.asm):00177 (2)     62          clrd                        ; Clear MSB
E11C 118E03E8         (      convert.asm):00178 (34)    96          divq    #1000               ; Divide Q by 1,000: Quotient in W, Remainder in D
E120 1E06             (      convert.asm):00179 (5)     101         exg     D,W                 ; Exchange registers: Quotien is now in D, and remainder in W
E122 1048             (      convert.asm):00180 (2)     103         lsld                        ; Move 1,000's digit to high nibble
E124 1048             (      convert.asm):00181 (2)     105         lsld                        ;   Had to exchange D <-> W
E126 1048             (      convert.asm):00182 (2)     107         lsld                        ;   in order for lsld to work
E128 1048             (      convert.asm):00183 (2)     109         lsld                        ;
E12A F7EEA4           (      convert.asm):00184 (4)     113         stb     TempQ3              ; Save 1,000's digit for later or'ing with the 100's
                      (      convert.asm):00185                     ; Calculate 100's digit
E12D 1F60             (      convert.asm):00186 (4)     117         tfr     W,D                 ; Transfer remainder to D
E12F 118D64           (      convert.asm):00187 (25)    142         divd    #100                ; Divide D by 100: Quotient in B, Remainder in A
E132 3402             (      convert.asm):00188 (4+1)   147         pshs    A                   ; Save for 10's and 1's 
E134 B6EEA4           (      convert.asm):00189 (4)     151         lda     TempQ3              ; Load quotien from the 1000's
E137 103598           (      convert.asm):00190 (4)     155         orr     B,A                 ; Merge 1000's and 100's digits together
E13A B7EEA4           (      convert.asm):00191 (4)     159         sta     TempQ3              ; Save result to variable
                      (      convert.asm):00192                     ; Calculate the 10's and 1's digit
E13D 3504             (      convert.asm):00193 (4+1)   164         puls    B                   ; Place remainder in LSB of D
E13F 4F               (      convert.asm):00194 (1)     165         clra                        ; Clear MSB of D
E140 118D0A           (      convert.asm):00195 (25)    190         divd    #10                 ; Divide D by 10: Quotient in B, Remainder in A
E143 58               (      convert.asm):00196 (1)     191         lslb                        ; Move 10's digit to high nibble
E144 58               (      convert.asm):00197 (1)     192         lslb                        ;
E145 58               (      convert.asm):00198 (1)     193         lslb                        ;
E146 58               (      convert.asm):00199 (1)     194         lslb                        ;
E147 103598           (      convert.asm):00200 (4)     198         orr     B,A                 ; Merge 10's and 1's digits together
E14A B7EEA5           (      convert.asm):00201 (4)     202         sta     TempQ4              ; Save result to Variable
E14D 10FCEEA2         (      convert.asm):00202 (8)     210         ldq     TempQuad            ; Load Quad result
E151 3581             (      convert.asm):00203 (4+3)   217         puls    CC,PC
                      (      convert.asm):00204                 
                      (      convert.asm):00205                 ;  _   _                                  ____                      
                      (      convert.asm):00206                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00207                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00208                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00209                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00210                 ;         |_|     |_|                                               
                      (      convert.asm):00211                 ;
                      (      convert.asm):00212                 ; Convert character in A to uppercase
                      (      convert.asm):00213                 ; ===================================
                      (      convert.asm):00214                 ; Input:    A = anycase
                      (      convert.asm):00215                 ; Output:   A = UPPERCASE
                      (      convert.asm):00216                 
                      (      convert.asm):00217                     PRAGMA cc
                      (      convert.asm):00218                 
E153                  (      convert.asm):00219                 UpperCase:
E153 3401             (      convert.asm):00220 (4+1)   5           pshs    CC
E155 8161             (      convert.asm):00221 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E157 2D06             (      convert.asm):00222 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E159 817A             (      convert.asm):00223 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E15B 2E02             (      convert.asm):00224 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E15D 8020             (      convert.asm):00225 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E15F                  (      convert.asm):00226                 UpperCaseEnd:
E15F 3581             (      convert.asm):00227 (4+3)   24          puls    CC,PC
                      (      convert.asm):00228                     
                      (         main.asm):00184                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E161                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E161 3406             (           io.asm):00058 (4+2)   6           pshs    D
E163 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E165 BDE1C4           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E168 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E16A BDE1C4           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E16D 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E16F BDE1C4           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E172 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E174 BDE1C4           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E177 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E179 BDE1C4           (           io.asm):00069 (7)     51          jsr     OutChar
E17C 865B             (           io.asm):00070 (2)     53          lda     #'['
E17E BDE1C4           (           io.asm):00071 (7)     60          jsr     OutChar
E181 8631             (           io.asm):00072 (2)     62          lda     #'1'
E183 BDE1C4           (           io.asm):00073 (7)     69          jsr     OutChar
E186 863B             (           io.asm):00074 (2)     71          lda     #';'
E188 BDE1C4           (           io.asm):00075 (7)     78          jsr     OutChar
E18B 8631             (           io.asm):00076 (2)     80          lda     #'1'
E18D BDE1C4           (           io.asm):00077 (7)     87          jsr     OutChar
E190 8648             (           io.asm):00078 (2)     89          lda     #'H'
E192 BDE1C4           (           io.asm):00079 (7)     96          jsr     OutChar
E195 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E197                  (           io.asm):00094                 Com1Init:
E197 3402             (           io.asm):00095 (4+1)   5           pshs    A
E199 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E19B B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E19E 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E1A0 B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E1A3 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E1A5 B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A8 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1AA                  (           io.asm):00122                 InChar:
E1AA                  (           io.asm):00123                 Com1RxWait:
E1AA B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1AD 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1AF 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1B1 B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1B4 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1B5                  (           io.asm):00137                 InCharNW:
E1B5                  (           io.asm):00138                 Com1RxNoWait:
E1B5 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1B7 B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1BA 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1BC 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1BE B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1C1 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1C3                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1C3 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1C4                  (           io.asm):00168                 OutChar:
E1C4                  (           io.asm):00169                 Com1Tx:
E1C4 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1C6                  (           io.asm):00171                 Com1TxNotReady:
E1C6 B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C9 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1CB 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1CD 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1CF B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1D2 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _    ____   _                    
                      (           io.asm):00180                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00181                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00182                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00183                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00184                 ;
                      (           io.asm):00185                 ; Delete a number of characters
                      (           io.asm):00186                 ; =============================
                      (           io.asm):00187                 ; Input:    B = Number of characters to delete
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1D3                  (           io.asm):00191                 DelChar:
E1D3 3406             (           io.asm):00192 (4+2)   6           pshs    D
E1D5 8608             (           io.asm):00193 (2)     8           lda     #BS                 ; Load the backspace character
E1D7                  (           io.asm):00194                 DelCharLoop:
E1D7 BDE1C4           (           io.asm):00195 (7)     15          jsr     OutChar             ; Print the backspace character
E1DA 8620             (           io.asm):00196 (2)     17          lda     #' '                ; Load the space character
E1DC BDE1C4           (           io.asm):00197 (7)     24          jsr     OutChar             ; Print it the space character
E1DF 8608             (           io.asm):00198 (2)     26          lda     #BS                 ; Load the backspace character
E1E1 BDE1C4           (           io.asm):00199 (7)     33          jsr     OutChar             ; Print it the backspace character
E1E4 5A               (           io.asm):00200 (1)     34          decb                        ; Decrement the character count
E1E5 26F0             (           io.asm):00201 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1E7 3586             (           io.asm):00202 (4+4)   45          puls    D,PC
                      (           io.asm):00203                 
                      (           io.asm):00204                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00205                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00206                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00207                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00208                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00209                 ;                                                    |___/
                      (           io.asm):00210                 ;
                      (           io.asm):00211                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00212                 ; ====================================================
                      (           io.asm):00213                 ; Input:    X = String pointer
                      (           io.asm):00214                 ; Output:   A = Binary byte
                      (           io.asm):00215                 ;           X = Points to next character in string
                      (           io.asm):00216                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00217                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00218                 
E1E9                  (           io.asm):00219                 GetStrByte:
E1E9 3404             (           io.asm):00220 (4+1)   50          pshs    B
E1EB 1038             (           io.asm):00221 (6)     56          pshsw
E1ED 3410             (           io.asm):00222 (4+2)   62          pshs    X                   ; Save position
E1EF 5F               (           io.asm):00223 (1)     63          clrb                        ; Clear byte counter
E1F0 115F             (           io.asm):00224 (2)     65          clrf                        ; Clear byte storage
E1F2                  (           io.asm):00225                 GetStrByteCount:
E1F2 A680             (           io.asm):00226 (4+1)   70          lda     ,X+                 ; Load a character
E1F4 2707             (           io.asm):00227 (3)     73          beq     GetStrByteParse     ; If it's the end of the string, parse byte
E1F6 8120             (           io.asm):00228 (2)     75          cmpa    #' '                ; Is it a space delimiter
E1F8 2703             (           io.asm):00229 (3)     78          beq     GetStrByteParse     ; Yes, then parse byte
E1FA 5C               (           io.asm):00230 (1)     79          incb                        ; Increment byte counter
E1FB 20F5             (           io.asm):00231 (3)     82          bra     GetStrByteCount     ; Loop till delimiter found
E1FD                  (           io.asm):00232                 GetStrByteParse:
E1FD 3510             (           io.asm):00233 (4+2)   88          puls    X                   ; Restore position
E1FF C100             (           io.asm):00234 (2)     90          cmpb    #0                  ; Is the counter = 0
E201 2732             (           io.asm):00235 (3)     93          beq     GetStrByteError     ; Yes, then set error flag
E203 C101             (           io.asm):00236 (2)     95          cmpb    #1                  ; Is it 1 character long
E205 2607             (           io.asm):00237 (3)     98          bne     GetStrByteParse2    ; No, then check if it's 2
E207 BDE258           (           io.asm):00238 (7)     105         jsr     GetStrNibble        ; Get a nibble
E20A 2429             (           io.asm):00239 (3)     108         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E20C 2023             (           io.asm):00240 (3)     111         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E20E                  (           io.asm):00241                 GetStrByteParse2:
E20E C102             (           io.asm):00242 (2)     113         cmpb    #2                  ; Is it 2 character long
E210 2615             (           io.asm):00243 (3)     116         bne     GetStrByteParseMore ; No, then check if it's 3
E212 BDE258           (           io.asm):00244 (7)     123         jsr     GetStrNibble        ; Get a nibble
E215 241E             (           io.asm):00245 (3)     126         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E217 48               (           io.asm):00246 (1)     127         asla                        ; Push nibble to MSB
E218 48               (           io.asm):00247 (1)     128         asla                        ;
E219 48               (           io.asm):00248 (1)     129         asla                        ;
E21A 48               (           io.asm):00249 (1)     130         asla                        ;
E21B 1F89             (           io.asm):00250 (4)     134         tfr     A,B                 ; Store byte in LSB of W
E21D BDE258           (           io.asm):00251 (7)     141         jsr     GetStrNibble        ; Get a nibble
E220 2413             (           io.asm):00252 (3)     144         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E222 103598           (           io.asm):00253 (4)     148         orr     B,A                 ; Merge both nibbles as a byte
E225 200A             (           io.asm):00254 (3)     151         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E227                  (           io.asm):00255                 GetStrByteParseMore:
E227 B6EE8A           (           io.asm):00256 (4)     155         lda     CmdErrorPtr         ; Load error pointer
E22A 8B03             (           io.asm):00257 (2)     157         adda    #3                  ; Add 3 to it
E22C B7EE8A           (           io.asm):00258 (4)     161         sta     CmdErrorPtr         ; Store it back
E22F 2004             (           io.asm):00259 (3)     164         bra     GetStrByteError     ; Set error flag
E231                  (           io.asm):00260                 GetStrByteGood:
E231 1A01             (           io.asm):00261 (2)     166         orcc    #%00000001          ; Set Carry: Indicates the byte is ok
E233 2002             (           io.asm):00262 (3)     169         bra     GetStrByteEnd
E235                  (           io.asm):00263                 GetStrByteError:
E235 1CFE             (           io.asm):00264 (2)     171         andcc   #%11111110          ; Clear Carry: Indicates there an error
E237                  (           io.asm):00265                 GetStrByteEnd:
E237 1039             (           io.asm):00266 (6)     177         pulsw
E239 3584             (           io.asm):00267 (4+3)   184         puls    B,PC
                      (           io.asm):00268                 
E23B                  (           io.asm):00269                 GetStrByteFixed:
E23B 3404             (           io.asm):00270 (4+1)   189         pshs    B
E23D BDE258           (           io.asm):00271 (7)     196         jsr     GetStrNibble        ; Get a nibble
E240 2412             (           io.asm):00272 (3)     199         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E242 48               (           io.asm):00273 (1)     200         asla                        ; Push nibble to MSB
E243 48               (           io.asm):00274 (1)     201         asla                        ;
E244 48               (           io.asm):00275 (1)     202         asla                        ;
E245 48               (           io.asm):00276 (1)     203         asla                        ;
E246 1F89             (           io.asm):00277 (4)     207         tfr     A,B                 ; Store byte in B
E248 BDE258           (           io.asm):00278 (7)     214         jsr     GetStrNibble        ; Get a nibble
E24B 2407             (           io.asm):00279 (3)     217         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E24D 103598           (           io.asm):00280 (4)     221         orr     B,A                 ; Merge both nibbles as a byte
E250 1A01             (           io.asm):00281 (2)     223         orcc    #%00000001          ; Set Carry: Indicates the nibble is ok
E252 2002             (           io.asm):00282 (3)     226         bra     GetStrByteFixedEnd  ;
E254                  (           io.asm):00283                 GetStrByteFixedErr:
E254 1CFE             (           io.asm):00284 (2)     228         andcc   #%11111110          ; Clear Carry: Indicates there an error
E256                  (           io.asm):00285                 GetStrByteFixedEnd:
E256 3584             (           io.asm):00286 (4+3)   235         puls    B,PC
                      (           io.asm):00287                 
                      (           io.asm):00288                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00289                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00290                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00291                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00292                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00293                 ;
                      (           io.asm):00294                 ;
                      (           io.asm):00295                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00296                 ; ======================================================
                      (           io.asm):00297                 ; Input:    X = String pointer
                      (           io.asm):00298                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00299                 ;           X = Points to next character in string
                      (           io.asm):00300                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00301                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00302                 
E258                  (           io.asm):00303                 GetStrNibble:
E258 A684             (           io.asm):00304 (4+0)   239         lda     ,X                  ; Get a character from string
E25A 2713             (           io.asm):00305 (3)     242         beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E25C BDE153           (           io.asm):00306 (7)     249         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00307                     ; Is it a valid hex character?
E25F 8130             (           io.asm):00308 (2)     251         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E261 2D0C             (           io.asm):00309 (3)     254         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E263 8146             (           io.asm):00310 (2)     256         cmpa    #'F'                ; Filter anything above the ASCII F
E265 2E08             (           io.asm):00311 (3)     259         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E267 8139             (           io.asm):00312 (2)     261         cmpa    #'9'                ; Filter anything above ASCII '9'
E269 2F08             (           io.asm):00313 (3)     264         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E26B 8141             (           io.asm):00314 (2)     266         cmpa    #'A'                ; Filter anything below ASCII 'A'
E26D 2C04             (           io.asm):00315 (3)     269         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E26F                  (           io.asm):00316                 GetStrNibbleError:
E26F 1CFE             (           io.asm):00317 (2)     271         andcc   #$FE                ; Clear carry to indicate error
E271 2005             (           io.asm):00318 (3)     274         bra     GetStrNibbleEnd
E273                  (           io.asm):00319                 GetStrNibbleGood:
E273 BDE08F           (           io.asm):00320 (7)     281         jsr     AscToBinNibble
E276 1A01             (           io.asm):00321 (2)     283         orcc    #$01                ; Set carry to indicate valid number in A
E278                  (           io.asm):00322                 GetStrNibbleEnd:
E278 3001             (           io.asm):00323 (4+1)   288         leax    1,X                 ; Increment string pointer
E27A 7CEE8A           (           io.asm):00324 (6)     294         inc     CmdErrorPtr         ; Advance error pointer
E27D 39               (           io.asm):00325 (4)     298         rts
                      (           io.asm):00326                     
                      (           io.asm):00327                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00328                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00329                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00330                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00331                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00332                 ;
                      (           io.asm):00333                 ;
                      (           io.asm):00334                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00335                 ; ======================================================
                      (           io.asm):00336                 ; Input:    X = String pointer
                      (           io.asm):00337                 ; Output:   D = Binary word
                      (           io.asm):00338                 ;           X = Points to next character in string
                      (           io.asm):00339                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00340                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00341                 
E27E                  (           io.asm):00342                 GetStrWord:
E27E 1038             (           io.asm):00343 (6)     304         pshsw
E280 3410             (           io.asm):00344 (4+2)   310         pshs    X                   ; Save position
E282 5F               (           io.asm):00345 (1)     311         clrb                        ; Clear word counter
E283 105F             (           io.asm):00346 (2)     313         clrw                        ; Clear word storage
E285                  (           io.asm):00347                 GetStrWordCount:
E285 A680             (           io.asm):00348 (4+1)   318         lda     ,X+                 ; Load a character
E287 2707             (           io.asm):00349 (3)     321         beq     GetStrWordParse     ; If it's the end of the string, parse word
E289 8120             (           io.asm):00350 (2)     323         cmpa    #' '                ; Is it a space delimiter
E28B 2703             (           io.asm):00351 (3)     326         beq     GetStrWordParse     ; Yes, then parse word
E28D 5C               (           io.asm):00352 (1)     327         incb                        ; Increment byte counter
E28E 20F5             (           io.asm):00353 (3)     330         bra     GetStrWordCount     ; Loop till delimiter found
E290                  (           io.asm):00354                 GetStrWordParse:
E290 3510             (           io.asm):00355 (4+2)   336         puls    X                   ; Restore position
E292 C100             (           io.asm):00356 (2)     338         cmpb    #0                  ; Is the counter = 0
E294 2752             (           io.asm):00357 (3)     341         beq     GetStrWordError     ; Yes, then set error flag
E296 C101             (           io.asm):00358 (2)     343         cmpb    #1                  ; Is it 1 character long
E298 2609             (           io.asm):00359 (3)     346         bne     GetStrWordParse2    ; No, then check if it's 2
E29A BDE258           (           io.asm):00360 (7)     353         jsr     GetStrNibble        ; Get a nibble
E29D 2449             (           io.asm):00361 (3)     356         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E29F 1F8F             (           io.asm):00362 (4)     360         tfr     A,F                 ; Store nibble in LSB of W
E2A1 203F             (           io.asm):00363 (3)     363         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2A3                  (           io.asm):00364                 GetStrWordParse2:
E2A3 C102             (           io.asm):00365 (2)     365         cmpb    #2                  ; Is it 2 character long
E2A5 2609             (           io.asm):00366 (3)     368         bne     GetStrWordParse3    ; No, then check if it's 3
E2A7 BDE23B           (           io.asm):00367 (7)     375         jsr     GetStrByteFixed     ; Get a byte
E2AA 243C             (           io.asm):00368 (3)     378         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2AC 1F8F             (           io.asm):00369 (4)     382         tfr     A,F                 ; Store byte in LSB of W
E2AE 2032             (           io.asm):00370 (3)     385         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2B0                  (           io.asm):00371                 GetStrWordParse3:
E2B0 C103             (           io.asm):00372 (2)     387         cmpb    #3                  ; Is it 3 character long
E2B2 2610             (           io.asm):00373 (3)     390         bne     GetStrWordParse4    ; No, then check if it's 4
E2B4 BDE258           (           io.asm):00374 (7)     397         jsr     GetStrNibble        ; Get a nibble
E2B7 242F             (           io.asm):00375 (3)     400         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2B9 1F8E             (           io.asm):00376 (4)     404         tfr     A,E                 ; Store nibble in MSB of W
E2BB BDE23B           (           io.asm):00377 (7)     411         jsr     GetStrByteFixed     ; Get a byte
E2BE 2428             (           io.asm):00378 (3)     414         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C0 1F8F             (           io.asm):00379 (4)     418         tfr     A,F                 ; Store byte in LSB of W
E2C2 201E             (           io.asm):00380 (3)     421         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2C4                  (           io.asm):00381                 GetStrWordParse4:
E2C4 C104             (           io.asm):00382 (2)     423         cmpb    #4                  ; Is it 4 character long
E2C6 2610             (           io.asm):00383 (3)     426         bne     GetStrWordParseMore ; No, then check if it's longer
E2C8 BDE23B           (           io.asm):00384 (7)     433         jsr     GetStrByteFixed     ; Get a byte
E2CB 241B             (           io.asm):00385 (3)     436         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2CD 1F8E             (           io.asm):00386 (4)     440         tfr     A,E                 ; Store byte in MSB of W
E2CF BDE23B           (           io.asm):00387 (7)     447         jsr     GetStrByteFixed     ; Get a byte
E2D2 2414             (           io.asm):00388 (3)     450         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2D4 1F8F             (           io.asm):00389 (4)     454         tfr     A,F                 ; Store byte in LSB of W
E2D6 200A             (           io.asm):00390 (3)     457         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2D8                  (           io.asm):00391                 GetStrWordParseMore:
E2D8 B6EE8A           (           io.asm):00392 (4)     461         lda     CmdErrorPtr         ; Load error pointer
E2DB 8B05             (           io.asm):00393 (2)     463         adda    #5                  ; Add 5 to it
E2DD B7EE8A           (           io.asm):00394 (4)     467         sta     CmdErrorPtr         ; Store it back
E2E0 2006             (           io.asm):00395 (3)     470         bra     GetStrWordError     ; Set error flag
E2E2                  (           io.asm):00396                 GetStrWordGood:
E2E2 1F60             (           io.asm):00397 (4)     474         tfr     W,D
E2E4 1A01             (           io.asm):00398 (2)     476         orcc    #%00000001          ; Set Carry: Indicates the word is ok
E2E6 2002             (           io.asm):00399 (3)     479         bra     GetStrWordEnd
E2E8                  (           io.asm):00400                 GetStrWordError:
E2E8 1CFE             (           io.asm):00401 (2)     481         andcc   #%11111110          ; Clear Carry: Indicates there an error
E2EA                  (           io.asm):00402                 GetStrWordEnd:
E2EA 1039             (           io.asm):00403 (6)     487         pulsw
E2EC 39               (           io.asm):00404 (4)     491         rts
                      (           io.asm):00405                 
                      (           io.asm):00406                 ;  ___           ____            _          
                      (           io.asm):00407                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00408                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00409                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00410                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00411                 ;                        |___/              
                      (           io.asm):00412                 ;
                      (           io.asm):00413                 ; Read a hexadecimal byte
                      (           io.asm):00414                 ; =======================
                      (           io.asm):00415                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00416                 
                      (           io.asm):00417                     PRAGMA cc
                      (           io.asm):00418                 
E2ED                  (           io.asm):00419                 InByte:
E2ED 3405             (           io.asm):00420 (4+2)   6           pshs    B,CC
E2EF BDE1AA           (           io.asm):00421 (7)     13          jsr     InChar              ; Read first character in A
E2F2 1F89             (           io.asm):00422 (4)     17          tfr     A,B                 ; Save is in B temporarily
E2F4 BDE1AA           (           io.asm):00423 (7)     24          jsr     InChar              ; Read second character in A
E2F7 1E89             (           io.asm):00424 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E2F9 BDE0A2           (           io.asm):00425 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E2FC 3585             (           io.asm):00426 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00427                 
                      (           io.asm):00428                 ;  ___           ____    _
                      (           io.asm):00429                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00430                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00431                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00432                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00433                 ;
                      (           io.asm):00434                 ;
                      (           io.asm):00435                 ; Read string from from stdin
                      (           io.asm):00436                 ; ===========================
                      (           io.asm):00437                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00438                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00439                 ;           Y = contains the original string pointer start
                      (           io.asm):00440                 ; Input:    B = max number of characters to read
                      (           io.asm):00441                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00442                 ; Output:   B = Actual number of characters read
                      (           io.asm):00443                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00444                 ;               Carry bit clear = no string recorded
                      (           io.asm):00445                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00446                 
                      (           io.asm):00447                     PRAGMA cc
                      (           io.asm):00448                 
E2FE                  (           io.asm):00449                 InStr:
E2FE 3432             (           io.asm):00450 (4+5)   9           pshs    A,X,Y
E300 1038             (           io.asm):00451 (6)     15          pshsw
E302 1F12             (           io.asm):00452 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E304 1F9F             (           io.asm):00453 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E306 114F             (           io.asm):00454 (2)     25          clre                        ; Clear the current byte count
E308                  (           io.asm):00455                 InStrReadChar:
E308 BDE1AA           (           io.asm):00456 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00457                     ;jsr        UpperCase   ; *** TEMPORARY
E30B 810D             (           io.asm):00458 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E30D 2748             (           io.asm):00459 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E30F 8108             (           io.asm):00460 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E311 270B             (           io.asm):00461 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E313 811B             (           io.asm):00462 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E315 271E             (           io.asm):00463 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E317 2BEF             (           io.asm):00464 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E319 10379E           (           io.asm):00465 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E31C 2630             (           io.asm):00466 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E31E                  (           io.asm):00467                 InStrBackspace:
E31E 103712           (           io.asm):00468 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E321 27E5             (           io.asm):00469 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E323 301F             (           io.asm):00470 (4+1)   69          leax    -1,X                ; Decrement string index
E325 114A             (           io.asm):00471 (2)     71          dece                        ; Decrement the current byte counter
E327 7AEE8A           (           io.asm):00472 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E32A 3404             (           io.asm):00473 (4+1)   82          pshs    B                   ; Saves B
E32C C601             (           io.asm):00474 (2)     84          ldb     #1                  ; number of characters to delete
E32E BDE1D3           (           io.asm):00475 (7)     91          jsr     DelChar             ; Delete a character
E331 3504             (           io.asm):00476 (4+1)   96          puls    B                   ; Restores B
E333 20D3             (           io.asm):00477 (3)     99          bra     InStrReadChar       ; Go read next character
E335                  (           io.asm):00478                 InStrEscape:
E335 118100           (           io.asm):00479 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E338 27CE             (           io.asm):00480 (3)     105         beq     InStrReadChar       ; No, then read a character
E33A 3404             (           io.asm):00481 (4+1)   110         pshs    B                   ; Else, erase everyting
E33C 1FE9             (           io.asm):00482 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E33E BDE1D3           (           io.asm):00483 (7)     121         jsr     DelChar             ; Delete the whole line
E341 3504             (           io.asm):00484 (4+1)   126         puls    B
E343 1F21             (           io.asm):00485 (4)     130         tfr     Y,X                 ; Restores string pointer position
E345 114F             (           io.asm):00486 (2)     132         clre                        ; Clear the byte count
E347 9609             (           io.asm):00487 (3)     135         lda     PromptSize
E349 B7EE8A           (           io.asm):00488 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E34C 20BA             (           io.asm):00489 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E34E                  (           io.asm):00490                 InStrStoreChar:
E34E BDE1C4           (           io.asm):00491 (7)     149         jsr     OutChar             ; Print character on terminal
E351 A780             (           io.asm):00492 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E353 114C             (           io.asm):00493 (2)     156         ince                        ; Increment byte count
E355 20B1             (           io.asm):00494 (3)     159         bra     InStrReadChar       ; No? Read another character
E357                  (           io.asm):00495                 InStrPrintCR:
E357 BDE3D8           (           io.asm):00496 (7)     166         jsr     OutCRLF             ; Print carriage return
E35A 6F84             (           io.asm):00497 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E35C 1FE9             (           io.asm):00498 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E35E 118100           (           io.asm):00499 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E361 2704             (           io.asm):00500 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E363 1A01             (           io.asm):00501 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E365 2002             (           io.asm):00502 (3)     187         bra     InStrEnd
E367                  (           io.asm):00503                 InStrClearCarry:
E367 1CFE             (           io.asm):00504 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E369                  (           io.asm):00505                 InStrEnd:
E369 1039             (           io.asm):00506 (6)     195         pulsw
E36B 35B2             (           io.asm):00507 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00508                 
                      (           io.asm):00509                 ;  ___          __        __                     _ 
                      (           io.asm):00510                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00511                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00512                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00513                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00514                 ;
                      (           io.asm):00515                 ;
                      (           io.asm):00516                 ; Read a hexadecimal word
                      (           io.asm):00517                 ; =======================
                      (           io.asm):00518                 ; Output:   D = Binary number converted from four ASCII characters read from stdin
                      (           io.asm):00519                 ; 
                      (           io.asm):00520                     PRAGMA cc
                      (           io.asm):00521                 
E36D                  (           io.asm):00522                 InWord:
E36D 3401             (           io.asm):00523 (4+1)   5           pshs    CC
E36F 1038             (           io.asm):00524 (6)     11          pshsw
E371 BDE1AA           (           io.asm):00525 (7)     18          jsr     InChar
E374 1F8F             (           io.asm):00526 (4)     22          tfr     A,F
E376 BDE1AA           (           io.asm):00527 (7)     29          jsr     InChar
E379 1F89             (           io.asm):00528 (4)     33          tfr     A,B
E37B BDE1AA           (           io.asm):00529 (7)     40          jsr     InChar
E37E 1F8E             (           io.asm):00530 (4)     44          tfr     A,E
E380 BDE1AA           (           io.asm):00531 (7)     51          jsr     InChar
E383 1E8F             (           io.asm):00532 (5)     56          exg     A,F
E385 BDE0B8           (           io.asm):00533 (7)     63          jsr     AscToBinWord
E388 1039             (           io.asm):00534 (6)     69          pulsw
E38A 3581             (           io.asm):00535 (4+3)   76          puls    CC,PC
                      (           io.asm):00536                 
                      (           io.asm):00537                 ;   ___            _     ____               _ 
                      (           io.asm):00538                 ;  / _ \   _   _  | |_  | __ )    ___    __| |
                      (           io.asm):00539                 ; | | | | | | | | | __| |  _ \   / __|  / _` |
                      (           io.asm):00540                 ; | |_| | | |_| | | |_  | |_) | | (__  | (_| |
                      (           io.asm):00541                 ;  \___/   \__,_|  \__| |____/   \___|  \__,_|
                      (           io.asm):00542                 ;
                      (           io.asm):00543                 ;
                      (           io.asm):00544                 ; Output BCD data, removing leading zeros
                      (           io.asm):00545                 ; =======================================
                      (           io.asm):00546                 ; Input:    Q = Data to print (ABEF)
                      (           io.asm):00547                 
E38C                  (           io.asm):00548                 OutBcd:
E38C BDE39F           (           io.asm):00549 (7)     83          jsr     OutBcdSub           ; Process A
E38F 1F98             (           io.asm):00550 (4)     87          tfr     B,A
E391 BDE39F           (           io.asm):00551 (7)     94          jsr     OutBcdSub           ; Process B
E394 1FE8             (           io.asm):00552 (4)     98          tfr     E,A
E396 BDE39F           (           io.asm):00553 (7)     105         jsr     OutBcdSub           ; Process E
E399 1FF8             (           io.asm):00554 (4)     109         tfr     F,A
E39B BDE39F           (           io.asm):00555 (7)     116         jsr     OutBcdSub           ; Process F
E39E 39               (           io.asm):00556 (4)     120         rts
                      (           io.asm):00557                 
E39F                  (           io.asm):00558                 OutBcdSub:
E39F 3402             (           io.asm):00559 (4+1)   125         pshs    A                   ; Save A for LSB
E3A1 44               (           io.asm):00560 (1)     126         lsra                        ; Shift MSB to LSB
E3A2 44               (           io.asm):00561 (1)     127         lsra                        ;
E3A3 44               (           io.asm):00562 (1)     128         lsra                        ;
E3A4 44               (           io.asm):00563 (1)     129         lsra                        ;
E3A5 4D               (           io.asm):00564 (1)     130         tsta                        ; Check A
E3A6 2703             (           io.asm):00565 (3)     133         beq     OutBcdSubLSB        ; If it's 0, skip printing, and check LSB
E3A8 BDE3E6           (           io.asm):00566 (7)     140         jsr     OutNibble
E3AB                  (           io.asm):00567                 OutBcdSubLSB:
E3AB 3502             (           io.asm):00568 (4+1)   145         puls    A
E3AD 840F             (           io.asm):00569 (2)     147         anda    #$0F
E3AF 4D               (           io.asm):00570 (1)     148         tsta
E3B0 2703             (           io.asm):00571 (3)     151         beq     OutBcdSubEnd
E3B2 BDE3E6           (           io.asm):00572 (7)     158         jsr     OutNibble
E3B5                  (           io.asm):00573                 OutBcdSubEnd:
E3B5 39               (           io.asm):00574 (4)     162         rts
                      (           io.asm):00575                 
                      (           io.asm):00576                 ;   ___            _     ____            _          
                      (           io.asm):00577                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00578                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00579                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00580                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00581                 ;                                |___/
                      (           io.asm):00582                 ;
                      (           io.asm):00583                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00584                 ; ==================================
                      (           io.asm):00585                 ; Input:    A = Byte to output
                      (           io.asm):00586                 
                      (           io.asm):00587                     PRAGMA cc
                      (           io.asm):00588                 
E3B6                  (           io.asm):00589                 OutByte:
E3B6                  (           io.asm):00590                 OutByteLZ:
E3B6 3407             (           io.asm):00591 (4+3)   7           pshs    A,B,CC
E3B8 BDE0DA           (           io.asm):00592 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3BB BDE1C4           (           io.asm):00593 (7)     21          jsr     OutChar             ; Print MSB in A
E3BE 1F98             (           io.asm):00594 (4)     25          tfr     B,A                 ; Transfer LSB in A
E3C0 BDE1C4           (           io.asm):00595 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E3C3 3587             (           io.asm):00596 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00597                 
                      (           io.asm):00598                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00599                 ; ==========================================================
                      (           io.asm):00600                 ; Input:    A = Byte to output
                      (           io.asm):00601                 
                      (           io.asm):00602                     PRAGMA cc
                      (           io.asm):00603                 
E3C5                  (           io.asm):00604                 OutByteNLZ:
E3C5 3407             (           io.asm):00605 (4+3)   7           pshs    A,B,CC
E3C7 BDE0DA           (           io.asm):00606 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3CA 8130             (           io.asm):00607 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E3CC 2703             (           io.asm):00608 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E3CE BDE1C4           (           io.asm):00609 (7)     26          jsr     OutChar             ; Print MSB in A
E3D1                  (           io.asm):00610                 OutByteDigit1NLZ:   
E3D1 1F98             (           io.asm):00611 (4)     30          tfr     B,A                 ; Transfer LSB in A
E3D3 BDE1C4           (           io.asm):00612 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E3D6 3587             (           io.asm):00613 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00614                 
                      (           io.asm):00615                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00616                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00617                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00618                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00619                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00620                 ;
                      (           io.asm):00621                 ; Print a carriage return and linefeed
                      (           io.asm):00622                 ; ====================================
                      (           io.asm):00623                 
                      (           io.asm):00624                     PRAGMA cc
                      (           io.asm):00625                 
E3D8                  (           io.asm):00626                 OutCRLF:
E3D8 3403             (           io.asm):00627 (4+2)   6           pshs    A,CC
E3DA 860D             (           io.asm):00628 (2)     8           lda     #CR
E3DC BDE1C4           (           io.asm):00629 (7)     15          jsr     OutChar
E3DF 860A             (           io.asm):00630 (2)     17          lda     #LF
E3E1 BDE1C4           (           io.asm):00631 (7)     24          jsr     OutChar
E3E4 3583             (           io.asm):00632 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00633                 
                      (           io.asm):00634                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00635                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00636                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00637                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00638                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00639                 ;
                      (           io.asm):00640                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00641                 ; ====================================
                      (           io.asm):00642                 ; Input:    A = Nibble to output
                      (           io.asm):00643                 
                      (           io.asm):00644                     PRAGMA cc
                      (           io.asm):00645                 
E3E6                  (           io.asm):00646                 OutNibble:
E3E6                  (           io.asm):00647                 OutNibbleLSB:
E3E6 3403             (           io.asm):00648 (4+2)   6           pshs    A,CC
E3E8 BDE0CA           (           io.asm):00649 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E3EB BDE1C4           (           io.asm):00650 (7)     20          jsr     OutChar
E3EE 3583             (           io.asm):00651 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00652                 
                      (           io.asm):00653                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00654                 ; ====================================
                      (           io.asm):00655                 ; Input:    A = Nibble to output
                      (           io.asm):00656                 
                      (           io.asm):00657                     PRAGMA cc
                      (           io.asm):00658                 
E3F0                  (           io.asm):00659                 OutNibbleMSB:
E3F0 3403             (           io.asm):00660 (4+2)   6           pshs    A,CC
E3F2 44               (           io.asm):00661 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E3F3 44               (           io.asm):00662 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E3F4 44               (           io.asm):00663 (1)     9           lsra                        ;
E3F5 44               (           io.asm):00664 (1)     10          lsra                        ;
E3F6 BDE0CA           (           io.asm):00665 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E3F9 BDE1C4           (           io.asm):00666 (7)     24          jsr     OutChar
E3FC 3583             (           io.asm):00667 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00668                 
                      (           io.asm):00669                 ;   ___            _     ____    _
                      (           io.asm):00670                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00671                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00672                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00673                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00674                 ;
                      (           io.asm):00675                 ; Print a string to the screen
                      (           io.asm):00676                 ; ============================
                      (           io.asm):00677                 ; Input:    X = Address of string to print
                      (           io.asm):00678                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00679                 
                      (           io.asm):00680                     PRAGMA cc
                      (           io.asm):00681                 
E3FE                  (           io.asm):00682                 OutStr:
E3FE                  (           io.asm):00683                 OutStrLZ:
E3FE 3403             (           io.asm):00684 (4+2)   6           pshs    A,CC
E400                  (           io.asm):00685                 OutStrLoop:
E400 A680             (           io.asm):00686 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E402 2709             (           io.asm):00687 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E404 81FF             (           io.asm):00688 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E406 2705             (           io.asm):00689 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E408 17FDB9           (           io.asm):00690 (7)     26          lbsr    OutChar             ; Print character
E40B 20F3             (           io.asm):00691 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E40D                  (           io.asm):00692                 OutStrEnd:
E40D 3583             (           io.asm):00693 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00694                 
                      (           io.asm):00695                 ; Print a string to the screen without leading zeros
                      (           io.asm):00696                 ; ==================================================
                      (           io.asm):00697                 ; Input:    X = Address of string to print
                      (           io.asm):00698                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00699                 
                      (           io.asm):00700                     PRAGMA cc
                      (           io.asm):00701                 
E40F                  (           io.asm):00702                 OutStrNLZ:
E40F 3407             (           io.asm):00703 (4+3)   7           pshs    A,B,CC
E411 5F               (           io.asm):00704 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E412                  (           io.asm):00705                 OutStrNLZLoop:
E412 A680             (           io.asm):00706 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E414 81FF             (           io.asm):00707 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E416 270F             (           io.asm):00708 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E418 8130             (           io.asm):00709 (2)     20          cmpa    #'0'                ; Is it a zero?
E41A 2604             (           io.asm):00710 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E41C 8100             (           io.asm):00711 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E41E 27F2             (           io.asm):00712 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E420                  (           io.asm):00713                 OutStrNLZPrintChar:
E420 1F89             (           io.asm):00714 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E422 BDE1C4           (           io.asm):00715 (7)     39          jsr     OutChar             ; Print character
E425 20EB             (           io.asm):00716 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E427                  (           io.asm):00717                 OutStrNLZEnd:
E427 3587             (           io.asm):00718 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00719                 
                      (           io.asm):00720                 ;   ___            _    __        __                     _ 
                      (           io.asm):00721                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00722                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00723                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00724                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00725                 ;
                      (           io.asm):00726                 ; Print a word as 4 ASCII characters
                      (           io.asm):00727                 ; ==================================
                      (           io.asm):00728                 ; Input:    D = Word to output
                      (           io.asm):00729                 
                      (           io.asm):00730                     PRAGMA cc
                      (           io.asm):00731                 
E429                  (           io.asm):00732                 OutWord:
E429 3407             (           io.asm):00733 (4+3)   7           pshs    A,B,CC
E42B 1038             (           io.asm):00734 (6)     13          pshsw
E42D BDE0F6           (           io.asm):00735 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E430 BDE1C4           (           io.asm):00736 (7)     27          jsr     OutChar             ; Print 4th digit
E433 1F98             (           io.asm):00737 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E435 BDE1C4           (           io.asm):00738 (7)     38          jsr     OutChar             ; Print 3rd digit
E438 1FE8             (           io.asm):00739 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E43A BDE1C4           (           io.asm):00740 (7)     49          jsr     OutChar             ; Print 2nd digit
E43D 1FF8             (           io.asm):00741 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E43F BDE1C4           (           io.asm):00742 (7)     60          jsr     OutChar             ; Print 1st digit
E442 1039             (           io.asm):00743 (6)     66          pulsw
E444 3587             (           io.asm):00744 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00745                 
                      (           io.asm):00746                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00747                 ; =========================================================
                      (           io.asm):00748                 ; Input:    D = Byte to output
                      (           io.asm):00749                 
                      (           io.asm):00750                     PRAGMA cc
                      (           io.asm):00751                 
E446                  (           io.asm):00752                 OutWordNLZ:
E446 3416             (           io.asm):00753 (4+4)   8           pshs    A,B,X
E448 1038             (           io.asm):00754 (6)     14          pshsw
E44A 8E0000           (           io.asm):00755 (3)     17          ldx     #0                  ; Clear leading zero flag
E44D BDE0F6           (           io.asm):00756 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E450 8130             (           io.asm):00757 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E452 2705             (           io.asm):00758 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E454 3001             (           io.asm):00759 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E456 BDE1C4           (           io.asm):00760 (7)     41          jsr     OutChar             ; Print 1th digit
E459                  (           io.asm):00761                 OutWordNLZ2:
E459 1F98             (           io.asm):00762 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E45B 8130             (           io.asm):00763 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E45D 2605             (           io.asm):00764 (3)     50          bne     OutWordNLZp2        ; It's not zero
E45F 8C0000           (           io.asm):00765 (3)     53          cmpx    #0                  ; Check leading zero flag
E462 2705             (           io.asm):00766 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E464                  (           io.asm):00767                 OutWordNLZp2:
E464 3001             (           io.asm):00768 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E466 BDE1C4           (           io.asm):00769 (7)     68          jsr     OutChar             ; Print 2rd digit
E469                  (           io.asm):00770                 OutWordNLZ3:
E469 1FE8             (           io.asm):00771 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E46B 8130             (           io.asm):00772 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E46D 2605             (           io.asm):00773 (3)     77          bne     OutWordNLZp3        ; It's not zero
E46F 8C0000           (           io.asm):00774 (3)     80          cmpx    #0                  ; Check leading zero flag
E472 2705             (           io.asm):00775 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E474                  (           io.asm):00776                 OutWordNLZp3:
E474 3001             (           io.asm):00777 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E476 BDE1C4           (           io.asm):00778 (7)     95          jsr     OutChar             ; Print 3nd digit
E479                  (           io.asm):00779                 OutWordNLZ4:
E479 1FF8             (           io.asm):00780 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E47B BDE1C4           (           io.asm):00781 (7)     106         jsr     OutChar             ; Print 4st digit
E47E 1039             (           io.asm):00782 (6)     112         pulsw
E480 3596             (           io.asm):00783 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00185                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors
                      (      monitor.asm):00005                 ; *   ErrPointer
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00016                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00017                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00018                 ; ****************************************************************************************
                      (      monitor.asm):00019                 
                      (      monitor.asm):00020                 ;   ____                   _   _____                                    
                      (      monitor.asm):00021                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00022                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00023                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00024                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00025                 ;
                      (      monitor.asm):00026                 ; Various error messages pertaining to command line
                      (      monitor.asm):00027                 ; =================================================
                      (      monitor.asm):00028                 
                      (      monitor.asm):00029                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00030                 ; ------------------------------------------------------------
E482                  (      monitor.asm):00031                 ErrPointer:
E482 3407             (      monitor.asm):00032 (4+3)   129         pshs    A,B,CC
E484 F6EE8A           (      monitor.asm):00033 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E487 CB09             (      monitor.asm):00034 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E489                  (      monitor.asm):00035                 ErrorPointerLoop:
E489 8620             (      monitor.asm):00036 (2)     137         lda     #' '                ; Move cursor one space
E48B BDE1C4           (      monitor.asm):00037 (7)     144         jsr     OutChar             ;
E48E 5A               (      monitor.asm):00038 (1)     145         decb                        ; Decrement position counter
E48F 26F8             (      monitor.asm):00039 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E491 865E             (      monitor.asm):00040 (2)     150         lda     #'^'                ; Print the position pointer
E493 BDE1C4           (      monitor.asm):00041 (7)     157         jsr     OutChar             ;
E496 BDE3D8           (      monitor.asm):00042 (7)     164         jsr     OutCRLF             ;
E499 3587             (      monitor.asm):00043 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00044                 
                      (      monitor.asm):00045                 ; Invalid address error message
                      (      monitor.asm):00046                 ; -----------------------------
E49B                  (      monitor.asm):00047                 ErrInvalidAddress:
E49B 3411             (      monitor.asm):00048 (4+3)   180         pshs    X,CC
E49D BDE482           (      monitor.asm):00049 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E4A0 8EEB79           (      monitor.asm):00050 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E4A3 BDE3FE           (      monitor.asm):00051 (7)     197         jsr     OutStr              ;
E4A6 3591             (      monitor.asm):00052 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00053                 
                      (      monitor.asm):00054                 ; Invalid byte error message
                      (      monitor.asm):00055                 ; --------------------------
E4A8                  (      monitor.asm):00056                 ErrInvalidByte:
E4A8 3411             (      monitor.asm):00057 (4+3)   213         pshs    X,CC
E4AA BDE482           (      monitor.asm):00058 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E4AD 8EEB8C           (      monitor.asm):00059 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E4B0 BDE3FE           (      monitor.asm):00060 (7)     230         jsr     OutStr              ;
E4B3 3591             (      monitor.asm):00061 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00062                 
                      (      monitor.asm):00063                 ; Invalid command error message
                      (      monitor.asm):00064                 ; -----------------------------
E4B5                  (      monitor.asm):00065                 ErrInvalidCommand:
E4B5 3411             (      monitor.asm):00066 (4+3)   246         pshs    X,CC
E4B7 BDE482           (      monitor.asm):00067 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E4BA 8EEBCF           (      monitor.asm):00068 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E4BD BDE3FE           (      monitor.asm):00069 (7)     263         jsr     OutStr              ;
E4C0 3591             (      monitor.asm):00070 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00071                 
                      (      monitor.asm):00072                 ; Invalid parameter error message
                      (      monitor.asm):00073                 ; -------------------------------
E4C2                  (      monitor.asm):00074                 ErrInvalidParameter:
E4C2 3411             (      monitor.asm):00075 (4+3)   279         pshs    X,CC
E4C4 BDE482           (      monitor.asm):00076 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E4C7 8EEB9C           (      monitor.asm):00077 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E4CA BDE3FE           (      monitor.asm):00078 (7)     296         jsr     OutStr              ;
E4CD 3591             (      monitor.asm):00079 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00080                 
                      (      monitor.asm):00081                 ; No parameter error message
                      (      monitor.asm):00082                 ; --------------------------
E4CF                  (      monitor.asm):00083                 ErrNoParameter:
E4CF 3411             (      monitor.asm):00084 (4+3)   312         pshs    X,CC
E4D1 BDE482           (      monitor.asm):00085 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E4D4 8EEBB1           (      monitor.asm):00086 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E4D7 BDE3FE           (      monitor.asm):00087 (7)     329         jsr     OutStr              ;
E4DA 3591             (      monitor.asm):00088 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00089                     
                      (      monitor.asm):00090                 ; Syntax error message
                      (      monitor.asm):00091                 ; --------------------
E4DC                  (      monitor.asm):00092                 ErrSyntaxError:
E4DC 3411             (      monitor.asm):00093 (4+3)   345         pshs    X,CC
E4DE BDE482           (      monitor.asm):00094 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E4E1 8EEBE2           (      monitor.asm):00095 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E4E4 BDE3FE           (      monitor.asm):00096 (7)     362         jsr     OutStr              ;
E4E7 3591             (      monitor.asm):00097 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00098                 
                      (      monitor.asm):00099                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00100                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00101                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00102                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00103                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00104                 ;                                                |_|
                      (      monitor.asm):00105                 ; Monitor help screen
                      (      monitor.asm):00106                 ; ===================
                      (      monitor.asm):00107                 
E4E9                  (      monitor.asm):00108                 CmdHelp:
E4E9 8EEA16           (      monitor.asm):00109 (3)     374         ldx     #CmdHelpMsg
E4EC BDE3FE           (      monitor.asm):00110 (7)     381         jsr     OutStr
E4EF 39               (      monitor.asm):00111 (4)     385         rts
                      (      monitor.asm):00112                     
                      (      monitor.asm):00113                 ;   ____                   _   ____                              
                      (      monitor.asm):00114                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00115                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00116                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00117                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00118                 ;
                      (      monitor.asm):00119                 ; Command parser for the monitor
                      (      monitor.asm):00120                 ; ==============================
                      (      monitor.asm):00121                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00122                 
                      (      monitor.asm):00123                     PRAGMA cc
                      (      monitor.asm):00124                 
E4F0                  (      monitor.asm):00125                 CmdParse:
E4F0 3427             (      monitor.asm):00126 (4+5)   9           pshs    A,B,Y,CC
E4F2 BDE8C1           (      monitor.asm):00127 (7)     16          jsr     SkipSpaces          ; Skip leading spaces
E4F5 BFEEA0           (      monitor.asm):00128 (5)     21          stx     TempWord            ; Store string pointer for command list cycling
E4F8 A684             (      monitor.asm):00129 (4+0)   25          lda     ,X                  ; Load first character from command string to see if it's empty
E4FA 2741             (      monitor.asm):00130 (3)     28          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E4FC 108EE9D2         (      monitor.asm):00131 (4)     32          ldy     #CmdList            ; Load command list table location in Y
E500                  (      monitor.asm):00132                 CmdParseChar:
E500 A680             (      monitor.asm):00133 (4+1)   37          lda     ,X+                 ; Load first character from command prompt string
E502 BDE153           (      monitor.asm):00134 (7)     44          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E505 E6A0             (      monitor.asm):00135 (4+1)   49          ldb     ,Y+                 ; Load a character from the command list
E507 2B1C             (      monitor.asm):00136 (3)     52          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E509 103789           (      monitor.asm):00137 (4)     56          cmpr    A,B                 ; Compare command string to command list character
E50C 2605             (      monitor.asm):00138 (3)     59          bne     CmdParseSkip        ; Skip command list entry and point to next command
E50E 7CEE8A           (      monitor.asm):00139 (6)     65          inc     CmdErrorPtr         ; Increment command line error pointer
E511 20ED             (      monitor.asm):00140 (3)     68          bra     CmdParseChar        ; Go and compare the next character
E513                  (      monitor.asm):00141                 CmdParseSkip:
E513 BEEEA0           (      monitor.asm):00142 (5)     73          ldx     TempWord            ; Restore command prompt pointer to starting position
E516 7FEE8A           (      monitor.asm):00143 (6)     79          clr     CmdErrorPtr         ; Restore command prompt error pointer
E519                  (      monitor.asm):00144                 CmdParseSkipLoop:
E519 E6A0             (      monitor.asm):00145 (4+1)   84          ldb     ,Y+                 ; Read next character
E51B 2AFC             (      monitor.asm):00146 (3)     87          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E51D 3122             (      monitor.asm):00147 (4+1)   92          leay    2,Y                 ; Jump over command address
E51F E6A4             (      monitor.asm):00148 (4+0)   96          ldb     ,Y                  ; Is it the end of the command list
E521 2717             (      monitor.asm):00149 (3)     99          beq     CmdParseNone        ; Yes it is, print error and exit
E523 20DB             (      monitor.asm):00150 (3)     102         bra     CmdParseChar        ; Repeat process until command found
E525                  (      monitor.asm):00151                 CmdParseValid:
                      (      monitor.asm):00152                     ; Check for characters after valid command
E525 8120             (      monitor.asm):00153 (2)     104         cmpa    #' '                ; Check for a parameter separator (space)
E527 2704             (      monitor.asm):00154 (3)     107         beq     CmdParseExecute     ; Yes, then execute command
E529 8100             (      monitor.asm):00155 (2)     109         cmpa    #$00                ; Check for an end of line in string (null)
E52B 260D             (      monitor.asm):00156 (3)     112         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E52D                  (      monitor.asm):00157                 CmdParseExecute:
E52D 7AEE8A           (      monitor.asm):00158 (6)     118         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E530 ECA4             (      monitor.asm):00159 (5+0)   123         ldd     ,Y                  ; Load address of command from table
E532 EDC3             (      monitor.asm):00160 (5+2)   130         std     ,--U                ; Save address to user stack
E534 301F             (      monitor.asm):00161 (4+1)   135         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E536 3527             (      monitor.asm):00162 (4+5)   144         puls    A,B,Y,CC            ; Restore registers
E538 6ED1             (      monitor.asm):00163 (3+6)   153         jmp     [,U++]              ; Execute command
E53A                  (      monitor.asm):00164                 CmdParseNone:
E53A BDE4B5           (      monitor.asm):00165 (7)     160         jsr     ErrInvalidCommand   ;
E53D                  (      monitor.asm):00166                 CmdParseEnd:
E53D 35A7             (      monitor.asm):00167 (4+7)   171         puls    A,B,Y,CC,PC
                      (      monitor.asm):00168                 
                      (      monitor.asm):00169                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00170                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00171                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00172                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00173                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00174                 ;                                                                |_|
                      (      monitor.asm):00175                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00176                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                     PRAGMA cc
                      (      monitor.asm):00179                 
E53F                  (      monitor.asm):00180                 CmdPrompt:
E53F 3406             (      monitor.asm):00181 (4+2)   6           pshs    D
E541 B6EE8D           (      monitor.asm):00182 (4)     10          lda     CurrBank            ;
E544 BDE3B6           (      monitor.asm):00183 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E547 863A             (      monitor.asm):00184 (2)     19          lda     #':'                ;
E549 BDE1C4           (      monitor.asm):00185 (7)     26          jsr     OutChar             ; Print separator
E54C FCEE8B           (      monitor.asm):00186 (5)     31          ldd     CurrAddress         ;
E54F BDE429           (      monitor.asm):00187 (7)     38          jsr     OutWord             ; Print current address
E552 863E             (      monitor.asm):00188 (2)     40          lda     #'>'                ;
E554 BDE1C4           (      monitor.asm):00189 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E557 8620             (      monitor.asm):00190 (2)     49          lda     #' '                ;
E559 BDE1C4           (      monitor.asm):00191 (7)     56          jsr     OutChar             ; Print space
E55C 7FEE8A           (      monitor.asm):00192 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E55F 3586             (      monitor.asm):00193 (4+4)   70          puls    D,PC
                      (      monitor.asm):00194                 
                      (      monitor.asm):00195                 ;  ____                              
                      (      monitor.asm):00196                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00197                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00198                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00199                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00200                 ;                             |_|    
                      (      monitor.asm):00201                 ;
                      (      monitor.asm):00202                 ; Memory dump
                      (      monitor.asm):00203                 ; ===========
                      (      monitor.asm):00204                 
E561                  (      monitor.asm):00205                 Dump:
E561 BDE8C1           (      monitor.asm):00206 (7)     77          jsr     SkipSpaces          ; Remove leading white spaces
E564 A684             (      monitor.asm):00207 (4+0)   81          lda     ,X                  ; Read a character from string
E566 2708             (      monitor.asm):00208 (3)     84          beq     DumpDisplay         ; If empty, assume Current Address, and display
E568 BDE27E           (      monitor.asm):00209 (7)     91          jsr     GetStrWord          ; Read address from string
E56B 2454             (      monitor.asm):00210 (3)     94          bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E56D FDEE8B           (      monitor.asm):00211 (5)     99          std     CurrAddress         ; Save inputed address in Current Address
E570                  (      monitor.asm):00212                 DumpDisplay:
E570 BEEE8B           (      monitor.asm):00213 (5)     104         ldx     CurrAddress         ; Retrieve Current Address
E573 1F12             (      monitor.asm):00214 (4)     108         tfr     X,Y
E575 118614           (      monitor.asm):00215 (3)     111         lde     #ScrVertRes-4       ; Number of lines to print
E578                  (      monitor.asm):00216                 DumpAddr:
E578 1F10             (      monitor.asm):00217 (4)     115         tfr     X,D                 ; Put Current address in D
E57A BDE429           (      monitor.asm):00218 (7)     122         jsr     OutWord             ;
E57D 863A             (      monitor.asm):00219 (2)     124         lda     #':'                ; Print address separator
E57F BDE1C4           (      monitor.asm):00220 (7)     131         jsr     OutChar             ;
E582 8620             (      monitor.asm):00221 (2)     133         lda     #' '                ; Print space separator
E584 BDE1C4           (      monitor.asm):00222 (7)     140         jsr     OutChar             ;
E587 C610             (      monitor.asm):00223 (2)     142         ldb     #BytePerLine        ; Get the number of bytes to print per line
E589                  (      monitor.asm):00224                 DumpByte:
E589 A680             (      monitor.asm):00225 (4+1)   147         lda     ,X+                 ; Print byte from Current Address
E58B BDE3B6           (      monitor.asm):00226 (7)     154         jsr     OutByte             ;
E58E 8620             (      monitor.asm):00227 (2)     156         lda     #' '                ; Print space separator
E590 BDE1C4           (      monitor.asm):00228 (7)     163         jsr     OutChar             ;
E593 5A               (      monitor.asm):00229 (1)     164         decb                        ; Decrement byte counter
E594 26F3             (      monitor.asm):00230 (3)     167         bne     DumpByte            ; If not finished, loop and output next byte
E596 867C             (      monitor.asm):00231 (2)     169         lda     #'|'                ; Print space separator
E598 BDE1C4           (      monitor.asm):00232 (7)     176         jsr     OutChar             ;
E59B 8620             (      monitor.asm):00233 (2)     178         lda     #' '                ; Print space separator
E59D BDE1C4           (      monitor.asm):00234 (7)     185         jsr     OutChar             ;
E5A0 C610             (      monitor.asm):00235 (2)     187         ldb     #BytePerLine        ; Get the number of bytes to print per line
E5A2                  (      monitor.asm):00236                 DumpChar:
E5A2 A6A0             (      monitor.asm):00237 (4+1)   192         lda     ,Y+                 ; Print character from Current Address
E5A4 8120             (      monitor.asm):00238 (2)     194         cmpa    #' '                ; Compare character to space character
E5A6 2D05             (      monitor.asm):00239 (3)     197         blt     DumpCharDot         ; If lower, then print dot
E5A8 4D               (      monitor.asm):00240 (1)     198         tsta                        ; Is the characther in the extended ASCII range
E5A9 2B02             (      monitor.asm):00241 (3)     201         bmi     DumpCharDot         ; If it is, the print dot
E5AB 2002             (      monitor.asm):00242 (3)     204         bra     DumpCharPrint       ; Else, print character
E5AD                  (      monitor.asm):00243                 DumpCharDot:
E5AD 862E             (      monitor.asm):00244 (2)     206         lda     #'.'                ; Replace character to dot
E5AF                  (      monitor.asm):00245                 DumpCharPrint:
E5AF BDE1C4           (      monitor.asm):00246 (7)     213         jsr     OutChar             ; Output actual or replaced character
E5B2 5A               (      monitor.asm):00247 (1)     214         decb                        ; Decrement byte counter
E5B3 26ED             (      monitor.asm):00248 (3)     217         bne     DumpChar            ; If not finished, loop and output next character
E5B5 BDE3D8           (      monitor.asm):00249 (7)     224         jsr     OutCRLF             ; Change line
E5B8 114A             (      monitor.asm):00250 (2)     226         dece                        ; Decrement the lines to print
E5BA 26BC             (      monitor.asm):00251 (3)     229         bne     DumpAddr
E5BC BFEE8B           (      monitor.asm):00252 (5)     234         stx     CurrAddress         ; Store new Current Address in memory
E5BF 2003             (      monitor.asm):00253 (3)     237         bra     DumpEnd
E5C1                  (      monitor.asm):00254                 DumpInvalidAddress:
E5C1 BDE49B           (      monitor.asm):00255 (7)     244         jsr     ErrInvalidAddress   ; Display address error
E5C4                  (      monitor.asm):00256                 DumpEnd:
E5C4 39               (      monitor.asm):00257 (4)     248         rts
                      (      monitor.asm):00258                     
                      (      monitor.asm):00259                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00260                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00261                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00262                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00263                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00264                 ;
                      (      monitor.asm):00265                 ; Load Intel Hex file to memory
                      (      monitor.asm):00266                 ; =============================
                      (      monitor.asm):00267                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00268                 ;           E = Checksum accumulator
                      (      monitor.asm):00269                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00270                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00271                 ;           Y = Byte count in current record
                      (      monitor.asm):00272                 ; Vars:     TempWord
                      (      monitor.asm):00273                 
E5C5                  (      monitor.asm):00274                 LoadIntelHex:
E5C5 3437             (      monitor.asm):00275 (4+7)   259         pshs    A,B,X,Y,CC
E5C7 1038             (      monitor.asm):00276 (6)     265         pshsw
E5C9 105F             (      monitor.asm):00277 (2)     267         clrw                        ; Clear the flags and checksum accumulator
E5CB 8EEBF2           (      monitor.asm):00278 (3)     270         ldx     #LoadStartMsg       ; Print message that loading will commence
E5CE BDE3FE           (      monitor.asm):00279 (7)     277         jsr     OutStr              ; 
E5D1                  (      monitor.asm):00280                 LoadRecord:
E5D1 BDE1AA           (      monitor.asm):00281 (7)     284         jsr     InChar              ; Read a character
E5D4 811B             (      monitor.asm):00282 (2)     286         cmpa    #ESC                ; Is it the ESC key?
E5D6 2609             (      monitor.asm):00283 (3)     289         bne     LoadStart           ; No, check for record marker
E5D8 8EEC2D           (      monitor.asm):00284 (3)     292         ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E5DB BDE3FE           (      monitor.asm):00285 (7)     299         jsr     OutStr              ; 
E5DE 1600B5           (      monitor.asm):00286 (4)     303         lbra    LoadEnd             ; Exit
E5E1                  (      monitor.asm):00287                 LoadStart:
E5E1 813A             (      monitor.asm):00288 (2)     305         cmpa    #':'                ; Start of record marker
E5E3 26EC             (      monitor.asm):00289 (3)     308         bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E5E5 114F             (      monitor.asm):00290 (2)     310         clre                        ; Clear checksum accumulator
                      (      monitor.asm):00291                     ; Read the record length
E5E7 BDE2ED           (      monitor.asm):00292 (7)     317         jsr     InByte              ; Get record length
E5EA 1F89             (      monitor.asm):00293 (4)     321         tfr     A,B                 ; Transfer value to LSB of D
E5EC 4F               (      monitor.asm):00294 (1)     322         clra                        ; Clear MSB of D
E5ED 1F02             (      monitor.asm):00295 (4)     326         tfr     D,Y                 ; Transfer byte count D to Y
E5EF 1F9E             (      monitor.asm):00296 (4)     330         tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00297                     ; Read the destination address
E5F1 BDE36D           (      monitor.asm):00298 (7)     337         jsr     InWord              ; Read the address
E5F4 BFEEA0           (      monitor.asm):00299 (5)     342         stx     TempWord            ; Save last address pointed by X, as last record is $0000
E5F7 1F01             (      monitor.asm):00300 (4)     346         tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00301                     ; Add checksum of both bytes
E5F9 10308E           (      monitor.asm):00302 (4)     350         addr    A,E                 ; Add MSB of address to checksum accumulator
E5FC 10309E           (      monitor.asm):00303 (4)     354         addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00304                     ;Set origin address flag and store address in CurrAddress
E5FF 115D             (      monitor.asm):00305 (2)     356         tstf                        ; Test the flags register
E601 2B09             (      monitor.asm):00306 (3)     359         bmi     LoadRecordType      ; If it's not the first line of code read record type
E603 BFEE8B           (      monitor.asm):00307 (5)     364         stx     CurrAddress         ; Save start address
E606 BFEE9D           (      monitor.asm):00308 (5)     369         stx     RegPC               ; Save the user PC 
E609 11C680           (      monitor.asm):00309 (3)     372         ldf     #$80                ; Sets the origin flag
E60C                  (      monitor.asm):00310                 LoadRecordType:
E60C BDE2ED           (      monitor.asm):00311 (7)     379         jsr     InByte              ; Get the record type
                      (      monitor.asm):00312                     ; Add checksum
E60F 10308E           (      monitor.asm):00313 (4)     383         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00314                     ; Which record type is it?
E612 8100             (      monitor.asm):00315 (2)     385         cmpa    #0                  ; Is it the Data record type?
E614 2713             (      monitor.asm):00316 (3)     388         beq     LoadData            ; Get Data
E616 8101             (      monitor.asm):00317 (2)     390         cmpa    #1                  ; Is it the End of File record type?
E618 273E             (      monitor.asm):00318 (3)     393         beq     LoadEOF             ; Load last line
E61A 8EEC48           (      monitor.asm):00319 (3)     396         ldx     #LoadRecordErr      ; 
E61D BDE3FE           (      monitor.asm):00320 (7)     403         jsr     OutStr              ; Print Unknown Record Type message
E620 BDE3B6           (      monitor.asm):00321 (7)     410         jsr     OutByte             ; Print the actual record number
E623 BDE3D8           (      monitor.asm):00322 (7)     417         jsr     OutCRLF             ; Change line
E626 16006D           (      monitor.asm):00323 (4)     421         lbra    LoadEnd
E629                  (      monitor.asm):00324                 LoadData:
                      (      monitor.asm):00325                     ; Get record type 00 (Data)
E629 BDE2ED           (      monitor.asm):00326 (7)     428         jsr     InByte              ; Read data
E62C A780             (      monitor.asm):00327 (4+1)   433         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00328                     ; Add checksum
E62E 10308E           (      monitor.asm):00329 (4)     437         addr    A,E                 ; Add byte data to checksum accumulator
E631 313F             (      monitor.asm):00330 (4+1)   442         leay    -1,Y                ; Decrement byte counter
E633 108C0000         (      monitor.asm):00331 (4)     446         cmpy    #0
E637 26F0             (      monitor.asm):00332 (3)     449         bne     LoadData
E639                  (      monitor.asm):00333                 LoadChecksum:
                      (      monitor.asm):00334                     ; Process accumulated checksum
E639 1143             (      monitor.asm):00335 (2)     451         come                        ; Complement F
E63B 114C             (      monitor.asm):00336 (2)     453         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00337                     ; Get record checksum
E63D BDE2ED           (      monitor.asm):00338 (7)     460         jsr     InByte              ; Read checksum
E640 10378E           (      monitor.asm):00339 (4)     464         cmpr    A,E                 ; Do the checksums match
E643 2608             (      monitor.asm):00340 (3)     467         bne     LoadFailure         ; If inconsistent, display message
E645 862E             (      monitor.asm):00341 (2)     469         lda     #'.'                ; Character indicating line is ok
E647 BDE1C4           (      monitor.asm):00342 (7)     476         jsr     OutChar             ; Print the period character
E64A 16FF84           (      monitor.asm):00343 (4)     480         lbra    LoadRecord          ; Fetch next record
E64D                  (      monitor.asm):00344                 LoadFailure:
                      (      monitor.asm):00345                     ; Indicate record failed checksum
E64D 11C681           (      monitor.asm):00346 (3)     483         ldf     #$81                ; Sets the checksum failure flag
E650 8678             (      monitor.asm):00347 (2)     485         lda     #'x'                ; Load the failed checksum character
E652 BDE1C4           (      monitor.asm):00348 (7)     492         jsr     OutChar             ; Print it
E655 16FF79           (      monitor.asm):00349 (4)     496         lbra    LoadRecord          ; Get next record
E658                  (      monitor.asm):00350                 LoadEOF:
                      (      monitor.asm):00351                     ; Process accumulated checksum
E658 1143             (      monitor.asm):00352 (2)     498         come                        ; Complement E
E65A 114C             (      monitor.asm):00353 (2)     500         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00354                     ; Get end record (01) checksum
E65C BDE2ED           (      monitor.asm):00355 (7)     507         jsr     InByte              ; Get the checksum byte
E65F 10378E           (      monitor.asm):00356 (4)     511         cmpr    A,E                 ; Do the checksums match
E662 2708             (      monitor.asm):00357 (3)     514         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E664 11C681           (      monitor.asm):00358 (3)     517         ldf     #$81                ; Sets the checksum failure flag
E667 8658             (      monitor.asm):00359 (2)     519         lda     #'X'                ; Load the failed checksum character
E669 BDE1C4           (      monitor.asm):00360 (7)     526         jsr     OutChar             ; Print it Exit routine
E66C                  (      monitor.asm):00361                 LoadCheckFlag:
E66C 11C180           (      monitor.asm):00362 (3)     529         cmpf    #$80                ; Was there any checksum errors?
E66F 270B             (      monitor.asm):00363 (3)     532         beq     LoadSuccess         ; If no errors, then print success
E671 BDE3D8           (      monitor.asm):00364 (7)     539         jsr     OutCRLF             ; Change line
E674 8EEC5E           (      monitor.asm):00365 (3)     542         ldx     #LoadFailedErr      ; Print download failed
E677 BDE3FE           (      monitor.asm):00366 (7)     549         jsr     OutStr              ;
E67A 201A             (      monitor.asm):00367 (3)     552         bra     LoadEnd             ;
E67C                  (      monitor.asm):00368                 LoadSuccess:
E67C BEEEA0           (      monitor.asm):00369 (5)     557         ldx     TempWord            ; Restore last position of X
E67F CC36FF           (      monitor.asm):00370 (3)     560         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E682 ED81             (      monitor.asm):00371 (5+2)   567         std     ,X++                ; Store it at the end of code
E684 CC103A           (      monitor.asm):00372 (3)     570         ldd     #$103A              ; Save opcode "pshuw"
E687 ED81             (      monitor.asm):00373 (5+2)   577         std     ,X++                ; Store it at the end of code
E689 8639             (      monitor.asm):00374 (2)     579         lda     #$39                ; Save opcode "rts"
E68B A784             (      monitor.asm):00375 (4+0)   583         sta     ,X                  ; Store it at the end of code to return to prompt
E68D BDE3D8           (      monitor.asm):00376 (7)     590         jsr     OutCRLF             ; Change line
E690 8EEC86           (      monitor.asm):00377 (3)     593         ldx     #LoadSuccessMsg     ; Print success message
E693 BDE3FE           (      monitor.asm):00378 (7)     600         jsr     OutStr
E696                  (      monitor.asm):00379                 LoadEnd:
E696 1039             (      monitor.asm):00380 (6)     606         pulsw
E698 35B7             (      monitor.asm):00381 (4+9)   619         puls    A,B,X,Y,CC,PC
                      (      monitor.asm):00382                 
                      (      monitor.asm):00383                 ;  __  __                                             __  __                 
                      (      monitor.asm):00384                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00385                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00386                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00387                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00388                 ;                                             |___/                   |_|
                      (      monitor.asm):00389                 ;
                      (      monitor.asm):00390                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00391                 ; ===========================================
                      (      monitor.asm):00392                 
E69A                  (      monitor.asm):00393                 MemoryMap:
E69A 3406             (      monitor.asm):00394 (4+2)   625         pshs    A,B
E69C 8EEC9C           (      monitor.asm):00395 (3)     628         ldx     #MemoryMapMsg
E69F BDE3FE           (      monitor.asm):00396 (7)     635         jsr     OutStr              ; Print up to end of RAM
E6A2 CCDFFF           (      monitor.asm):00397 (3)     638         ldd     #RomStart-1
E6A5 BDE429           (      monitor.asm):00398 (7)     645         jsr     OutWord             ; Print RAM end
E6A8 BDE3FE           (      monitor.asm):00399 (7)     652         jsr     OutStr              ; Print up to begining of ROM
E6AB 104C             (      monitor.asm):00400 (2)     654         incd
E6AD BDE429           (      monitor.asm):00401 (7)     661         jsr     OutWord             ; Print ROM start
E6B0 BDE3FE           (      monitor.asm):00402 (7)     668         jsr     OutStr              ; Print till the end of mapping
E6B3 3586             (      monitor.asm):00403 (4+4)   676         puls    A,B,PC
                      (      monitor.asm):00404                 
                      (      monitor.asm):00405                 ;  ____                  _    
                      (      monitor.asm):00406                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00407                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00408                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00409                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00410                 ;
                      (      monitor.asm):00411                 ;
                      (      monitor.asm):00412                 ; Read a byte from a specific or current address
                      (      monitor.asm):00413                 ; ==============================================
                      (      monitor.asm):00414                 
E6B5                  (      monitor.asm):00415                 Peek:
E6B5 BDE8C1           (      monitor.asm):00416 (7)     683         jsr     SkipSpaces
E6B8 A684             (      monitor.asm):00417 (4+0)   687         lda     ,X
E6BA 2708             (      monitor.asm):00418 (3)     690         beq     PeekDisplay
E6BC BDE27E           (      monitor.asm):00419 (7)     697         jsr     GetStrWord
E6BF 241A             (      monitor.asm):00420 (3)     700         bcc     PeekInvalidAddr
E6C1 FDEE8B           (      monitor.asm):00421 (5)     705         std     CurrAddress
E6C4                  (      monitor.asm):00422                 PeekDisplay:
E6C4 FCEE8B           (      monitor.asm):00423 (5)     710         ldd     CurrAddress
E6C7 BDE429           (      monitor.asm):00424 (7)     717         jsr     OutWord
E6CA 863D             (      monitor.asm):00425 (2)     719         lda     #'='
E6CC BDE1C4           (      monitor.asm):00426 (7)     726         jsr     OutChar
E6CF A69FEE8B         (      monitor.asm):00427 (4+5)   735         lda     [CurrAddress]
E6D3 BDE3B6           (      monitor.asm):00428 (7)     742         jsr     OutByte
E6D6 BDE3D8           (      monitor.asm):00429 (7)     749         jsr     OutCRLF
E6D9 2003             (      monitor.asm):00430 (3)     752         bra     PeekEnd
E6DB                  (      monitor.asm):00431                 PeekInvalidAddr:
E6DB BDE49B           (      monitor.asm):00432 (7)     759         jsr     ErrInvalidAddress
E6DE                  (      monitor.asm):00433                 PeekEnd:
E6DE 39               (      monitor.asm):00434 (4)     763         rts
                      (      monitor.asm):00435                 
                      (      monitor.asm):00436                 ;  ____            _           
                      (      monitor.asm):00437                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00438                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00439                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00440                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00441                 ;
                      (      monitor.asm):00442                 ;
                      (      monitor.asm):00443                 ; Writes a byte at a specific address
                      (      monitor.asm):00444                 ; ===================================
                      (      monitor.asm):00445                 
E6DF                  (      monitor.asm):00446                 Poke:
E6DF BDE8C1           (      monitor.asm):00447 (7)     770         jsr     SkipSpaces          ; Remove excessive leading spaces
E6E2 A684             (      monitor.asm):00448 (4+0)   774         lda     ,X                  ; Load character
E6E4 2735             (      monitor.asm):00449 (3)     777         beq     PokeNoParameters    ; If no parameters, print no parameter error
E6E6 BDE27E           (      monitor.asm):00450 (7)     784         jsr     GetStrWord          ; Get an address
E6E9 242B             (      monitor.asm):00451 (3)     787         bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E6EB FDEE8B           (      monitor.asm):00452 (5)     792         std     CurrAddress         ; Save address
E6EE BDE8C1           (      monitor.asm):00453 (7)     799         jsr     SkipSpaces          ; Remove unecessary spaces
E6F1 BDE1E9           (      monitor.asm):00454 (7)     806         jsr     GetStrByte          ; Get byte
E6F4 241B             (      monitor.asm):00455 (3)     809         bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
E6F6 A79FEE8B         (      monitor.asm):00456 (4+5)   818         sta     [CurrAddress]       ; Poke value at address
E6FA FCEE8B           (      monitor.asm):00457 (5)     823         ldd     CurrAddress         ; Print address
E6FD BDE429           (      monitor.asm):00458 (7)     830         jsr     OutWord             ;
E700 863D             (      monitor.asm):00459 (2)     832         lda     #'='                ; Print a colon
E702 BDE1C4           (      monitor.asm):00460 (7)     839         jsr     OutChar             ;
E705 A69FEE8B         (      monitor.asm):00461 (4+5)   848         lda     [CurrAddress]       ; Load A from Current Address
E709 BDE3B6           (      monitor.asm):00462 (7)     855         jsr     OutByte             ; Print byte value
E70C BDE3D8           (      monitor.asm):00463 (7)     862         jsr     OutCRLF             ; New line
E70F 200D             (      monitor.asm):00464 (3)     865         bra     PokeEnd
E711                  (      monitor.asm):00465                 PokeInvalidByte:
E711 BDE4A8           (      monitor.asm):00466 (7)     872         jsr     ErrInvalidByte      ; Print invalid byte
E714 2008             (      monitor.asm):00467 (3)     875         bra     PokeEnd
E716                  (      monitor.asm):00468                 PokeInvalidAddress:
E716 BDE49B           (      monitor.asm):00469 (7)     882         jsr     ErrInvalidAddress   ; Print invalid address error
E719 2003             (      monitor.asm):00470 (3)     885         bra     PokeEnd
E71B                  (      monitor.asm):00471                 PokeNoParameters:
E71B BDE4CF           (      monitor.asm):00472 (7)     892         jsr     ErrNoParameter      ; Print no parameter error
E71E                  (      monitor.asm):00473                 PokeEnd:
E71E 39               (      monitor.asm):00474 (4)     896         rts
                      (      monitor.asm):00475                 
                      (      monitor.asm):00476                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00477                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00478                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00479                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00480                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00481                 ;                                                  |___/                                     
                      (      monitor.asm):00482                 ;
                      (      monitor.asm):00483                 ; Print Registers
                      (      monitor.asm):00484                 ; ===============
E71F                  (      monitor.asm):00485                 PrintRegisters:
                      (      monitor.asm):00486                     ; Print Register A
E71F 8641             (      monitor.asm):00487 (2)     898         lda     #'A'
E721 BDE1C4           (      monitor.asm):00488 (7)     905         jsr     OutChar
E724 863A             (      monitor.asm):00489 (2)     907         lda     #':'
E726 BDE1C4           (      monitor.asm):00490 (7)     914         jsr     OutChar
E729 B6EE91           (      monitor.asm):00491 (4)     918         lda     RegA
E72C BDE3B6           (      monitor.asm):00492 (7)     925         jsr     OutByte
E72F 8620             (      monitor.asm):00493 (2)     927         lda     #' '
E731 BDE1C4           (      monitor.asm):00494 (7)     934         jsr     OutChar
                      (      monitor.asm):00495                     ; Print Register B
E734 8642             (      monitor.asm):00496 (2)     936         lda     #'B'
E736 BDE1C4           (      monitor.asm):00497 (7)     943         jsr     OutChar
E739 863A             (      monitor.asm):00498 (2)     945         lda     #':'
E73B BDE1C4           (      monitor.asm):00499 (7)     952         jsr     OutChar
E73E B6EE92           (      monitor.asm):00500 (4)     956         lda     RegB
E741 BDE3B6           (      monitor.asm):00501 (7)     963         jsr     OutByte
E744 8620             (      monitor.asm):00502 (2)     965         lda     #' '
E746 BDE1C4           (      monitor.asm):00503 (7)     972         jsr     OutChar
                      (      monitor.asm):00504                     ; Print Register E
E749 8645             (      monitor.asm):00505 (2)     974         lda     #'E'
E74B BDE1C4           (      monitor.asm):00506 (7)     981         jsr     OutChar
E74E 863A             (      monitor.asm):00507 (2)     983         lda     #':'
E750 BDE1C4           (      monitor.asm):00508 (7)     990         jsr     OutChar
E753 B6EE93           (      monitor.asm):00509 (4)     994         lda     RegE
E756 BDE3B6           (      monitor.asm):00510 (7)     1001        jsr     OutByte
E759 8620             (      monitor.asm):00511 (2)     1003        lda     #' '
E75B BDE1C4           (      monitor.asm):00512 (7)     1010        jsr     OutChar
                      (      monitor.asm):00513                     ; Print Register F
E75E 8646             (      monitor.asm):00514 (2)     1012        lda     #'F'
E760 BDE1C4           (      monitor.asm):00515 (7)     1019        jsr     OutChar
E763 863A             (      monitor.asm):00516 (2)     1021        lda     #':'
E765 BDE1C4           (      monitor.asm):00517 (7)     1028        jsr     OutChar
E768 B6EE94           (      monitor.asm):00518 (4)     1032        lda     RegF
E76B BDE3B6           (      monitor.asm):00519 (7)     1039        jsr     OutByte
E76E 8620             (      monitor.asm):00520 (2)     1041        lda     #' '
E770 BDE1C4           (      monitor.asm):00521 (7)     1048        jsr     OutChar
                      (      monitor.asm):00522                     ; Print Register X
E773 8658             (      monitor.asm):00523 (2)     1050        lda     #'X'
E775 BDE1C4           (      monitor.asm):00524 (7)     1057        jsr     OutChar
E778 863A             (      monitor.asm):00525 (2)     1059        lda     #':'
E77A BDE1C4           (      monitor.asm):00526 (7)     1066        jsr     OutChar
E77D FCEE95           (      monitor.asm):00527 (5)     1071        ldd     RegX
E780 BDE429           (      monitor.asm):00528 (7)     1078        jsr     OutWord
E783 8620             (      monitor.asm):00529 (2)     1080        lda     #' '
E785 BDE1C4           (      monitor.asm):00530 (7)     1087        jsr     OutChar
                      (      monitor.asm):00531                     ; Print Register Y
E788 8659             (      monitor.asm):00532 (2)     1089        lda     #'Y'
E78A BDE1C4           (      monitor.asm):00533 (7)     1096        jsr     OutChar
E78D 863A             (      monitor.asm):00534 (2)     1098        lda     #':'
E78F BDE1C4           (      monitor.asm):00535 (7)     1105        jsr     OutChar
E792 FCEE97           (      monitor.asm):00536 (5)     1110        ldd     RegY
E795 BDE429           (      monitor.asm):00537 (7)     1117        jsr     OutWord
E798 8620             (      monitor.asm):00538 (2)     1119        lda     #' '
E79A BDE1C4           (      monitor.asm):00539 (7)     1126        jsr     OutChar
                      (      monitor.asm):00540                     ; Print Register U
E79D 8655             (      monitor.asm):00541 (2)     1128        lda     #'U'
E79F BDE1C4           (      monitor.asm):00542 (7)     1135        jsr     OutChar
E7A2 863A             (      monitor.asm):00543 (2)     1137        lda     #':'
E7A4 BDE1C4           (      monitor.asm):00544 (7)     1144        jsr     OutChar
E7A7 FCEE99           (      monitor.asm):00545 (5)     1149        ldd     RegU
E7AA BDE429           (      monitor.asm):00546 (7)     1156        jsr     OutWord
E7AD 8620             (      monitor.asm):00547 (2)     1158        lda     #' '
E7AF BDE1C4           (      monitor.asm):00548 (7)     1165        jsr     OutChar
                      (      monitor.asm):00549                     ; Print Register S
E7B2 8653             (      monitor.asm):00550 (2)     1167        lda     #'S'
E7B4 BDE1C4           (      monitor.asm):00551 (7)     1174        jsr     OutChar
E7B7 863A             (      monitor.asm):00552 (2)     1176        lda     #':'
E7B9 BDE1C4           (      monitor.asm):00553 (7)     1183        jsr     OutChar
E7BC FCEE9B           (      monitor.asm):00554 (5)     1188        ldd     RegS
E7BF BDE429           (      monitor.asm):00555 (7)     1195        jsr     OutWord
E7C2 8620             (      monitor.asm):00556 (2)     1197        lda     #' '
E7C4 BDE1C4           (      monitor.asm):00557 (7)     1204        jsr     OutChar
                      (      monitor.asm):00558                     ; Print Register CC
E7C7 8643             (      monitor.asm):00559 (2)     1206        lda     #'C'
E7C9 BDE1C4           (      monitor.asm):00560 (7)     1213        jsr     OutChar
E7CC BDE1C4           (      monitor.asm):00561 (7)     1220        jsr     OutChar
E7CF 863A             (      monitor.asm):00562 (2)     1222        lda     #':'
E7D1 BDE1C4           (      monitor.asm):00563 (7)     1229        jsr     OutChar
E7D4 B6EE8F           (      monitor.asm):00564 (4)     1233        lda     RegCC
E7D7 BDE3B6           (      monitor.asm):00565 (7)     1240        jsr     OutByte
E7DA 8620             (      monitor.asm):00566 (2)     1242        lda     #' '
E7DC BDE1C4           (      monitor.asm):00567 (7)     1249        jsr     OutChar
                      (      monitor.asm):00568                     ; Print Register DP
E7DF 8644             (      monitor.asm):00569 (2)     1251        lda     #'D'
E7E1 BDE1C4           (      monitor.asm):00570 (7)     1258        jsr     OutChar
E7E4 8650             (      monitor.asm):00571 (2)     1260        lda     #'P'
E7E6 BDE1C4           (      monitor.asm):00572 (7)     1267        jsr     OutChar
E7E9 863A             (      monitor.asm):00573 (2)     1269        lda     #':'
E7EB BDE1C4           (      monitor.asm):00574 (7)     1276        jsr     OutChar
E7EE B6EE90           (      monitor.asm):00575 (4)     1280        lda     RegDP
E7F1 BDE3B6           (      monitor.asm):00576 (7)     1287        jsr     OutByte
E7F4 8620             (      monitor.asm):00577 (2)     1289        lda     #' '
E7F6 BDE1C4           (      monitor.asm):00578 (7)     1296        jsr     OutChar
                      (      monitor.asm):00579                     ; Print Program Counter
E7F9 8650             (      monitor.asm):00580 (2)     1298        lda     #'P'
E7FB BDE1C4           (      monitor.asm):00581 (7)     1305        jsr     OutChar
E7FE 8643             (      monitor.asm):00582 (2)     1307        lda     #'C'
E800 BDE1C4           (      monitor.asm):00583 (7)     1314        jsr     OutChar
E803 863A             (      monitor.asm):00584 (2)     1316        lda     #':'
E805 BDE1C4           (      monitor.asm):00585 (7)     1323        jsr     OutChar
E808 FCEE9D           (      monitor.asm):00586 (5)     1328        ldd     RegPC
E80B BDE429           (      monitor.asm):00587 (7)     1335        jsr     OutWord
E80E BDE3D8           (      monitor.asm):00588 (7)     1342        jsr     OutCRLF
E811 39               (      monitor.asm):00589 (4)     1346        rts
                      (      monitor.asm):00590                 
                      (      monitor.asm):00591                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):00592                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00593                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00594                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00595                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00596                 ;                                               |___/                                     
                      (      monitor.asm):00597                 ;
                      (      monitor.asm):00598                 ; Push Registers
                      (      monitor.asm):00599                 ; ==============
                      (      monitor.asm):00600                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):00601                 
E812                  (      monitor.asm):00602                 PushRegisters:  
                      (      monitor.asm):00603                     ; Recover register values from last run command
E812 103B             (      monitor.asm):00604 (6)     1352        puluw
E814 377F             (      monitor.asm):00605 (4+10)  1366        pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):00606                     ; Save registers in variables
E816 3401             (      monitor.asm):00607 (4+1)   1371        pshs    CC                  ; Store CC so it's not altered
E818 B7EE91           (      monitor.asm):00608 (4)     1375        sta     RegA                ; Save the A register
E81B 3502             (      monitor.asm):00609 (4+1)   1380        puls    A                   ; Restore CC so it can be saved
E81D B7EE8F           (      monitor.asm):00610 (4)     1384        sta     RegCC               ; Save the condition code register
E820 F7EE92           (      monitor.asm):00611 (4)     1388        stb     RegB                ; Save the B register
E823 11B7EE93         (      monitor.asm):00612 (5)     1393        ste     RegE                ; Save the E register
E827 11F7EE94         (      monitor.asm):00613 (5)     1398        stf     RegF                ; Save the F register
E82B BFEE95           (      monitor.asm):00614 (5)     1403        stx     RegX                ; Save the X register
E82E 10BFEE97         (      monitor.asm):00615 (6)     1409        sty     RegY                ; Save the Y register
E832 10FFEE9B         (      monitor.asm):00616 (6)     1415        sts     RegS                ; Save the systemp stack
E836 3706             (      monitor.asm):00617 (4+2)   1421        pulu    D                   ; Restore PC in D
E838 830002           (      monitor.asm):00618 (3)     1424        subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
E83B FDEE9D           (      monitor.asm):00619 (5)     1429        std     RegPC               ; Save the program counter that was in D
E83E FFEE99           (      monitor.asm):00620 (5)     1434        stu     RegU                ; Save the user stack
E841 39               (      monitor.asm):00621 (4)     1438        rts
                      (      monitor.asm):00622                 
                      (      monitor.asm):00623                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):00624                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00625                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00626                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00627                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00628                 ;                                         |___/                                     
                      (      monitor.asm):00629                 ;
                      (      monitor.asm):00630                 ; Pull Registers
                      (      monitor.asm):00631                 ; --------------
E842                  (      monitor.asm):00632                 PullRegisters:  
E842 B6EE8F           (      monitor.asm):00633 (4)     1442        lda     RegCC               ; Load CC register
E845 3402             (      monitor.asm):00634 (4+1)   1447        pshs    A                   ; Store it so it can be restored
E847 B6EE91           (      monitor.asm):00635 (4)     1451        lda     RegA                ; Load the A register
E84A F6EE92           (      monitor.asm):00636 (4)     1455        ldb     RegB                ; Load the B register
E84D 11B6EE93         (      monitor.asm):00637 (5)     1460        lde     RegE                ; Load the E register
E851 11F6EE94         (      monitor.asm):00638 (5)     1465        ldf     RegF                ; Load the F register
E855 BEEE95           (      monitor.asm):00639 (5)     1470        ldx     RegX                ; Load the X register
E858 10BEEE97         (      monitor.asm):00640 (6)     1476        ldy     RegY                ; Load the Y register
E85C FEEE99           (      monitor.asm):00641 (5)     1481        ldu     RegU                ; Load the user stack
E85F 3581             (      monitor.asm):00642 (4+3)   1488        puls    CC,PC
                      (      monitor.asm):00643                 
                      (      monitor.asm):00644                 ;  ____                  
                      (      monitor.asm):00645                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):00646                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):00647                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):00648                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):00649                 ;
                      (      monitor.asm):00650                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):00651                 ; -------------------------------------------------
                      (      monitor.asm):00652                 ; Input:    X = Command line string
                      (      monitor.asm):00653                 
E861                  (      monitor.asm):00654                 Run:
E861 BDE8C1           (      monitor.asm):00655 (7)     1495        jsr     SkipSpaces          ; Removes possible leading spaces
E864 A684             (      monitor.asm):00656 (4+0)   1499        lda     ,X                  ; Read character from command line
E866 2708             (      monitor.asm):00657 (3)     1502        beq     RunValidate         ; Use current address
E868                  (      monitor.asm):00658                 RunGetAddress:
E868 BDE27E           (      monitor.asm):00659 (7)     1509        jsr     GetStrWord          ; Get address from the input buffer
E86B 2413             (      monitor.asm):00660 (3)     1512        bcc     RunError            ; Invalid address, then print error
E86D FDEE8B           (      monitor.asm):00661 (5)     1517        std     CurrAddress         ; Save address to memory
E870                  (      monitor.asm):00662                 RunValidate:
E870 A69FEE8B         (      monitor.asm):00663 (4+5)   1526        lda     [CurrAddress]       ; Load byte at specified address
E874 270D             (      monitor.asm):00664 (3)     1529        beq     RunEnd              ; If it's zero, then don't try to execute code
E876                  (      monitor.asm):00665                 RunExecute:
E876 7CEE8E           (      monitor.asm):00666 (6)     1535        inc     RunFlag             ; Make run flag non zero
E879 BDE842           (      monitor.asm):00667 (7)     1542        jsr     PullRegisters       ; Restore registers from previous command
E87C 6E9FEE8B         (      monitor.asm):00668 (3+5)   1550        jmp     [CurrAddress]       ; Execute code at specified address
E880                  (      monitor.asm):00669                 RunError:
E880 BDE49B           (      monitor.asm):00670 (7)     1557        jsr     ErrInvalidAddress   ; If there's an error in the address, print it
E883                  (      monitor.asm):00671                 RunEnd:
E883 39               (      monitor.asm):00672 (4)     1561        rts
                      (      monitor.asm):00673                 
                      (      monitor.asm):00674                 ;  ____           _        _          _       _                           
                      (      monitor.asm):00675                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):00676                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):00677                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):00678                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):00679                 ;
                      (      monitor.asm):00680                 ; Sets the current address
                      (      monitor.asm):00681                 ; ========================
                      (      monitor.asm):00682                 ; Input:    X = Command line string
                      (      monitor.asm):00683                 
E884                  (      monitor.asm):00684                 SetAddress:
E884 3407             (      monitor.asm):00685 (4+3)   1568        pshs    A,B,CC
E886 BDE8C1           (      monitor.asm):00686 (7)     1575        jsr     SkipSpaces          ; Remove leading spaces
E889 A684             (      monitor.asm):00687 (4+0)   1579        lda     ,X                  ; Load first character
E88B 270F             (      monitor.asm):00688 (3)     1582        beq     SetAddressDefault   ; Is it the end of the string?
E88D BDE27E           (      monitor.asm):00689 (7)     1589        jsr     GetStrWord          ; Get address from the input buffer
E890 2405             (      monitor.asm):00690 (3)     1592        bcc     SetAddressError     ; Error in address
E892 FDEE8B           (      monitor.asm):00691 (5)     1597        std     CurrAddress         ; Save the address
E895 200B             (      monitor.asm):00692 (3)     1600        bra     SetAddressEnd
E897                  (      monitor.asm):00693                 SetAddressError:
E897 BDE49B           (      monitor.asm):00694 (7)     1607        jsr     ErrInvalidAddress   ; Display address error
E89A 2006             (      monitor.asm):00695 (3)     1610        bra     SetAddressEnd
E89C                  (      monitor.asm):00696                 SetAddressDefault:
E89C CC0000           (      monitor.asm):00697 (3)     1613        ldd     #$0000
E89F FDEE8B           (      monitor.asm):00698 (5)     1618        std     CurrAddress         ; Set default address to $0000
E8A2                  (      monitor.asm):00699                 SetAddressEnd:
E8A2 3587             (      monitor.asm):00700 (4+5)   1627        puls    A,B,CC,PC
                      (      monitor.asm):00701                 
                      (      monitor.asm):00702                 ;  ____           _     ____                    _    
                      (      monitor.asm):00703                 ; / ___|    ___  | |_  | __ )    __ _   _ __   | | __
                      (      monitor.asm):00704                 ; \___ \   / _ \ | __| |  _ \   / _` | | '_ \  | |/ /
                      (      monitor.asm):00705                 ;  ___) | |  __/ | |_  | |_) | | (_| | | | | | |   < 
                      (      monitor.asm):00706                 ; |____/   \___|  \__| |____/   \__,_| |_| |_| |_|\_\
                      (      monitor.asm):00707                 ;
                      (      monitor.asm):00708                 ; Sets the current bank
                      (      monitor.asm):00709                 ; =====================
                      (      monitor.asm):00710                 ; Input:    X = Command line string
                      (      monitor.asm):00711                 
E8A4                  (      monitor.asm):00712                 SetBank:
E8A4 3403             (      monitor.asm):00713 (4+2)   1633        pshs    A,CC
E8A6 BDE8C1           (      monitor.asm):00714 (7)     1640        jsr     SkipSpaces          ; Remove leading spaces
E8A9 A684             (      monitor.asm):00715 (4+0)   1644        lda     ,X                  ; Load first character
E8AB 270F             (      monitor.asm):00716 (3)     1647        beq     SetBankDefault      ; Is it the end of the string?
E8AD BDE1E9           (      monitor.asm):00717 (7)     1654        jsr     GetStrByte          ; Get bank from the input buffer
E8B0 2405             (      monitor.asm):00718 (3)     1657        bcc     SetBankError        ; Error in byte
E8B2 B7EE8D           (      monitor.asm):00719 (4)     1661        sta     CurrBank            ; Save the bank
E8B5 2008             (      monitor.asm):00720 (3)     1664        bra     SetBankEnd
E8B7                  (      monitor.asm):00721                 SetBankError:
E8B7 BDE4A8           (      monitor.asm):00722 (7)     1671        jsr     ErrInvalidByte      ; Display byte error
E8BA 2003             (      monitor.asm):00723 (3)     1674        bra     SetBankEnd
E8BC                  (      monitor.asm):00724                 SetBankDefault:
E8BC 7FEE8D           (      monitor.asm):00725 (6)     1680        clr     CurrBank            ; Set default bank to $00
E8BF                  (      monitor.asm):00726                 SetBankEnd:
E8BF 3583             (      monitor.asm):00727 (4+4)   1688        puls    A,CC,PC
                      (      monitor.asm):00728                 
                      (      monitor.asm):00729                 ;  ____    _      _           ____                                      
                      (      monitor.asm):00730                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):00731                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):00732                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):00733                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):00734                 ;                    |_|             |_|
                      (      monitor.asm):00735                 ;
                      (      monitor.asm):00736                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):00737                 ; ================================================================================
                      (      monitor.asm):00738                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):00739                 ; Output:   X = New position of pointer
                      (      monitor.asm):00740                 
                      (      monitor.asm):00741                     PRAGMA cc
                      (      monitor.asm):00742                 
E8C1                  (      monitor.asm):00743                 SkipSpaces:
E8C1 3403             (      monitor.asm):00744 (4+2)   6           pshs    A,CC
E8C3                  (      monitor.asm):00745                 SkipSpacesLoop:
E8C3 A684             (      monitor.asm):00746 (4+0)   10          lda     ,X                  ; Load character from string
E8C5 270B             (      monitor.asm):00747 (3)     13          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
E8C7 8120             (      monitor.asm):00748 (2)     15          cmpa    #' '                ; Is it a space?
E8C9 2607             (      monitor.asm):00749 (3)     18          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
E8CB 3001             (      monitor.asm):00750 (4+1)   23          leax    1,X                 ; Increment index for next character
E8CD 7CEE8A           (      monitor.asm):00751 (6)     29          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
E8D0 20F1             (      monitor.asm):00752 (3)     32          bra     SkipSpacesLoop      ; Go and read another character
E8D2                  (      monitor.asm):00753                 SkipSpacesEnd:
E8D2 3583             (      monitor.asm):00754 (4+4)   40          puls    A,CC,PC
                      (         main.asm):00186                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
E8D4                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
E8D4 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E8FC 0D0A             (         data.asm):00009                     .db     CR,LF
E8FE 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
E926 0D0A             (         data.asm):00011                     .db     CR,LF
E928 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
E94B 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
E94E 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
E971 0D0A0A00         (         data.asm):00015                     .db     CR,LF,LF,NULL
E975 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
E981 0D0A00           (         data.asm):00017                     .db     CR,LF,NULL
E984 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
E9A4 0D0A             (         data.asm):00019                     .db     CR,LF
E9A6 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E9CE 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
E9D2                  (         data.asm):00023                 CmdList:
E9D2 41444452         (         data.asm):00024                     .str    "ADDR"
E9D6 FF               (         data.asm):00025                     .db     EOD
E9D7 E884             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
E9D9 42414E4B         (         data.asm):00027                     .str    "BANK"
E9DD FF               (         data.asm):00028                     .db     EOD
E9DE E8A4             (         data.asm):00029                     .dw     SetBank             ; Run code at current or specified address
E9E0 44554D50         (         data.asm):00030                     .str    "DUMP"
E9E4 FF               (         data.asm):00031                     .db     EOD
E9E5 E561             (         data.asm):00032                     .dw     Dump                ; Display content of memory
E9E7 48454C50         (         data.asm):00033                     .str    "HELP"
E9EB FF               (         data.asm):00034                     .db     EOD
E9EC E4E9             (         data.asm):00035                     .dw     CmdHelp             ; Help for various commands
E9EE 4C4F4144         (         data.asm):00036                     .str    "LOAD"
E9F2 FF               (         data.asm):00037                     .db     EOD
E9F3 E5C5             (         data.asm):00038                     .dw     LoadIntelHex        ; Upload Intel Hex code
E9F5 4D4150           (         data.asm):00039                     .str    "MAP"
E9F8 FF               (         data.asm):00040                     .db     EOD
E9F9 E69A             (         data.asm):00041                     .dw     MemoryMap           ; Memory map of LogicSpark-09
E9FB 5045454B         (         data.asm):00042                     .str    "PEEK"
E9FF FF               (         data.asm):00043                     .db     EOD
EA00 E6B5             (         data.asm):00044                     .dw     Peek                ; Read a byte of memory
EA02 504F4B45         (         data.asm):00045                     .str    "POKE"
EA06 FF               (         data.asm):00046                     .db     EOD
EA07 E6DF             (         data.asm):00047                     .dw     Poke                ; Write a byte of memory
EA09 524547           (         data.asm):00048                     .str    "REG"
EA0C FF               (         data.asm):00049                     .db     EOD
EA0D E71F             (         data.asm):00050                     .dw     PrintRegisters      ; Print registers
EA0F 52554E           (         data.asm):00051                     .str    "RUN"
EA12 FF               (         data.asm):00052                     .db     EOD
EA13 E861             (         data.asm):00053                     .dw     Run                 ; Run code at current or specified address
EA15 00               (         data.asm):00054                     .db     NULL
                      (         data.asm):00055                 
EA16                  (         data.asm):00056                 CmdHelpMsg: ;                                        *                       *               *
EA16 4C697374206F6620 (         data.asm):00057                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
EA2D 0D0A             (         data.asm):00058                     .db     CR,LF
EA2F 20202D2041444452 (         data.asm):00059                     .str    "  - ADDR: Set current address"
     3A20536574206375
     7272656E74206164
     6472657373
EA4C 0D0A             (         data.asm):00060                     .db     CR,LF
EA4E 20202D2042414E4B (         data.asm):00061                     .str    "  - BANK: Set current bank"
     3A20536574206375
     7272656E74206261
     6E6B
EA68 0D0A             (         data.asm):00062                     .db     CR,LF
EA6A 20202D2044554D50 (         data.asm):00063                     .str    "  - DUMP: Display memory content"
     3A20446973706C61
     79206D656D6F7279
     20636F6E74656E74
EA8A 0D0A             (         data.asm):00064                     .db     CR,LF
EA8C 20202D2048454C50 (         data.asm):00065                     .str    "  - HELP: This help screen"
     3A20546869732068
     656C702073637265
     656E
EAA6 0D0A             (         data.asm):00066                     .db     CR,LF
EAA8 20202D204C4F4144 (         data.asm):00067                     .str    "  - LOAD: Load Intel Hex from console"
     3A204C6F61642049
     6E74656C20486578
     2066726F6D20636F
     6E736F6C65
EACD 0D0A             (         data.asm):00068                     .db     CR,LF
EACF 20202D204D41503A (         data.asm):00069                     .str    "  - MAP: Memory and I/O map of system"
     204D656D6F727920
     616E6420492F4F20
     6D6170206F662073
     797374656D
EAF4 0D0A             (         data.asm):00070                     .db     CR,LF
EAF6 20202D205045454B (         data.asm):00071                     .str    "  - PEEK: Read a byte of memory"
     3A20526561642061
     2062797465206F66
     206D656D6F7279
EB15 0D0A             (         data.asm):00072                     .db     CR,LF
EB17 20202D20504F4B45 (         data.asm):00073                     .str    "  - POKE: Write a byte into memory"
     3A20577269746520
     6120627974652069
     6E746F206D656D6F
     7279
EB39 0D0A             (         data.asm):00074                     .db     CR,LF
EB3B 20202D205245473A (         data.asm):00075                     .str    "  - REG: Print the registers content"
     205072696E742074
     6865207265676973
     7465727320636F6E
     74656E74
EB5F 0D0A             (         data.asm):00076                     .db     CR,LF
EB61 20202D2052554E3A (         data.asm):00077                     .str    "  - RUN: Execute code"
     2045786563757465
     20636F6465
EB76 0D0A00           (         data.asm):00078                     .db     CR,LF,NULL
                      (         data.asm):00079                 
EB79                  (         data.asm):00080                 ErrInvalidAddrMsg:
EB79 496E76616C696420 (         data.asm):00081                     .str    "Invalid address!"
     6164647265737321
EB89 0D0A00           (         data.asm):00082                     .db     CR,LF,NULL
                      (         data.asm):00083                 
EB8C                  (         data.asm):00084                 ErrInvalidByteMsg:
EB8C 496E76616C696420 (         data.asm):00085                     .str    "Invalid byte!"
     6279746521
EB99 0D0A00           (         data.asm):00086                     .db     CR,LF,NULL
                      (         data.asm):00087                 
EB9C                  (         data.asm):00088                 ErrInvalidParamMsg:
EB9C 496E76616C696420 (         data.asm):00089                     .str    "Invalid parameter!"
     706172616D657465
     7221
EBAE 0D0A00           (         data.asm):00090                     .db     CR,LF,NULL
                      (         data.asm):00091                 
EBB1                  (         data.asm):00092                 ErrNoParameterMsg:
EBB1 4E6F20706172616D (         data.asm):00093                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
EBCC 0D0A00           (         data.asm):00094                     .db     CR,LF,NULL
                      (         data.asm):00095                 
EBCF                  (         data.asm):00096                 ErrInvalidCmdMsg:
EBCF 496E76616C696420 (         data.asm):00097                     .str    "Invalid command!"
     636F6D6D616E6421
EBDF 0D0A00           (         data.asm):00098                     .db     CR,LF,NULL
                      (         data.asm):00099                 
EBE2                  (         data.asm):00100                 ErrSyntaxErrorMsg:
EBE2 53796E7461782065 (         data.asm):00101                     .str    "Syntax error!"
     72726F7221
EBEF 0D0A00           (         data.asm):00102                     .db     CR,LF,NULL
                      (         data.asm):00103                     
EBF2                  (         data.asm):00104                 LoadStartMsg:
EBF2 4C6F616420363330 (         data.asm):00105                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
EC14 0D0A             (         data.asm):00106                     .db     CR,LF
EC16 5072657373204553 (         data.asm):00107                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
EC2A 0D0A00           (         data.asm):00108                     .db     CR,LF,NULL
                      (         data.asm):00109                 
EC2D                  (         data.asm):00110                 LoadUserAbortErr:
EC2D 5472616E73666572 (         data.asm):00111                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
EC45 0D0A00           (         data.asm):00112                     .db     CR,LF,NULL
                      (         data.asm):00113                 
EC48                  (         data.asm):00114                 LoadRecordErr:
EC48 556E6B6E6F776E20 (         data.asm):00115                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
EC5D 00               (         data.asm):00116                     .db     NULL
                      (         data.asm):00117                 
EC5E                  (         data.asm):00118                 LoadFailedErr:
EC5E 446F776E6C6F6164 (         data.asm):00119                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
EC83 0D0A00           (         data.asm):00120                     .db     CR,LF,NULL
                      (         data.asm):00121                 
EC86                  (         data.asm):00122                 LoadSuccessMsg:
EC86 446F776E6C6F6164 (         data.asm):00123                     .str    "Download Successful"
     2053756363657373
     66756C
EC99 0D0A00           (         data.asm):00124                     .db     CR,LF,NULL
                      (         data.asm):00125                 
EC9C                  (         data.asm):00126                 MemoryMapMsg:
                      (         data.asm):00127                     ; Memory Map:
EC9C 4D656D6F7279204D (         data.asm):00128                     .str    "Memory Map:"
     61703A
ECA7 0D0A             (         data.asm):00129                     .db     CR,LF
ECA9 202052414D3A2020 (         data.asm):00130                     .str    "  RAM:       $0000-$"
     2020202020243030
     30302D24
ECBD 000D0A           (         data.asm):00131                     .db     NULL,CR,LF
ECC0 2020524F4D3A2020 (         data.asm):00132                     .str    "  ROM:       $"
     202020202024
ECCE 00               (         data.asm):00133                     .db     NULL
ECCF 2D2446444646     (         data.asm):00134                     .str    "-$FDFF"
ECD5 0D0A             (         data.asm):00135                     .db     CR,LF
ECD7 2020436F6E737420 (         data.asm):00136                     .str    "  Const RAM: $FE00-$FEFF"
     52414D3A20244645
     30302D2446454646
ECEF 0D0A             (         data.asm):00137                     .db     CR,LF
ECF1 2020492F4F207261 (         data.asm):00138                     .str    "  I/O range: $FF00-$FFEF"
     6E67653A20244646
     30302D2446464546
ED09 0D0A             (         data.asm):00139                     .db     CR,LF
ED0B 2020566563746F72 (         data.asm):00140                     .str    "  Vectors:   $FFF0-$FFFF"
     733A202020244646
     46302D2446464646
ED23 0D0A             (         data.asm):00141                     .db     CR,LF
ED25 492F4F204D61703A (         data.asm):00142                     .str    "I/O Map:"
ED2D 0D0A             (         data.asm):00143                     .db     CR,LF
ED2F 2020524F4D204469 (         data.asm):00144                     .str    "  ROM Dissable: $FF08 (W)"
     737361626C653A20
     2446463038202857
     29
ED48 0D0A             (         data.asm):00145                     .db     CR,LF
ED4A 2020496E742E2056 (         data.asm):00146                     .str    "  Int. Vector:  $FF09 (R)"
     6563746F723A2020
     2446463039202852
     29
ED63 0D0A             (         data.asm):00147                     .db     CR,LF
ED65 2020414349413120 (         data.asm):00148                     .str    "  ACIA1 (USB):  $FF68-$FF6B"
     28555342293A2020
     24464636382D2446
     463642
ED80 0D0A00           (         data.asm):00149                     .db     CR,LF,NULL
                      (         main.asm):00187                 
                      (         main.asm):00188                 ;  ___           _                                          _         
                      (         main.asm):00189                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00190                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00191                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00192                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00193                 ;                                                  |_|
                      (         main.asm):00194                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00195                 
                      (         main.asm):00196                     PRAGMA cc
                      (         main.asm):00197                     
ED83                  (         main.asm):00198                 IllegalDiv0:
ED83 3B               (         main.asm):00199 (17+?)  17          rti
                      (         main.asm):00200                     
                      (         main.asm):00201                     PRAGMA cc
                      (         main.asm):00202                 
ED84                  (         main.asm):00203                 SoftInt3:
ED84 3B               (         main.asm):00204 (17+?)  17          rti
                      (         main.asm):00205                     
                      (         main.asm):00206                     PRAGMA cc
                      (         main.asm):00207                 
ED85                  (         main.asm):00208                 SoftInt2:
ED85 3B               (         main.asm):00209 (17+?)  17          rti
                      (         main.asm):00210                     
                      (         main.asm):00211                     PRAGMA cc
                      (         main.asm):00212                 
ED86                  (         main.asm):00213                 SoftInt1:
ED86 3B               (         main.asm):00214 (17+?)  17          rti
                      (         main.asm):00215                     
                      (         main.asm):00216                     PRAGMA cc
                      (         main.asm):00217                 
ED87                  (         main.asm):00218                 FIRQInt:
ED87 3B               (         main.asm):00219 (17+?)  17          rti
                      (         main.asm):00220                 
                      (         main.asm):00221                     PRAGMA cc
                      (         main.asm):00222                 
ED88                  (         main.asm):00223                 IRQInt:
ED88 3B               (         main.asm):00224 (17+?)  17          rti
                      (         main.asm):00225                 
                      (         main.asm):00226                     PRAGMA cc
                      (         main.asm):00227                 
ED89                  (         main.asm):00228                 NMIInt:
ED89 3B               (         main.asm):00229 (17+?)  17          rti
                      (         main.asm):00230                 
                      (         main.asm):00231                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00232                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00233                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00234                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00235                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00236                 ;          |___/
                      (         main.asm):00237                 ;
                      (         main.asm):00238                 ; System variables used by monitor subroutines
                      (         main.asm):00239                 ; ============================================
                      (         main.asm):00240                 
ED8A                  (         main.asm):00241                 InStrBuffer:    .DS     $100    ; String input for console input
EE8A                  (         main.asm):00242                 CmdErrorPtr:    .DS     1       ; Command prompt error pointer
EE8B                  (         main.asm):00243                 CurrAddress:    .DS     2       ; Current address, useful for monitor actions
EE8D                  (         main.asm):00244                 CurrBank:       .DS     1       ; Current bank number, relative to current address
EE8E                  (         main.asm):00245                 RunFlag         .DS     1       ; Run flag to indicate registers should be saved or not
EE8F                  (         main.asm):00246                 RegCC:          .DS     1       ; Register CC
EE90                  (         main.asm):00247                 RegDP:          .DS     1       ; Register DP
EE91                  (         main.asm):00248                 RegA:           .DS     1       ; Register A
EE92                  (         main.asm):00249                 RegB:           .DS     1       ; Register B
EE93                  (         main.asm):00250                 RegE:           .DS     1       ; Register E
EE94                  (         main.asm):00251                 RegF:           .DS     1       ; Register F
EE95                  (         main.asm):00252                 RegX:           .DS     2       ; Register X
EE97                  (         main.asm):00253                 RegY:           .DS     2       ; Register Y
EE99                  (         main.asm):00254                 RegU:           .DS     2       ; User stack
EE9B                  (         main.asm):00255                 RegS:           .DS     2       ; System stack
EE9D                  (         main.asm):00256                 RegPC:          .DS     2       ; Register PC
EE9F                  (         main.asm):00257                 TempByte:       .DS     1       ; Temporary storage byte (8-bit)
EEA0                  (         main.asm):00258                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
EEA0                  (         main.asm):00259                 TempW1:         .DS     1       ; Word MSB
EEA1                  (         main.asm):00260                 TempW2:         .DS     1       ; Word LSB
EEA2                  (         main.asm):00261                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
EEA2                  (         main.asm):00262                 TempQ1:         .DS     1       ; Quad High MSB
EEA3                  (         main.asm):00263                 TempQ2:         .DS     1       ; Quad Low MSB
EEA4                  (         main.asm):00264                 TempQ3:         .DS     1       ; Quad High LSB
EEA5                  (         main.asm):00265                 TempQ4:         .DS     1       ; Quad Low LSB
EEA6                  (         main.asm):00266                 VarEnd:
                      (         main.asm):00267                 
EEA6 5353535353535353 (         main.asm):00268                     FILL 'S',JmpStart-VarEnd    ; Clear area with $00
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353
                      (         main.asm):00269                 
                      (         main.asm):00270                 ;      _                             
                      (         main.asm):00271                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00272                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00273                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00274                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00275                 ;                             |_|    
                      (         main.asm):00276                 ;
                      (         main.asm):00277                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00278                 ; =======================================================
                      (         main.asm):00279                 
                      (         main.asm):00280                     ORG $FD00
                      (         main.asm):00281                 
FD00                  (         main.asm):00282                 JmpStart:
FD00 E161             (         main.asm):00283                 JmpCls:             .DW     Cls
FD02 E1D3             (         main.asm):00284                 JmpDelChar:         .DW     DelChar
FD04 E1E9             (         main.asm):00285                 JmpGetStrByte:      .DW     GetStrByte
FD06 E258             (         main.asm):00286                 JmpGetStrNibble:    .DW     GetStrNibble
FD08 E27E             (         main.asm):00287                 JmpGetStrWord:      .DW     GetStrWord
FD0A E2ED             (         main.asm):00288                 JmpInByte:          .DW     InByte
FD0C E1AA             (         main.asm):00289                 JmpInChar:          .DW     InChar
FD0E E1B5             (         main.asm):00290                 JmpInCharNW:        .DW     InCharNW
FD10 E2FE             (         main.asm):00291                 JmpInStr:           .DW     InStr
FD12 E36D             (         main.asm):00292                 JmpInWord:          .DW     InWord
FD14 E1C4             (         main.asm):00293                 JmpOutChar:         .DW     OutChar
FD16 E3B6             (         main.asm):00294                 JmpOutByte:         .DW     OutByte
FD18 E3D8             (         main.asm):00295                 JmpOutCRLF:         .DW     OutCRLF
FD1A E3E6             (         main.asm):00296                 JmpOutNibble:       .DW     OutNibble
FD1C E3FE             (         main.asm):00297                 JmpOutStr:          .DW     OutStr
FD1E E429             (         main.asm):00298                 JmpOutWord:         .DW     OutWord
FD20 E08F             (         main.asm):00299                 JmpAscToBinNibble:  .DW     AscToBinNibble
FD22 E0A2             (         main.asm):00300                 JmpAscToBinByte:    .DW     AscToBinByte
FD24 E0B8             (         main.asm):00301                 JmpAscToBinWord:    .DW     AscToBinWord
FD26 E0CA             (         main.asm):00302                 JmpBinToAscNibble:  .DW     BinToAscNibble
FD28 E0DA             (         main.asm):00303                 JmpBinToAscByte:    .DW     BinToAscByte
FD2A E0F6             (         main.asm):00304                 JmpBinToAscWord:    .DW     BinToAscWord
FD2C E107             (         main.asm):00305                 JmpBinToBcd:        .DW     BinToBcd
FD2E E153             (         main.asm):00306                 JmpUpperCase:       .DW     UpperCase
FD30 E38C             (         main.asm):00307                 JmpOutBcd:          .DW     OutBcd
FD32                  (         main.asm):00308                 JmpTableEnd:
                      (         main.asm):00309                 
FD32 4A4A4A4A4A4A4A4A (         main.asm):00310                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A
                      (         main.asm):00311                 
                      (         main.asm):00312                 ;   ____                         _                     _   
                      (         main.asm):00313                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00314                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00315                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00316                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00317                 ;
                      (         main.asm):00318                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00319                 ; =====================================================================
                      (         main.asm):00320                 
                      (         main.asm):00321                     PRAGMA cc
                      (         main.asm):00322                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00323                     
FE00                  (         main.asm):00324                 ConstRAM:
FE00                  (         main.asm):00325                     .DS     256                 
                      (         main.asm):00326                 
                      (         main.asm):00327                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00328                 
FF00                  (         main.asm):00329                 InputOutputRange:
FF00                  (         main.asm):00330                     .DS     240
                      (         main.asm):00331                 
                      (         main.asm):00332                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00333                 
FFF0                  (         main.asm):00334                 Vectors:
FFF0 ED83             (         main.asm):00335                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 ED84             (         main.asm):00336                     .DW     SoftInt3            ; SWI3
FFF4 ED85             (         main.asm):00337                     .DW     SoftInt2            ; SWI2
FFF6 ED86             (         main.asm):00338                     .DW     SoftInt1            ; SWI
FFF8 ED87             (         main.asm):00339                     .DW     FIRQInt             ; FIRQ
FFFA ED88             (         main.asm):00340                     .DW     IRQInt              ; IRQ
FFFC ED89             (         main.asm):00341                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00342                     .DW     Reset               ; RESET
                      (         main.asm):00343                 
                      (         main.asm):00344                     END

Symbol Table:
[ G] AscToBinByte                     E0A2
[ G] AscToBinNibble                   E08F
[ G] AscToBinNibbleAlpha              E09C
[ G] AscToBinNibbleEnd                E09E
[ G] AscToBinWord                     E0B8
[ G] BinToAscByte                     E0DA
[ G] BinToAscNibble                   E0CA
[ G] BinToAscNibbleAlpha              E0D6
[ G] BinToAscNibbleEnd                E0D8
[ G] BinToAscWord                     E0F6
[ G] BinToBcd                         E107
[ G] BootMsg                          E8D4
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E161
[ G] CmdErrorPtr                      EE8A
[ G] CmdHelp                          E4E9
[ G] CmdHelpMsg                       EA16
[ G] CmdList                          E9D2
[ G] CmdParse                         E4F0
[ G] CmdParseChar                     E500
[ G] CmdParseEnd                      E53D
[ G] CmdParseExecute                  E52D
[ G] CmdParseNone                     E53A
[ G] CmdParseSkip                     E513
[ G] CmdParseSkipLoop                 E519
[ G] CmdParseValid                    E525
[ G] CmdPrompt                        E53F
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E197
[ G] Com1RxNoWait                     E1B5
[ G] Com1RxNoWaitEnd                  E1C3
[ G] Com1RxWait                       E1AA
[ G] Com1Tx                           E1C4
[ G] Com1TxNotReady                   E1C6
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      EE8B
[ G] CurrBank                         EE8D
[ G] DelChar                          E1D3
[ G] DelCharLoop                      E1D7
[ G] Dump                             E561
[ G] DumpAddr                         E578
[ G] DumpByte                         E589
[ G] DumpChar                         E5A2
[ G] DumpCharDot                      E5AD
[ G] DumpCharPrint                    E5AF
[ G] DumpDisplay                      E570
[ G] DumpEnd                          E5C4
[ G] DumpInvalidAddress               E5C1
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E49B
[ G] ErrInvalidAddrMsg                EB79
[ G] ErrInvalidByte                   E4A8
[ G] ErrInvalidByteMsg                EB8C
[ G] ErrInvalidCmdMsg                 EBCF
[ G] ErrInvalidCommand                E4B5
[ G] ErrInvalidParameter              E4C2
[ G] ErrInvalidParamMsg               EB9C
[ G] ErrNoParameter                   E4CF
[ G] ErrNoParameterMsg                EBB1
[ G] ErrorPointerLoop                 E489
[ G] ErrPointer                       E482
[ G] ErrSyntaxError                   E4DC
[ G] ErrSyntaxErrorMsg                EBE2
[ G] ESC                              001B
[ G] FIRQInt                          ED87
[ G] GetStrByte                       E1E9
[ G] GetStrByteCount                  E1F2
[ G] GetStrByteEnd                    E237
[ G] GetStrByteError                  E235
[ G] GetStrByteFixed                  E23B
[ G] GetStrByteFixedEnd               E256
[ G] GetStrByteFixedErr               E254
[ G] GetStrByteGood                   E231
[ G] GetStrByteParse                  E1FD
[ G] GetStrByteParse2                 E20E
[ G] GetStrByteParseMore              E227
[ G] GetStrNibble                     E258
[ G] GetStrNibbleEnd                  E278
[ G] GetStrNibbleError                E26F
[ G] GetStrNibbleGood                 E273
[ G] GetStrWord                       E27E
[ G] GetStrWordCount                  E285
[ G] GetStrWordEnd                    E2EA
[ G] GetStrWordError                  E2E8
[ G] GetStrWordGood                   E2E2
[ G] GetStrWordParse                  E290
[ G] GetStrWordParse2                 E2A3
[ G] GetStrWordParse3                 E2B0
[ G] GetStrWordParse4                 E2C4
[ G] GetStrWordParseMore              E2D8
[ G] IllegalDiv0                      ED83
[ G] InByte                           E2ED
[ G] InChar                           E1AA
[ G] InCharNW                         E1B5
[ G] Init                             E000
[ G] InputOutputRange                 FF00
[ G] InStr                            E2FE
[ G] InStrBackspace                   E31E
[ G] InStrBuffer                      ED8A
[ G] InStrClearCarry                  E367
[ G] InStrEnd                         E369
[ G] InStrEscape                      E335
[ G] InStrPrintCR                     E357
[ G] InStrReadChar                    E308
[ G] InStrStoreChar                   E34E
[ G] IntVector                        FF09
[ G] InWord                           E36D
[ G] IRQInt                           ED88
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutBcd                        FD30
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD32
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E66C
[ G] LoadChecksum                     E639
[ G] LoadData                         E629
[ G] LoadEnd                          E696
[ G] LoadEOF                          E658
[ G] LoadFailedErr                    EC5E
[ G] LoadFailure                      E64D
[ G] LoadIntelHex                     E5C5
[ G] LoadRecord                       E5D1
[ G] LoadRecordErr                    EC48
[ G] LoadRecordType                   E60C
[ G] LoadStart                        E5E1
[ G] LoadStartMsg                     EBF2
[ G] LoadSuccess                      E67C
[ G] LoadSuccessMsg                   EC86
[ G] LoadUserAbortErr                 EC2D
[ G] Main                             E06A
[ G] MainRunExec                      E085
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E69A
[ G] MemoryMapMsg                     EC9C
[ G] NMIInt                           ED89
[ G] NULL                             0000
[ G] OutBcd                           E38C
[ G] OutBcdSub                        E39F
[ G] OutBcdSubEnd                     E3B5
[ G] OutBcdSubLSB                     E3AB
[ G] OutByte                          E3B6
[ G] OutByteDigit1NLZ                 E3D1
[ G] OutByteLZ                        E3B6
[ G] OutByteNLZ                       E3C5
[ G] OutChar                          E1C4
[ G] OutCRLF                          E3D8
[ G] OutNibble                        E3E6
[ G] OutNibbleLSB                     E3E6
[ G] OutNibbleMSB                     E3F0
[ G] OutStr                           E3FE
[ G] OutStrEnd                        E40D
[ G] OutStrLoop                       E400
[ G] OutStrLZ                         E3FE
[ G] OutStrNLZ                        E40F
[ G] OutStrNLZEnd                     E427
[ G] OutStrNLZLoop                    E412
[ G] OutStrNLZPrintChar               E420
[ G] OutWord                          E429
[ G] OutWordNLZ                       E446
[ G] OutWordNLZ2                      E459
[ G] OutWordNLZ3                      E469
[ G] OutWordNLZ4                      E479
[ G] OutWordNLZp2                     E464
[ G] OutWordNLZp3                     E474
[ G] Peek                             E6B5
[ G] PeekDisplay                      E6C4
[ G] PeekEnd                          E6DE
[ G] PeekInvalidAddr                  E6DB
[ G] Poke                             E6DF
[ G] PokeEnd                          E71E
[ G] PokeInvalidAddress               E716
[ G] PokeInvalidByte                  E711
[ G] PokeNoParameters                 E71B
[ G] PrintRegisters                   E71F
[ G] PromptSize                       0009
[ G] PullRegisters                    E842
[ G] PushRegisters                    E812
[ G] RegA                             EE91
[ G] RegB                             EE92
[ G] RegCC                            EE8F
[ G] RegDP                            EE90
[ G] RegE                             EE93
[ G] RegF                             EE94
[ G] RegPC                            EE9D
[ G] RegS                             EE9B
[ G] RegU                             EE99
[ G] RegX                             EE95
[ G] RegY                             EE97
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0004
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              E861
[ G] RunEnd                           E883
[ G] RunError                         E880
[ G] RunExecute                       E876
[ G] RunFlag                          EE8E
[ G] RunGetAddress                    E868
[ G] RunValidate                      E870
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       E884
[ G] SetAddressDefault                E89C
[ G] SetAddressEnd                    E8A2
[ G] SetAddressError                  E897
[ G] SetBank                          E8A4
[ G] SetBankDefault                   E8BC
[ G] SetBankEnd                       E8BF
[ G] SetBankError                     E8B7
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       E8C1
[ G] SkipSpacesEnd                    E8D2
[ G] SkipSpacesLoop                   E8C3
[ G] SoftInt1                         ED86
[ G] SoftInt2                         ED85
[ G] SoftInt3                         ED84
[ G] SPACE                            0020
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TempByte                         EE9F
[ G] TempQ1                           EEA2
[ G] TempQ2                           EEA3
[ G] TempQ3                           EEA4
[ G] TempQ4                           EEA5
[ G] TempQuad                         EEA2
[ G] TempW1                           EEA0
[ G] TempW2                           EEA1
[ G] TempWord                         EEA0
[ G] UpperCase                        E153
[ G] UpperCaseEnd                     E15F
[ G] UsrStack                         FA00
[ G] VarEnd                           EEA6
[ G] Vectors                          FFF0
