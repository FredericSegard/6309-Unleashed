                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; ****************************************************************************************
                      (         main.asm):00029         
                      (         main.asm):00030         ; Revision
                      (         main.asm):00031         ; --------
     0000             (         main.asm):00032         RevMajor    EQU $00             ; Major revision number: 0 = Breadboard, 1+ = PCB revision
     0004             (         main.asm):00033         RevMinor    EQU $0004           ; Minor revision number
                      (         main.asm):00034         
                      (         main.asm):00035         ; Keystrokes and delimiters
                      (         main.asm):00036         ; -------------------------
     0000             (         main.asm):00037         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00038         BS          EQU $08             ; Backspace
     0009             (         main.asm):00039         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00040         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00041         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00042         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00043         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00044         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00045         
                      (         main.asm):00046         ; Misc
                      (         main.asm):00047         ; ----
     E000             (         main.asm):00048         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00049         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     FC00             (         main.asm):00050         SysStack    EQU $FC00           ; Position system stack before Constant RAM space
     FA00             (         main.asm):00051         UsrStack    EQU $FA00           ; Position user stack before system stack
     0050             (         main.asm):00052         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00053         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00054         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00055         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00056         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00057         
                      (         main.asm):00058         ; I/O addresses
                      (         main.asm):00059         ; -------------
     FF08             (         main.asm):00060         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00061         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
                      (         main.asm):00062         
                      (         main.asm):00063         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00064         
                      (         main.asm):00065             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00066             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00067                 
                      (         main.asm):00068                     ORG $0000                   ; Start of code
                      (         main.asm):00069                 
0000                  (         main.asm):00070                 Reset:
                      (         main.asm):00071                 
0000 1A50             (         main.asm):00072 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00073 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00074                 
                      (         main.asm):00075                 ; -------------------
                      (         main.asm):00076                 ; *** SHADOW COPY ***
                      (         main.asm):00077                 ; -------------------
                      (         main.asm):00078                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00079                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00080                 
0005                  (         main.asm):00081                 ShadowCopy:
                      (         main.asm):00082                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00083 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00084 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00085 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00086 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00087                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00088                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00089 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00090 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00091 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00092 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00093 (3)     44          jmp     Init
                      (         main.asm):00094                 
0024                  (         main.asm):00095                 ShadowEnd:
0024 0000000000000000 (         main.asm):00096                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00097                 
                      (         main.asm):00098                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00099                 
                      (         main.asm):00100                     PRAGMA cc
                      (         main.asm):00101                     
                      (         main.asm):00102                     ORG RomStart
                      (         main.asm):00103                 
E000                  (         main.asm):00104                 Init:
E000 B7FF08           (         main.asm):00105 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00106                 
                      (         main.asm):00107                     ; Clear the shadow copy code
E003 8E0100           (         main.asm):00108 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00109 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00110 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00111 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00112                 
                      (         main.asm):00113                     ; Configure the stacks
E011 CEFA00           (         main.asm):00114 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFEDAE           (         main.asm):00115 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00116 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFEDB0         (         main.asm):00117 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00118                     
                      (         main.asm):00119                     ; Initialize peripherals
E01F BDE192           (         main.asm):00120 (7)     46          jsr     Com1Init            ; Initialize ACIA1
                      (         main.asm):00121                     
                      (         main.asm):00122                     ; Print boot message
E022 BDE15C           (         main.asm):00123 (7)     53          jsr     Cls                 ; Clears the screen
E025 8EE7E7           (         main.asm):00124 (3)     56          ldx     #BootMsg            ; Print title
E028 BDE317           (         main.asm):00125 (7)     63          jsr     OutStr              ;
E02B 8600             (         main.asm):00126 (2)     65          lda     #RevMajor           ; Print major version
E02D BDE2DE           (         main.asm):00127 (7)     72          jsr     OutByteNLZ          ;
E030 862E             (         main.asm):00128 (2)     74          lda     #'.'                ; Print dot
E032 BDE1BF           (         main.asm):00129 (7)     81          jsr     OutChar             ;
E035 CC0004           (         main.asm):00130 (3)     84          ldd     #RevMinor           ; Print minor version
E038 BDE35F           (         main.asm):00131 (7)     91          jsr     OutWordNLZ          ;
E03B BDE317           (         main.asm):00132 (7)     98          jsr     OutStr              ;
E03E CCE000           (         main.asm):00133 (3)     101         ldd     #RomStart           ; Free RAM available
E041 BDE342           (         main.asm):00134 (7)     108         jsr     OutWord
E044 BDE317           (         main.asm):00135 (7)     115         jsr     OutStr
E047 CC0F45           (         main.asm):00136 (3)     118         ldd     #JmpStart-VarEnd    ; Free shadow RAM left
E04A BDE342           (         main.asm):00137 (7)     125         jsr     OutWord
E04D BDE317           (         main.asm):00138 (7)     132         jsr     OutStr
                      (         main.asm):00139                 
                      (         main.asm):00140                     ; Clear the registers
E050 104F             (         main.asm):00141 (2)     134         clrd                        ; Clear the D register (A & B)
E052 105F             (         main.asm):00142 (2)     136         clrw                        ; Clear the W register (E & F)
E054 8E0000           (         main.asm):00143 (3)     139         ldx     #$0000              ; Clear X register
E057 108E0000         (         main.asm):00144 (4)     143         ldy     #$0000              ; Clear Y register
                      (         main.asm):00145                 
                      (         main.asm):00146                     ; Clears some variables
E05B FDEDA0           (         main.asm):00147 (5)     148         std     CurrAddress
E05E 7FEDA2           (         main.asm):00148 (6)     154         clr     CurrBank
E061 7FEDA3           (         main.asm):00149 (6)     160         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00150                     
                      (         main.asm):00151                     PRAGMA cc
                      (         main.asm):00152                 
E064                  (         main.asm):00153                 Main:
E064 BDE458           (         main.asm):00154 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E067 C646             (         main.asm):00155 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E069 8EEC9F           (         main.asm):00156 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E06C BDE241           (         main.asm):00157 (7)     19          jsr     InStr               ; Read the a string
E06F 24F3             (         main.asm):00158 (3)     22          bcc     Main                ; If no data in string then bypass parser
E071 BDE409           (         main.asm):00159 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00160                     ; Save registers after execution of a run command
E074 3401             (         main.asm):00161 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E076 7DEDA3           (         main.asm):00162 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E079 2604             (         main.asm):00163 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E07B 3501             (         main.asm):00164 (4+1)   47          puls    CC                  ; Restore CC
E07D 20E5             (         main.asm):00165 (3)     50          bra     Main                ; Loop back, without recording the resistors
E07F                  (         main.asm):00166                 MainRunExec:
E07F 3501             (         main.asm):00167 (4+1)   55          puls    CC                  ; Restore CC
E081 BDE725           (         main.asm):00168 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E084 7FEDA3           (         main.asm):00169 (6)     68          clr     RunFlag             ; Reset run flag
E087 20DB             (         main.asm):00170 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00171                 
                      (         main.asm):00172                 ;  ___                  _               _              
                      (         main.asm):00173                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00174                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00175                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00176                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00177                 ;
                      (         main.asm):00178                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00179                 ; ---------------------------------------------------------------
                      (         main.asm):00180                 
                      (         main.asm):00181                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E089                  (      convert.asm):00029                 AscToBinNibble:
E089 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E08B BDE14E           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E08E 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E090 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E092 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E094 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E096                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E096 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E098                  (      convert.asm):00038                 AscToBinNibbleEnd
E098 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E09A 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E09C                  (      convert.asm):00050                 AscToBinByte:
E09C 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E09E BDE089           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E0A1 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A2 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A3 48               (      convert.asm):00055 (1)     15          asla                        ;
E0A4 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0A5 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0A7 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0A9 BDE089           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0AC 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0AF 5F               (      convert.asm):00061 (1)     35          clrb
E0B0 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B2                  (      convert.asm):00072                 AscToBinWord:
E0B2 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0B4 BDE09C           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0B7 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0B9 BDE09C           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BC 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0BE 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0C0 105F             (      convert.asm):00079 (2)     34          clrw
E0C2 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0C4                  (      convert.asm):00098                 BinToAscNibble:
E0C4 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0C6 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0C8 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0CA 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0CC 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0CE 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0D0                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0D0 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D2                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D2 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0D4                  (      convert.asm):00117                 BinToAscByte:
E0D4 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0D6 1038             (      convert.asm):00119 (6)     11          pshsw
E0D8 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0DA 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0DB 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0DC 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0DD 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0DE BDE0C4           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0E1 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E3 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0E5 BDE0C4           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0E8 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0EA 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0EC 1039             (      convert.asm):00131 (6)     57          pulsw
E0EE 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0F0                  (      convert.asm):00141                 BinToAscWord:
E0F0 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F2 BDE0D4           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0F5 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0F7 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0F9 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E0FB BDE0D4           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E0FE 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E100 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E101                  (      convert.asm):00167                 BinToBcd:
E101 3417             (      convert.asm):00168 (4+5)   9           pshs    A,B,X,CC
E103 1038             (      convert.asm):00169 (6)     15          pshsw
                      (      convert.asm):00170                     ; Calculate 10,000's digit
E105 8E2710           (      convert.asm):00171 (3)     18          ldx     #10000              ; Load 10000 diviser
E108 AFE2             (      convert.asm):00172 (5+1)   24          stx     ,-S                 ; Save to stack
E10A 11AEE0           (      convert.asm):00173 (37)    61          divq    ,S+                 ; Divide Q by 10,000 (from stack): Quotient in W, Remainder in D
E10D 11E780           (      convert.asm):00174 (5+1)   67          stf     ,X+                 ; Save 10,000's digit to variable pointed by X
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E110 8E03E8           (      convert.asm):00176 (3)     70          ldx     #1000               ; Load 1000 diviser
E113 AFE2             (      convert.asm):00177 (5+1)   76          stx     ,-S                 ; Save to stack
E115 11AEE0           (      convert.asm):00178 (37)    113         divq    ,S+                 ; Divide Q by 1,000 (from stack): Quotient in W, Remainder in D
E118 1E06             (      convert.asm):00179 (5)     118         exg     D,W                 ; Exchange registers (Quotien is now in D, and remainder in W)
E11A 1048             (      convert.asm):00180 (2)     120         lsld                        ; Move 1,000's digit to high nibble
E11C 1048             (      convert.asm):00181 (2)     122         lsld                        ;   Had to exchange D <-> W
E11E 1048             (      convert.asm):00182 (2)     124         lsld                        ;   in order for lsld to work
E120 1048             (      convert.asm):00183 (2)     126         lsld                        ;
E122 E7E2             (      convert.asm):00184 (4+1)   131         stb     ,-S                 ; Save 1,000's digit in the stack for later addition
                      (      convert.asm):00185                     ; Calculate 100's digit
E124 8664             (      convert.asm):00186 (2)     133         lda     #100                ; Load 100
E126 A7E2             (      convert.asm):00187 (4+1)   138         sta     ,-S                 ; Store it in the stack
E128 4F               (      convert.asm):00188 (1)     139         clra                        ; Clear MSB of D
E129 1F60             (      convert.asm):00189 (4)     143         tfr     W,D                 ; Transfer remainder to D
E12B 11ADE0           (      convert.asm):00190 (27+1)  171         divd    ,S+                 ; Divide D by 100 (from stack): Quotient in B, Remainder in A
E12E EBE0             (      convert.asm):00191 (4+1)   176         addb    ,S+                 ; Add 1000's and 100's digit together
E130 E780             (      convert.asm):00192 (4+1)   181         stb     ,X+                 ; Save 100's and 100's digit to variable pointed by X
                      (      convert.asm):00193                     ; Calculate the 10's and 1's digit
E132 1F89             (      convert.asm):00194 (4)     185         tfr     A,B                 ; Place remainder in LSB of D
E134 860A             (      convert.asm):00195 (2)     187         lda     #10                 ; Load 10
E136 A7E2             (      convert.asm):00196 (4+1)   192         sta     ,-S                 ; Store it in the stack
E138 4F               (      convert.asm):00197 (1)     193         clra                        ; Clear MSB of D
E139 11ADE0           (      convert.asm):00198 (27+1)  221         divd    ,S+                 ; Divide D by 10 (from stack): Quotient in B, Remainder in A
E13C 58               (      convert.asm):00199 (1)     222         lslb                        ; Move 10's digit to high nibble
E13D 58               (      convert.asm):00200 (1)     223         lslb                        ;
E13E 58               (      convert.asm):00201 (1)     224         lslb                        ;
E13F 58               (      convert.asm):00202 (1)     225         lslb                        ;
E140 A7E2             (      convert.asm):00203 (4+1)   230         sta     ,-S                 ; Save the remainder in the stack
E142 EBE0             (      convert.asm):00204 (4+1)   235         addb    ,S+                 ; Add remainder from the stack with quotient
E144 E780             (      convert.asm):00205 (4+1)   240         stb     ,X+                 ; Save 10's and 1's digits to variable pointed by X
E146 86FF             (      convert.asm):00206 (2)     242         lda     #EOD                ; Load end of data code
E148 A784             (      convert.asm):00207 (4+0)   246         sta     ,X                  ; Insert End Of Data marker without advancing pointer
E14A 1039             (      convert.asm):00208 (6)     252         pulsw
E14C 3597             (      convert.asm):00209 (4+7)   263         puls    A,B,X,CC,PC
                      (      convert.asm):00210                 
                      (      convert.asm):00211                 ;  _   _                                  ____                      
                      (      convert.asm):00212                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00213                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00214                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00215                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00216                 ;         |_|     |_|                                               
                      (      convert.asm):00217                 ;
                      (      convert.asm):00218                 ; Convert character in A to uppercase
                      (      convert.asm):00219                 ; ===================================
                      (      convert.asm):00220                 ; Input:    A = anycase
                      (      convert.asm):00221                 ; Output:   A = UPPERCASE
                      (      convert.asm):00222                 
                      (      convert.asm):00223                     PRAGMA cc
                      (      convert.asm):00224                 
E14E                  (      convert.asm):00225                 UpperCase:
E14E 3401             (      convert.asm):00226 (4+1)   5           pshs    CC
E150 8161             (      convert.asm):00227 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E152 2D06             (      convert.asm):00228 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E154 817A             (      convert.asm):00229 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E156 2E02             (      convert.asm):00230 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E158 8020             (      convert.asm):00231 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E15A                  (      convert.asm):00232                 UpperCaseEnd:
E15A 3581             (      convert.asm):00233 (4+3)   24          puls    CC,PC
                      (      convert.asm):00234                     
                      (         main.asm):00182                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E15C                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E15C 3406             (           io.asm):00058 (4+2)   6           pshs    D
E15E 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E160 BDE1BF           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E163 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E165 BDE1BF           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E168 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E16A BDE1BF           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E16D 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E16F BDE1BF           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E172 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E174 BDE1BF           (           io.asm):00069 (7)     51          jsr     OutChar
E177 865B             (           io.asm):00070 (2)     53          lda     #'['
E179 BDE1BF           (           io.asm):00071 (7)     60          jsr     OutChar
E17C 8631             (           io.asm):00072 (2)     62          lda     #'1'
E17E BDE1BF           (           io.asm):00073 (7)     69          jsr     OutChar
E181 863B             (           io.asm):00074 (2)     71          lda     #';'
E183 BDE1BF           (           io.asm):00075 (7)     78          jsr     OutChar
E186 8631             (           io.asm):00076 (2)     80          lda     #'1'
E188 BDE1BF           (           io.asm):00077 (7)     87          jsr     OutChar
E18B 8648             (           io.asm):00078 (2)     89          lda     #'H'
E18D BDE1BF           (           io.asm):00079 (7)     96          jsr     OutChar
E190 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E192                  (           io.asm):00094                 Com1Init:
E192 3402             (           io.asm):00095 (4+1)   5           pshs    A
E194 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E196 B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E199 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E19B B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E19E 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E1A0 B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A3 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1A5                  (           io.asm):00122                 InChar:
E1A5                  (           io.asm):00123                 Com1RxWait:
E1A5 B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1A8 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1AA 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1AC B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1AF 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1B0                  (           io.asm):00137                 InCharNW:
E1B0                  (           io.asm):00138                 Com1RxNoWait:
E1B0 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1B2 B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1B5 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1B7 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1B9 B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1BC 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1BE                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1BE 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1BF                  (           io.asm):00168                 OutChar:
E1BF                  (           io.asm):00169                 Com1Tx:
E1BF 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1C1                  (           io.asm):00171                 Com1TxNotReady:
E1C1 B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C4 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1C6 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1C8 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1CA B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1CD 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _    ____   _                    
                      (           io.asm):00180                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00181                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00182                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00183                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00184                 ;
                      (           io.asm):00185                 ; Delete a number of characters
                      (           io.asm):00186                 ; =============================
                      (           io.asm):00187                 ; Input:    B = Number of characters to delete
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1CE                  (           io.asm):00191                 DelChar:
E1CE 3406             (           io.asm):00192 (4+2)   6           pshs    D
E1D0 8608             (           io.asm):00193 (2)     8           lda     #BS                 ; Load the backspace character
E1D2                  (           io.asm):00194                 DelCharLoop:
E1D2 BDE1BF           (           io.asm):00195 (7)     15          jsr     OutChar             ; Print the backspace character
E1D5 8620             (           io.asm):00196 (2)     17          lda     #' '                ; Load the space character
E1D7 BDE1BF           (           io.asm):00197 (7)     24          jsr     OutChar             ; Print it the space character
E1DA 8608             (           io.asm):00198 (2)     26          lda     #BS                 ; Load the backspace character
E1DC BDE1BF           (           io.asm):00199 (7)     33          jsr     OutChar             ; Print it the backspace character
E1DF 5A               (           io.asm):00200 (1)     34          decb                        ; Decrement the character count
E1E0 26F0             (           io.asm):00201 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1E2 3586             (           io.asm):00202 (4+4)   45          puls    D,PC
                      (           io.asm):00203                 
                      (           io.asm):00204                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00205                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00206                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00207                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00208                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00209                 ;                                                    |___/
                      (           io.asm):00210                 ;
                      (           io.asm):00211                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00212                 ; ====================================================
                      (           io.asm):00213                 ; Input:    X = String pointer
                      (           io.asm):00214                 ; Output:   A = Binary byte
                      (           io.asm):00215                 ;           X = Points to next character in string
                      (           io.asm):00216                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00217                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00218                 
E1E4                  (           io.asm):00219                 GetStrByte:
E1E4 3404             (           io.asm):00220 (4+1)   50          pshs    B
E1E6 BDE1FB           (           io.asm):00221 (7)     57          jsr     GetStrNibble        ; Convert ASCII to hex nibble
E1E9 240E             (           io.asm):00222 (3)     60          bcc     GetStrByteEnd       ; End routine if nibble is invalid
E1EB 48               (           io.asm):00223 (1)     61          asla                        ; Push nibble to MSB
E1EC 48               (           io.asm):00224 (1)     62          asla                        ;
E1ED 48               (           io.asm):00225 (1)     63          asla                        ;
E1EE 48               (           io.asm):00226 (1)     64          asla                        ;
E1EF 1F89             (           io.asm):00227 (4)     68          tfr     A,B                 ; Save A in B
E1F1 BDE1FB           (           io.asm):00228 (7)     75          jsr     GetStrNibble        ; Convert ASCII to hex nibble
E1F4 2403             (           io.asm):00229 (3)     78          bcc     GetStrByteEnd       ; End routine if nibble is invalid
E1F6 103598           (           io.asm):00230 (4)     82          orr     B,A                 ; Join MSB and LSB into A
E1F9                  (           io.asm):00231                 GetStrByteEnd:
E1F9 3584             (           io.asm):00232 (4+3)   89          puls    B,PC
                      (           io.asm):00233                 
                      (           io.asm):00234                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00235                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00236                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00237                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00238                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00239                 ;
                      (           io.asm):00240                 ;
                      (           io.asm):00241                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00242                 ; ======================================================
                      (           io.asm):00243                 ; Input:    X = String pointer
                      (           io.asm):00244                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00245                 ;           X = Points to next character in string
                      (           io.asm):00246                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00247                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00248                 
E1FB                  (           io.asm):00249                 GetStrNibble:
E1FB A684             (           io.asm):00250 (4+0)   93          lda     ,X                  ; Get a character from string
E1FD 2713             (           io.asm):00251 (3)     96          beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E1FF BDE14E           (           io.asm):00252 (7)     103         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00253                     ; Is it a valid hex character?
E202 8130             (           io.asm):00254 (2)     105         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E204 2D0C             (           io.asm):00255 (3)     108         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E206 8146             (           io.asm):00256 (2)     110         cmpa    #'F'                ; Filter anything above the ASCII F
E208 2E08             (           io.asm):00257 (3)     113         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E20A 8139             (           io.asm):00258 (2)     115         cmpa    #'9'                ; Filter anything above ASCII '9'
E20C 2F08             (           io.asm):00259 (3)     118         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E20E 8141             (           io.asm):00260 (2)     120         cmpa    #'A'                ; Filter anything below ASCII 'A'
E210 2C04             (           io.asm):00261 (3)     123         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E212                  (           io.asm):00262                 GetStrNibbleError:
E212 1CFE             (           io.asm):00263 (2)     125         andcc   #$FE                ; Clear carry to indicate error
E214 2005             (           io.asm):00264 (3)     128         bra     GetStrNibbleEnd
E216                  (           io.asm):00265                 GetStrNibbleGood:
E216 BDE089           (           io.asm):00266 (7)     135         jsr     AscToBinNibble
E219 1A01             (           io.asm):00267 (2)     137         orcc    #$01                ; Set carry to indicate valid number in A
E21B                  (           io.asm):00268                 GetStrNibbleEnd:
E21B 3001             (           io.asm):00269 (4+1)   142         leax    1,X                 ; Increment string pointer
E21D 7CED9F           (           io.asm):00270 (6)     148         inc     CmdErrorPtr         ; Advance error pointer
E220 39               (           io.asm):00271 (4)     152         rts
                      (           io.asm):00272                     
                      (           io.asm):00273                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00274                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00275                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00276                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00277                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00278                 ;
                      (           io.asm):00279                 ;
                      (           io.asm):00280                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00281                 ; ======================================================
                      (           io.asm):00282                 ; Input:    X = String pointer
                      (           io.asm):00283                 ; Output:   D = Binary word
                      (           io.asm):00284                 ;           X = Points to next character in string
                      (           io.asm):00285                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00286                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00287                 
E221                  (           io.asm):00288                 GetStrWord:
E221 BDE1E4           (           io.asm):00289 (7)     159         jsr     GetStrByte          ; Get MSB of word
E224 2409             (           io.asm):00290 (3)     162         bcc     GetStrWordEnd       ; If its an invalid byte, exit
E226 1F89             (           io.asm):00291 (4)     166         tfr     A,B                 ; Save MSB in B
E228 BDE1E4           (           io.asm):00292 (7)     173         jsr     GetStrByte          ; Get LSB of word
E22B 2402             (           io.asm):00293 (3)     176         bcc     GetStrWordEnd       ; If its an invalid byte, exit
E22D 1E89             (           io.asm):00294 (5)     181         exg     A,B                 ; Swap A and B
E22F                  (           io.asm):00295                 GetStrWordEnd:
E22F 39               (           io.asm):00296 (4)     185         rts
                      (           io.asm):00297                 
                      (           io.asm):00298                 ;  ___           ____            _          
                      (           io.asm):00299                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00300                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00301                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00302                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00303                 ;                        |___/              
                      (           io.asm):00304                 ;
                      (           io.asm):00305                 ; Read a hexadecimal byte
                      (           io.asm):00306                 ; =======================
                      (           io.asm):00307                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00308                 
                      (           io.asm):00309                     PRAGMA cc
                      (           io.asm):00310                 
E230                  (           io.asm):00311                 InByte:
E230 3405             (           io.asm):00312 (4+2)   6           pshs    B,CC
E232 BDE1A5           (           io.asm):00313 (7)     13          jsr     InChar              ; Read first character in A
E235 1F89             (           io.asm):00314 (4)     17          tfr     A,B                 ; Save is in B temporarily
E237 BDE1A5           (           io.asm):00315 (7)     24          jsr     InChar              ; Read second character in A
E23A 1E89             (           io.asm):00316 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E23C BDE09C           (           io.asm):00317 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E23F 3585             (           io.asm):00318 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00319                 
                      (           io.asm):00320                 ;  ___           ____    _
                      (           io.asm):00321                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00322                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00323                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00324                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00325                 ;
                      (           io.asm):00326                 ;
                      (           io.asm):00327                 ; Read string from from input device
                      (           io.asm):00328                 ; ==================================
                      (           io.asm):00329                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00330                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00331                 ;           Y = contains the original string pointer start
                      (           io.asm):00332                 ; Input:    B = max number of characters to read
                      (           io.asm):00333                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00334                 ; Output:   B = Actual number of characters read
                      (           io.asm):00335                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00336                 ;               Carry bit clear = no string recorded
                      (           io.asm):00337                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00338                 
                      (           io.asm):00339                     PRAGMA cc
                      (           io.asm):00340                 
E241                  (           io.asm):00341                 InStr:
E241 3432             (           io.asm):00342 (4+5)   9           pshs    A,X,Y
E243 1038             (           io.asm):00343 (6)     15          pshsw
E245 1F12             (           io.asm):00344 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E247 1F9F             (           io.asm):00345 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E249 114F             (           io.asm):00346 (2)     25          clre                        ; Clear the current byte count
E24B                  (           io.asm):00347                 InStrReadChar:
E24B BDE1A5           (           io.asm):00348 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00349                     ;jsr        UpperCase   ; *** TEMPORARY
E24E 810D             (           io.asm):00350 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E250 2748             (           io.asm):00351 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E252 8108             (           io.asm):00352 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E254 270B             (           io.asm):00353 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E256 811B             (           io.asm):00354 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E258 271E             (           io.asm):00355 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E25A 2BEF             (           io.asm):00356 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E25C 10379E           (           io.asm):00357 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E25F 2630             (           io.asm):00358 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E261                  (           io.asm):00359                 InStrBackspace:
E261 103712           (           io.asm):00360 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E264 27E5             (           io.asm):00361 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E266 301F             (           io.asm):00362 (4+1)   69          leax    -1,X                ; Decrement string index
E268 114A             (           io.asm):00363 (2)     71          dece                        ; Decrement the current byte counter
E26A 7AED9F           (           io.asm):00364 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E26D 3404             (           io.asm):00365 (4+1)   82          pshs    B                   ; Saves B
E26F C601             (           io.asm):00366 (2)     84          ldb     #1                  ; number of characters to delete
E271 BDE1CE           (           io.asm):00367 (7)     91          jsr     DelChar             ; Delete a character
E274 3504             (           io.asm):00368 (4+1)   96          puls    B                   ; Restores B
E276 20D3             (           io.asm):00369 (3)     99          bra     InStrReadChar       ; Go read next character
E278                  (           io.asm):00370                 InStrEscape:
E278 118100           (           io.asm):00371 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E27B 27CE             (           io.asm):00372 (3)     105         beq     InStrReadChar       ; No, then read a character
E27D 3404             (           io.asm):00373 (4+1)   110         pshs    B                   ; Else, erase everyting
E27F 1FE9             (           io.asm):00374 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E281 BDE1CE           (           io.asm):00375 (7)     121         jsr     DelChar             ; Delete the whole line
E284 3504             (           io.asm):00376 (4+1)   126         puls    B
E286 1F21             (           io.asm):00377 (4)     130         tfr     Y,X                 ; Restores string pointer position
E288 114F             (           io.asm):00378 (2)     132         clre                        ; Clear the byte count
E28A 9609             (           io.asm):00379 (3)     135         lda     PromptSize
E28C B7ED9F           (           io.asm):00380 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E28F 20BA             (           io.asm):00381 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E291                  (           io.asm):00382                 InStrStoreChar:
E291 BDE1BF           (           io.asm):00383 (7)     149         jsr     OutChar             ; Print character on terminal
E294 A780             (           io.asm):00384 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E296 114C             (           io.asm):00385 (2)     156         ince                        ; Increment byte count
E298 20B1             (           io.asm):00386 (3)     159         bra     InStrReadChar       ; No? Read another character
E29A                  (           io.asm):00387                 InStrPrintCR:
E29A BDE2F1           (           io.asm):00388 (7)     166         jsr     OutCRLF             ; Print carriage return
E29D 6F84             (           io.asm):00389 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E29F 1FE9             (           io.asm):00390 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E2A1 118100           (           io.asm):00391 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E2A4 2704             (           io.asm):00392 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E2A6 1A01             (           io.asm):00393 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E2A8 2002             (           io.asm):00394 (3)     187         bra     InStrEnd
E2AA                  (           io.asm):00395                 InStrClearCarry:
E2AA 1CFE             (           io.asm):00396 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E2AC                  (           io.asm):00397                 InStrEnd:
E2AC 1039             (           io.asm):00398 (6)     195         pulsw
E2AE 35B2             (           io.asm):00399 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00400                 
                      (           io.asm):00401                 ;  ___          __        __                     _ 
                      (           io.asm):00402                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00403                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00404                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00405                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00406                 ;
                      (           io.asm):00407                 ;
                      (           io.asm):00408                 ; Read a hexadecimal word
                      (           io.asm):00409                 ; =======================
                      (           io.asm):00410                 ; Output:   D = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00411                 ; 
                      (           io.asm):00412                     PRAGMA cc
                      (           io.asm):00413                 
E2B0                  (           io.asm):00414                 InWord:
E2B0 3401             (           io.asm):00415 (4+1)   5           pshs    CC
E2B2 1038             (           io.asm):00416 (6)     11          pshsw
E2B4 BDE1A5           (           io.asm):00417 (7)     18          jsr     InChar
E2B7 1F8F             (           io.asm):00418 (4)     22          tfr     A,F
E2B9 BDE1A5           (           io.asm):00419 (7)     29          jsr     InChar
E2BC 1F89             (           io.asm):00420 (4)     33          tfr     A,B
E2BE BDE1A5           (           io.asm):00421 (7)     40          jsr     InChar
E2C1 1F8E             (           io.asm):00422 (4)     44          tfr     A,E
E2C3 BDE1A5           (           io.asm):00423 (7)     51          jsr     InChar
E2C6 1E8F             (           io.asm):00424 (5)     56          exg     A,F
E2C8 BDE0B2           (           io.asm):00425 (7)     63          jsr     AscToBinWord
E2CB 1039             (           io.asm):00426 (6)     69          pulsw
E2CD 3581             (           io.asm):00427 (4+3)   76          puls    CC,PC
                      (           io.asm):00428                     
                      (           io.asm):00429                 ;   ___            _     ____            _          
                      (           io.asm):00430                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00431                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00432                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00433                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00434                 ;                                |___/
                      (           io.asm):00435                 ;
                      (           io.asm):00436                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00437                 ; ==================================
                      (           io.asm):00438                 ; Input:    A = Byte to output
                      (           io.asm):00439                 
                      (           io.asm):00440                     PRAGMA cc
                      (           io.asm):00441                 
E2CF                  (           io.asm):00442                 OutByte:
E2CF                  (           io.asm):00443                 OutByteLZ:
E2CF 3407             (           io.asm):00444 (4+3)   7           pshs    A,B,CC
E2D1 BDE0D4           (           io.asm):00445 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E2D4 BDE1BF           (           io.asm):00446 (7)     21          jsr     OutChar             ; Print MSB in A
E2D7 1F98             (           io.asm):00447 (4)     25          tfr     B,A                 ; Transfer LSB in A
E2D9 BDE1BF           (           io.asm):00448 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E2DC 3587             (           io.asm):00449 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00450                 
                      (           io.asm):00451                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00452                 ; ==========================================================
                      (           io.asm):00453                 ; Input:    A = Byte to output
                      (           io.asm):00454                 
                      (           io.asm):00455                     PRAGMA cc
                      (           io.asm):00456                 
E2DE                  (           io.asm):00457                 OutByteNLZ:
E2DE 3407             (           io.asm):00458 (4+3)   7           pshs    A,B,CC
E2E0 BDE0D4           (           io.asm):00459 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E2E3 8130             (           io.asm):00460 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E2E5 2703             (           io.asm):00461 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E2E7 BDE1BF           (           io.asm):00462 (7)     26          jsr     OutChar             ; Print MSB in A
E2EA                  (           io.asm):00463                 OutByteDigit1NLZ:   
E2EA 1F98             (           io.asm):00464 (4)     30          tfr     B,A                 ; Transfer LSB in A
E2EC BDE1BF           (           io.asm):00465 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E2EF 3587             (           io.asm):00466 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00467                 
                      (           io.asm):00468                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00469                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00470                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00471                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00472                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00473                 ;
                      (           io.asm):00474                 ; Print a carriage return and linefeed
                      (           io.asm):00475                 ; ====================================
                      (           io.asm):00476                 
                      (           io.asm):00477                     PRAGMA cc
                      (           io.asm):00478                 
E2F1                  (           io.asm):00479                 OutCRLF:
E2F1 3403             (           io.asm):00480 (4+2)   6           pshs    A,CC
E2F3 860D             (           io.asm):00481 (2)     8           lda     #CR
E2F5 BDE1BF           (           io.asm):00482 (7)     15          jsr     OutChar
E2F8 860A             (           io.asm):00483 (2)     17          lda     #LF
E2FA BDE1BF           (           io.asm):00484 (7)     24          jsr     OutChar
E2FD 3583             (           io.asm):00485 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00486                 
                      (           io.asm):00487                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00488                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00489                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00490                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00491                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00492                 ;
                      (           io.asm):00493                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00494                 ; ====================================
                      (           io.asm):00495                 ; Input:    A = Nibble to output
                      (           io.asm):00496                 
                      (           io.asm):00497                     PRAGMA cc
                      (           io.asm):00498                 
E2FF                  (           io.asm):00499                 OutNibble:
E2FF                  (           io.asm):00500                 OutNibbleLSB:
E2FF 3403             (           io.asm):00501 (4+2)   6           pshs    A,CC
E301 BDE0C4           (           io.asm):00502 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E304 BDE1BF           (           io.asm):00503 (7)     20          jsr     OutChar
E307 3583             (           io.asm):00504 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00505                 
                      (           io.asm):00506                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00507                 ; ====================================
                      (           io.asm):00508                 ; Input:    A = Nibble to output
                      (           io.asm):00509                 
                      (           io.asm):00510                     PRAGMA cc
                      (           io.asm):00511                 
E309                  (           io.asm):00512                 OutNibbleMSB:
E309 3403             (           io.asm):00513 (4+2)   6           pshs    A,CC
E30B 44               (           io.asm):00514 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E30C 44               (           io.asm):00515 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E30D 44               (           io.asm):00516 (1)     9           lsra                        ;
E30E 44               (           io.asm):00517 (1)     10          lsra                        ;
E30F BDE0C4           (           io.asm):00518 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E312 BDE1BF           (           io.asm):00519 (7)     24          jsr     OutChar
E315 3583             (           io.asm):00520 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00521                 
                      (           io.asm):00522                 ;   ___            _     ____    _
                      (           io.asm):00523                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00524                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00525                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00526                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00527                 ;
                      (           io.asm):00528                 ; Print a string to the screen
                      (           io.asm):00529                 ; ============================
                      (           io.asm):00530                 ; Input:    X = Address of string to print
                      (           io.asm):00531                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00532                 
                      (           io.asm):00533                     PRAGMA cc
                      (           io.asm):00534                 
E317                  (           io.asm):00535                 OutStr:
E317                  (           io.asm):00536                 OutStrLZ:
E317 3403             (           io.asm):00537 (4+2)   6           pshs    A,CC
E319                  (           io.asm):00538                 OutStrLoop:
E319 A680             (           io.asm):00539 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E31B 2709             (           io.asm):00540 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E31D 81FF             (           io.asm):00541 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E31F 2705             (           io.asm):00542 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E321 17FE9B           (           io.asm):00543 (7)     26          lbsr    OutChar             ; Print character
E324 20F3             (           io.asm):00544 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E326                  (           io.asm):00545                 OutStrEnd:
E326 3583             (           io.asm):00546 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00547                 
                      (           io.asm):00548                 ; Print a string to the screen without leading zeros
                      (           io.asm):00549                 ; ==================================================
                      (           io.asm):00550                 ; Input:    X = Address of string to print
                      (           io.asm):00551                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00552                 
                      (           io.asm):00553                     PRAGMA cc
                      (           io.asm):00554                 
E328                  (           io.asm):00555                 OutStrNLZ:
E328 3407             (           io.asm):00556 (4+3)   7           pshs    A,B,CC
E32A 5F               (           io.asm):00557 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E32B                  (           io.asm):00558                 OutStrNLZLoop:
E32B A680             (           io.asm):00559 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E32D 81FF             (           io.asm):00560 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E32F 270F             (           io.asm):00561 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E331 8130             (           io.asm):00562 (2)     20          cmpa    #'0'                ; Is it a zero?
E333 2604             (           io.asm):00563 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E335 8100             (           io.asm):00564 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E337 27F2             (           io.asm):00565 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E339                  (           io.asm):00566                 OutStrNLZPrintChar:
E339 1F89             (           io.asm):00567 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E33B BDE1BF           (           io.asm):00568 (7)     39          jsr     OutChar             ; Print character
E33E 20EB             (           io.asm):00569 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E340                  (           io.asm):00570                 OutStrNLZEnd:
E340 3587             (           io.asm):00571 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00572                 
                      (           io.asm):00573                 ;   ___            _    __        __                     _ 
                      (           io.asm):00574                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00575                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00576                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00577                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00578                 ;
                      (           io.asm):00579                 ; Print a word as 4 ASCII characters
                      (           io.asm):00580                 ; ==================================
                      (           io.asm):00581                 ; Input:    D = Word to output
                      (           io.asm):00582                 
                      (           io.asm):00583                     PRAGMA cc
                      (           io.asm):00584                 
E342                  (           io.asm):00585                 OutWord:
E342 3407             (           io.asm):00586 (4+3)   7           pshs    A,B,CC
E344 1038             (           io.asm):00587 (6)     13          pshsw
E346 BDE0F0           (           io.asm):00588 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E349 BDE1BF           (           io.asm):00589 (7)     27          jsr     OutChar             ; Print 4th digit
E34C 1F98             (           io.asm):00590 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E34E BDE1BF           (           io.asm):00591 (7)     38          jsr     OutChar             ; Print 3rd digit
E351 1FE8             (           io.asm):00592 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E353 BDE1BF           (           io.asm):00593 (7)     49          jsr     OutChar             ; Print 2nd digit
E356 1FF8             (           io.asm):00594 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E358 BDE1BF           (           io.asm):00595 (7)     60          jsr     OutChar             ; Print 1st digit
E35B 1039             (           io.asm):00596 (6)     66          pulsw
E35D 3587             (           io.asm):00597 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00598                 
                      (           io.asm):00599                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00600                 ; =========================================================
                      (           io.asm):00601                 ; Input:    D = Byte to output
                      (           io.asm):00602                 
                      (           io.asm):00603                     PRAGMA cc
                      (           io.asm):00604                 
E35F                  (           io.asm):00605                 OutWordNLZ:
E35F 3416             (           io.asm):00606 (4+4)   8           pshs    A,B,X
E361 1038             (           io.asm):00607 (6)     14          pshsw
E363 8E0000           (           io.asm):00608 (3)     17          ldx     #0                  ; Clear leading zero flag
E366 BDE0F0           (           io.asm):00609 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E369 8130             (           io.asm):00610 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E36B 2705             (           io.asm):00611 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E36D 3001             (           io.asm):00612 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E36F BDE1BF           (           io.asm):00613 (7)     41          jsr     OutChar             ; Print 1th digit
E372                  (           io.asm):00614                 OutWordNLZ2:
E372 1F98             (           io.asm):00615 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E374 8130             (           io.asm):00616 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E376 2605             (           io.asm):00617 (3)     50          bne     OutWordNLZp2        ; It's not zero
E378 8C0000           (           io.asm):00618 (3)     53          cmpx    #0                  ; Check leading zero flag
E37B 2705             (           io.asm):00619 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E37D                  (           io.asm):00620                 OutWordNLZp2:
E37D 3001             (           io.asm):00621 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E37F BDE1BF           (           io.asm):00622 (7)     68          jsr     OutChar             ; Print 2rd digit
E382                  (           io.asm):00623                 OutWordNLZ3:
E382 1FE8             (           io.asm):00624 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E384 8130             (           io.asm):00625 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E386 2605             (           io.asm):00626 (3)     77          bne     OutWordNLZp3        ; It's not zero
E388 8C0000           (           io.asm):00627 (3)     80          cmpx    #0                  ; Check leading zero flag
E38B 2705             (           io.asm):00628 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E38D                  (           io.asm):00629                 OutWordNLZp3:
E38D 3001             (           io.asm):00630 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E38F BDE1BF           (           io.asm):00631 (7)     95          jsr     OutChar             ; Print 3nd digit
E392                  (           io.asm):00632                 OutWordNLZ4:
E392 1FF8             (           io.asm):00633 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E394 BDE1BF           (           io.asm):00634 (7)     106         jsr     OutChar             ; Print 4st digit
E397 1039             (           io.asm):00635 (6)     112         pulsw
E399 3596             (           io.asm):00636 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00183                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors
                      (      monitor.asm):00005                 ; *   ErrPointer
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00016                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00017                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00018                 ; ****************************************************************************************
                      (      monitor.asm):00019                 
                      (      monitor.asm):00020                 ;   ____                   _   _____                                    
                      (      monitor.asm):00021                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00022                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00023                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00024                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00025                 ;
                      (      monitor.asm):00026                 ; Various error messages pertaining to command line
                      (      monitor.asm):00027                 ; =================================================
                      (      monitor.asm):00028                 
                      (      monitor.asm):00029                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00030                 ; ------------------------------------------------------------
E39B                  (      monitor.asm):00031                 ErrPointer:
E39B 3407             (      monitor.asm):00032 (4+3)   129         pshs    A,B,CC
E39D F6ED9F           (      monitor.asm):00033 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E3A0 CB09             (      monitor.asm):00034 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E3A2                  (      monitor.asm):00035                 ErrorPointerLoop:
E3A2 8620             (      monitor.asm):00036 (2)     137         lda     #' '                ; Move cursor one space
E3A4 BDE1BF           (      monitor.asm):00037 (7)     144         jsr     OutChar             ;
E3A7 5A               (      monitor.asm):00038 (1)     145         decb                        ; Decrement position counter
E3A8 26F8             (      monitor.asm):00039 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E3AA 865E             (      monitor.asm):00040 (2)     150         lda     #'^'                ; Print the position pointer
E3AC BDE1BF           (      monitor.asm):00041 (7)     157         jsr     OutChar             ;
E3AF BDE2F1           (      monitor.asm):00042 (7)     164         jsr     OutCRLF             ;
E3B2 3587             (      monitor.asm):00043 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00044                 
                      (      monitor.asm):00045                 ; Invalid address error message
                      (      monitor.asm):00046                 ; -----------------------------
E3B4                  (      monitor.asm):00047                 ErrInvalidAddress:
E3B4 3411             (      monitor.asm):00048 (4+3)   180         pshs    X,CC
E3B6 BDE39B           (      monitor.asm):00049 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E3B9 8EEA8E           (      monitor.asm):00050 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E3BC BDE317           (      monitor.asm):00051 (7)     197         jsr     OutStr              ;
E3BF 3591             (      monitor.asm):00052 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00053                 
                      (      monitor.asm):00054                 ; Invalid byte error message
                      (      monitor.asm):00055                 ; --------------------------
E3C1                  (      monitor.asm):00056                 ErrInvalidByte:
E3C1 3411             (      monitor.asm):00057 (4+3)   213         pshs    X,CC
E3C3 BDE39B           (      monitor.asm):00058 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E3C6 8EEAA1           (      monitor.asm):00059 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E3C9 BDE317           (      monitor.asm):00060 (7)     230         jsr     OutStr              ;
E3CC 3591             (      monitor.asm):00061 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00062                 
                      (      monitor.asm):00063                 ; Invalid command error message
                      (      monitor.asm):00064                 ; -----------------------------
E3CE                  (      monitor.asm):00065                 ErrInvalidCommand:
E3CE 3411             (      monitor.asm):00066 (4+3)   246         pshs    X,CC
E3D0 BDE39B           (      monitor.asm):00067 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E3D3 8EEAE4           (      monitor.asm):00068 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E3D6 BDE317           (      monitor.asm):00069 (7)     263         jsr     OutStr              ;
E3D9 3591             (      monitor.asm):00070 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00071                 
                      (      monitor.asm):00072                 ; Invalid parameter error message
                      (      monitor.asm):00073                 ; -------------------------------
E3DB                  (      monitor.asm):00074                 ErrInvalidParameter:
E3DB 3411             (      monitor.asm):00075 (4+3)   279         pshs    X,CC
E3DD BDE39B           (      monitor.asm):00076 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E3E0 8EEAB1           (      monitor.asm):00077 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E3E3 BDE317           (      monitor.asm):00078 (7)     296         jsr     OutStr              ;
E3E6 3591             (      monitor.asm):00079 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00080                 
                      (      monitor.asm):00081                 ; No parameter error message
                      (      monitor.asm):00082                 ; --------------------------
E3E8                  (      monitor.asm):00083                 ErrNoParameter:
E3E8 3411             (      monitor.asm):00084 (4+3)   312         pshs    X,CC
E3EA BDE39B           (      monitor.asm):00085 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E3ED 8EEAC6           (      monitor.asm):00086 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E3F0 BDE317           (      monitor.asm):00087 (7)     329         jsr     OutStr              ;
E3F3 3591             (      monitor.asm):00088 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00089                     
                      (      monitor.asm):00090                 ; Syntax error message
                      (      monitor.asm):00091                 ; --------------------
E3F5                  (      monitor.asm):00092                 ErrSyntaxError:
E3F5 3411             (      monitor.asm):00093 (4+3)   345         pshs    X,CC
E3F7 BDE39B           (      monitor.asm):00094 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E3FA 8EEAF7           (      monitor.asm):00095 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E3FD BDE317           (      monitor.asm):00096 (7)     362         jsr     OutStr              ;
E400 3591             (      monitor.asm):00097 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00098                 
                      (      monitor.asm):00099                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00100                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00101                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00102                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00103                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00104                 ;                                                |_|
                      (      monitor.asm):00105                 ; Monitor help screen
                      (      monitor.asm):00106                 ; ===================
                      (      monitor.asm):00107                 
E402                  (      monitor.asm):00108                 CmdHelp:
E402 8EE92B           (      monitor.asm):00109 (3)     374         ldx     #CmdHelpMsg
E405 BDE317           (      monitor.asm):00110 (7)     381         jsr     OutStr
E408 39               (      monitor.asm):00111 (4)     385         rts
                      (      monitor.asm):00112                     
                      (      monitor.asm):00113                 ;   ____                   _   ____                              
                      (      monitor.asm):00114                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00115                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00116                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00117                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00118                 ;
                      (      monitor.asm):00119                 ; Command parser for the monitor
                      (      monitor.asm):00120                 ; ==============================
                      (      monitor.asm):00121                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00122                 
                      (      monitor.asm):00123                     PRAGMA cc
                      (      monitor.asm):00124                 
E409                  (      monitor.asm):00125                 CmdParse:
E409 3427             (      monitor.asm):00126 (4+5)   9           pshs    A,B,Y,CC
E40B BDE7D4           (      monitor.asm):00127 (7)     16          jsr     SkipSpaces          ; Skip leading spaces
E40E BFEDB5           (      monitor.asm):00128 (5)     21          stx     TempWord            ; Store string pointer for command list cycling
E411 A684             (      monitor.asm):00129 (4+0)   25          lda     ,X                  ; Load first character from command string to see if it's empty
E413 2741             (      monitor.asm):00130 (3)     28          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E415 108EE8E7         (      monitor.asm):00131 (4)     32          ldy     #CmdList            ; Load command list table location in Y
E419                  (      monitor.asm):00132                 CmdParseChar:
E419 A680             (      monitor.asm):00133 (4+1)   37          lda     ,X+                 ; Load first character from command prompt string
E41B BDE14E           (      monitor.asm):00134 (7)     44          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E41E E6A0             (      monitor.asm):00135 (4+1)   49          ldb     ,Y+                 ; Load a character from the command list
E420 2B1C             (      monitor.asm):00136 (3)     52          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E422 103789           (      monitor.asm):00137 (4)     56          cmpr    A,B                 ; Compare command string to command list character
E425 2605             (      monitor.asm):00138 (3)     59          bne     CmdParseSkip        ; Skip command list entry and point to next command
E427 7CED9F           (      monitor.asm):00139 (6)     65          inc     CmdErrorPtr         ; Increment command line error pointer
E42A 20ED             (      monitor.asm):00140 (3)     68          bra     CmdParseChar        ; Go and compare the next character
E42C                  (      monitor.asm):00141                 CmdParseSkip:
E42C BEEDB5           (      monitor.asm):00142 (5)     73          ldx     TempWord            ; Restore command prompt pointer to starting position
E42F 7FED9F           (      monitor.asm):00143 (6)     79          clr     CmdErrorPtr         ; Restore command prompt error pointer
E432                  (      monitor.asm):00144                 CmdParseSkipLoop:
E432 E6A0             (      monitor.asm):00145 (4+1)   84          ldb     ,Y+                 ; Read next character
E434 2AFC             (      monitor.asm):00146 (3)     87          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E436 3122             (      monitor.asm):00147 (4+1)   92          leay    2,Y                 ; Jump over command address
E438 E6A4             (      monitor.asm):00148 (4+0)   96          ldb     ,Y                  ; Is it the end of the command list
E43A 2717             (      monitor.asm):00149 (3)     99          beq     CmdParseNone        ; Yes it is, print error and exit
E43C 20DB             (      monitor.asm):00150 (3)     102         bra     CmdParseChar        ; Repeat process until command found
E43E                  (      monitor.asm):00151                 CmdParseValid:
                      (      monitor.asm):00152                     ; Check for characters after valid command
E43E 8120             (      monitor.asm):00153 (2)     104         cmpa    #' '                ; Check for a parameter separator (space)
E440 2704             (      monitor.asm):00154 (3)     107         beq     CmdParseExecute     ; Yes, then execute command
E442 8100             (      monitor.asm):00155 (2)     109         cmpa    #$00                ; Check for an end of line in string (null)
E444 260D             (      monitor.asm):00156 (3)     112         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E446                  (      monitor.asm):00157                 CmdParseExecute:
E446 7AED9F           (      monitor.asm):00158 (6)     118         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E449 ECA4             (      monitor.asm):00159 (5+0)   123         ldd     ,Y                  ; Load address of command from table
E44B EDC3             (      monitor.asm):00160 (5+2)   130         std     ,--U                ; Save address to user stack
E44D 301F             (      monitor.asm):00161 (4+1)   135         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E44F 3527             (      monitor.asm):00162 (4+5)   144         puls    A,B,Y,CC            ; Restore registers
E451 6ED1             (      monitor.asm):00163 (3+6)   153         jmp     [,U++]              ; Execute command
E453                  (      monitor.asm):00164                 CmdParseNone:
E453 BDE3CE           (      monitor.asm):00165 (7)     160         jsr     ErrInvalidCommand   ;
E456                  (      monitor.asm):00166                 CmdParseEnd:
E456 35A7             (      monitor.asm):00167 (4+7)   171         puls    A,B,Y,CC,PC
                      (      monitor.asm):00168                 
                      (      monitor.asm):00169                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00170                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00171                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00172                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00173                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00174                 ;                                                                |_|
                      (      monitor.asm):00175                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00176                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                     PRAGMA cc
                      (      monitor.asm):00179                 
E458                  (      monitor.asm):00180                 CmdPrompt:
E458 3406             (      monitor.asm):00181 (4+2)   6           pshs    D
E45A B6EDA2           (      monitor.asm):00182 (4)     10          lda     CurrBank            ;
E45D BDE2CF           (      monitor.asm):00183 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E460 863A             (      monitor.asm):00184 (2)     19          lda     #':'                ;
E462 BDE1BF           (      monitor.asm):00185 (7)     26          jsr     OutChar             ; Print separator
E465 FCEDA0           (      monitor.asm):00186 (5)     31          ldd     CurrAddress         ;
E468 BDE342           (      monitor.asm):00187 (7)     38          jsr     OutWord             ; Print current address
E46B 863E             (      monitor.asm):00188 (2)     40          lda     #'>'                ;
E46D BDE1BF           (      monitor.asm):00189 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E470 8620             (      monitor.asm):00190 (2)     49          lda     #' '                ;
E472 BDE1BF           (      monitor.asm):00191 (7)     56          jsr     OutChar             ; Print space
E475 7FED9F           (      monitor.asm):00192 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E478 3586             (      monitor.asm):00193 (4+4)   70          puls    D,PC
                      (      monitor.asm):00194                 
                      (      monitor.asm):00195                 ;  ____                              
                      (      monitor.asm):00196                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00197                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00198                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00199                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00200                 ;                             |_|    
                      (      monitor.asm):00201                 ;
                      (      monitor.asm):00202                 ; Memory dump
                      (      monitor.asm):00203                 ; ===========
                      (      monitor.asm):00204                 
E47A                  (      monitor.asm):00205                 Dump:
E47A BDE7D4           (      monitor.asm):00206 (7)     77          jsr     SkipSpaces          ; Remove leading white spaces
E47D A684             (      monitor.asm):00207 (4+0)   81          lda     ,X                  ; Read a character from string
E47F 2708             (      monitor.asm):00208 (3)     84          beq     DumpDisplay         ; If empty, assume Current Address, and display
E481 BDE221           (      monitor.asm):00209 (7)     91          jsr     GetStrWord          ; Read address from string
E484 2454             (      monitor.asm):00210 (3)     94          bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E486 FDEDA0           (      monitor.asm):00211 (5)     99          std     CurrAddress         ; Save inputed address in Current Address
E489                  (      monitor.asm):00212                 DumpDisplay:
E489 BEEDA0           (      monitor.asm):00213 (5)     104         ldx     CurrAddress         ; Retrieve Current Address
E48C 1F12             (      monitor.asm):00214 (4)     108         tfr     X,Y
E48E 118614           (      monitor.asm):00215 (3)     111         lde     #ScrVertRes-4       ; Number of lines to print
E491                  (      monitor.asm):00216                 DumpAddr:
E491 1F10             (      monitor.asm):00217 (4)     115         tfr     X,D                 ; Put Current address in D
E493 BDE342           (      monitor.asm):00218 (7)     122         jsr     OutWord             ;
E496 863A             (      monitor.asm):00219 (2)     124         lda     #':'                ; Print address separator
E498 BDE1BF           (      monitor.asm):00220 (7)     131         jsr     OutChar             ;
E49B 8620             (      monitor.asm):00221 (2)     133         lda     #' '                ; Print space separator
E49D BDE1BF           (      monitor.asm):00222 (7)     140         jsr     OutChar             ;
E4A0 C610             (      monitor.asm):00223 (2)     142         ldb     #BytePerLine        ; Get the number of bytes to print per line
E4A2                  (      monitor.asm):00224                 DumpByte:
E4A2 A680             (      monitor.asm):00225 (4+1)   147         lda     ,X+                 ; Print byte from Current Address
E4A4 BDE2CF           (      monitor.asm):00226 (7)     154         jsr     OutByte             ;
E4A7 8620             (      monitor.asm):00227 (2)     156         lda     #' '                ; Print space separator
E4A9 BDE1BF           (      monitor.asm):00228 (7)     163         jsr     OutChar             ;
E4AC 5A               (      monitor.asm):00229 (1)     164         decb                        ; Decrement byte counter
E4AD 26F3             (      monitor.asm):00230 (3)     167         bne     DumpByte            ; If not finished, loop and output next byte
E4AF 867C             (      monitor.asm):00231 (2)     169         lda     #'|'                ; Print space separator
E4B1 BDE1BF           (      monitor.asm):00232 (7)     176         jsr     OutChar             ;
E4B4 8620             (      monitor.asm):00233 (2)     178         lda     #' '                ; Print space separator
E4B6 BDE1BF           (      monitor.asm):00234 (7)     185         jsr     OutChar             ;
E4B9 C610             (      monitor.asm):00235 (2)     187         ldb     #BytePerLine        ; Get the number of bytes to print per line
E4BB                  (      monitor.asm):00236                 DumpChar:
E4BB A6A0             (      monitor.asm):00237 (4+1)   192         lda     ,Y+                 ; Print character from Current Address
E4BD 8120             (      monitor.asm):00238 (2)     194         cmpa    #' '                ; Compare character to space character
E4BF 2D05             (      monitor.asm):00239 (3)     197         blt     DumpCharDot         ; If lower, then print dot
E4C1 4D               (      monitor.asm):00240 (1)     198         tsta                        ; Is the characther in the extended ASCII range
E4C2 2B02             (      monitor.asm):00241 (3)     201         bmi     DumpCharDot         ; If it is, the print dot
E4C4 2002             (      monitor.asm):00242 (3)     204         bra     DumpCharPrint       ; Else, print character
E4C6                  (      monitor.asm):00243                 DumpCharDot:
E4C6 862E             (      monitor.asm):00244 (2)     206         lda     #'.'                ; Replace character to dot
E4C8                  (      monitor.asm):00245                 DumpCharPrint:
E4C8 BDE1BF           (      monitor.asm):00246 (7)     213         jsr     OutChar             ; Output actual or replaced character
E4CB 5A               (      monitor.asm):00247 (1)     214         decb                        ; Decrement byte counter
E4CC 26ED             (      monitor.asm):00248 (3)     217         bne     DumpChar            ; If not finished, loop and output next character
E4CE BDE2F1           (      monitor.asm):00249 (7)     224         jsr     OutCRLF             ; Change line
E4D1 114A             (      monitor.asm):00250 (2)     226         dece                        ; Decrement the lines to print
E4D3 26BC             (      monitor.asm):00251 (3)     229         bne     DumpAddr
E4D5 BFEDA0           (      monitor.asm):00252 (5)     234         stx     CurrAddress         ; Store new Current Address in memory
E4D8 2003             (      monitor.asm):00253 (3)     237         bra     DumpEnd
E4DA                  (      monitor.asm):00254                 DumpInvalidAddress:
E4DA BDE3B4           (      monitor.asm):00255 (7)     244         jsr     ErrInvalidAddress   ; Display address error
E4DD                  (      monitor.asm):00256                 DumpEnd:
E4DD 39               (      monitor.asm):00257 (4)     248         rts
                      (      monitor.asm):00258                     
                      (      monitor.asm):00259                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00260                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00261                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00262                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00263                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00264                 ;
                      (      monitor.asm):00265                 ; Load Intel Hex file to memory
                      (      monitor.asm):00266                 ; =============================
                      (      monitor.asm):00267                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00268                 ;           E = Checksum accumulator
                      (      monitor.asm):00269                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00270                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00271                 ;           Y = Byte count in current record
                      (      monitor.asm):00272                 ; Vars:     TempWord
                      (      monitor.asm):00273                 
E4DE                  (      monitor.asm):00274                 LoadIntelHex:
E4DE 3437             (      monitor.asm):00275 (4+7)   259         pshs    A,B,X,Y,CC
E4E0 1038             (      monitor.asm):00276 (6)     265         pshsw
E4E2 105F             (      monitor.asm):00277 (2)     267         clrw                        ; Clear the flags and checksum accumulator
E4E4 8EEB07           (      monitor.asm):00278 (3)     270         ldx     #LoadStartMsg       ; Print message that loading will commence
E4E7 BDE317           (      monitor.asm):00279 (7)     277         jsr     OutStr              ; 
E4EA                  (      monitor.asm):00280                 LoadRecord:
E4EA BDE1A5           (      monitor.asm):00281 (7)     284         jsr     InChar              ; Read a character
E4ED 811B             (      monitor.asm):00282 (2)     286         cmpa    #ESC                ; Is it the ESC key?
E4EF 2609             (      monitor.asm):00283 (3)     289         bne     LoadStart           ; No, check for record marker
E4F1 8EEB42           (      monitor.asm):00284 (3)     292         ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E4F4 BDE317           (      monitor.asm):00285 (7)     299         jsr     OutStr              ; 
E4F7 1600AF           (      monitor.asm):00286 (4)     303         lbra    LoadEnd             ; Exit
E4FA                  (      monitor.asm):00287                 LoadStart:
E4FA 813A             (      monitor.asm):00288 (2)     305         cmpa    #':'                ; Start of record marker
E4FC 26EC             (      monitor.asm):00289 (3)     308         bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E4FE 114F             (      monitor.asm):00290 (2)     310         clre                        ; Clear checksum accumulator
                      (      monitor.asm):00291                     ; Read the record length
E500 BDE230           (      monitor.asm):00292 (7)     317         jsr     InByte              ; Get record length
E503 1F89             (      monitor.asm):00293 (4)     321         tfr     A,B                 ; Transfer value to LSB of D
E505 4F               (      monitor.asm):00294 (1)     322         clra                        ; Clear MSB of D
E506 1F02             (      monitor.asm):00295 (4)     326         tfr     D,Y                 ; Transfer byte count D to Y
E508 1F9E             (      monitor.asm):00296 (4)     330         tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00297                     ; Read the destination address
E50A BDE2B0           (      monitor.asm):00298 (7)     337         jsr     InWord              ; Read the address
E50D BFEDB5           (      monitor.asm):00299 (5)     342         stx     TempWord            ; Save last address pointed by X, as last record is $0000
E510 1F01             (      monitor.asm):00300 (4)     346         tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00301                     ; Add checksum of both bytes
E512 10308E           (      monitor.asm):00302 (4)     350         addr    A,E                 ; Add MSB of address to checksum accumulator
E515 10309E           (      monitor.asm):00303 (4)     354         addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00304                     ;Set origin address flag and store address in CurrAddress
E518 115D             (      monitor.asm):00305 (2)     356         tstf                        ; Test the flags register
E51A 2B09             (      monitor.asm):00306 (3)     359         bmi     LoadRecordType      ; If it's not the first line of code read record type
E51C BFEDA0           (      monitor.asm):00307 (5)     364         stx     CurrAddress         ; Save start address
E51F BFEDB2           (      monitor.asm):00308 (5)     369         stx     RegPC               ; Save the user PC 
E522 11C680           (      monitor.asm):00309 (3)     372         ldf     #$80                ; Sets the origin flag
E525                  (      monitor.asm):00310                 LoadRecordType:
E525 BDE230           (      monitor.asm):00311 (7)     379         jsr     InByte              ; Get the record type
                      (      monitor.asm):00312                     ; Add checksum
E528 10308E           (      monitor.asm):00313 (4)     383         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00314                     ; Which record type is it?
E52B 8100             (      monitor.asm):00315 (2)     385         cmpa    #0                  ; Is it the Data record type?
E52D 2713             (      monitor.asm):00316 (3)     388         beq     LoadData            ; Get Data
E52F 8101             (      monitor.asm):00317 (2)     390         cmpa    #1                  ; Is it the End of File record type?
E531 273E             (      monitor.asm):00318 (3)     393         beq     LoadEOF             ; Load last line
E533 8EEB5D           (      monitor.asm):00319 (3)     396         ldx     #LoadRecordErr      ; 
E536 BDE317           (      monitor.asm):00320 (7)     403         jsr     OutStr              ; Print Unknown Record Type message
E539 BDE2CF           (      monitor.asm):00321 (7)     410         jsr     OutByte             ; Print the actual record number
E53C BDE2F1           (      monitor.asm):00322 (7)     417         jsr     OutCRLF             ; Change line
E53F 160067           (      monitor.asm):00323 (4)     421         lbra    LoadEnd
E542                  (      monitor.asm):00324                 LoadData:
                      (      monitor.asm):00325                     ; Get record type 00 (Data)
E542 BDE230           (      monitor.asm):00326 (7)     428         jsr     InByte              ; Read data
E545 A780             (      monitor.asm):00327 (4+1)   433         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00328                     ; Add checksum
E547 10308E           (      monitor.asm):00329 (4)     437         addr    A,E                 ; Add byte data to checksum accumulator
E54A 313F             (      monitor.asm):00330 (4+1)   442         leay    -1,Y                ; Decrement byte counter
E54C 108C0000         (      monitor.asm):00331 (4)     446         cmpy    #0
E550 26F0             (      monitor.asm):00332 (3)     449         bne     LoadData
E552                  (      monitor.asm):00333                 LoadChecksum:
                      (      monitor.asm):00334                     ; Process accumulated checksum
E552 1143             (      monitor.asm):00335 (2)     451         come                        ; Complement F
E554 114C             (      monitor.asm):00336 (2)     453         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00337                     ; Get record checksum
E556 BDE230           (      monitor.asm):00338 (7)     460         jsr     InByte              ; Read checksum
E559 10378E           (      monitor.asm):00339 (4)     464         cmpr    A,E                 ; Do the checksums match
E55C 2608             (      monitor.asm):00340 (3)     467         bne     LoadFailure         ; If inconsistent, display message
E55E 862E             (      monitor.asm):00341 (2)     469         lda     #'.'                ; Character indicating line is ok
E560 BDE1BF           (      monitor.asm):00342 (7)     476         jsr     OutChar             ; Print the period character
E563 16FF84           (      monitor.asm):00343 (4)     480         lbra    LoadRecord          ; Fetch next record
E566                  (      monitor.asm):00344                 LoadFailure:
                      (      monitor.asm):00345                     ; Indicate record failed checksum
E566 11C681           (      monitor.asm):00346 (3)     483         ldf     #$81                ; Sets the checksum failure flag
E569 8678             (      monitor.asm):00347 (2)     485         lda     #'x'                ; Load the failed checksum character
E56B BDE1BF           (      monitor.asm):00348 (7)     492         jsr     OutChar             ; Print it
E56E 16FF79           (      monitor.asm):00349 (4)     496         lbra    LoadRecord          ; Get next record
E571                  (      monitor.asm):00350                 LoadEOF:
                      (      monitor.asm):00351                     ; Process accumulated checksum
E571 1143             (      monitor.asm):00352 (2)     498         come                        ; Complement E
E573 114C             (      monitor.asm):00353 (2)     500         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00354                     ; Get end record (01) checksum
E575 BDE230           (      monitor.asm):00355 (7)     507         jsr     InByte              ; Get the checksum byte
E578 10378E           (      monitor.asm):00356 (4)     511         cmpr    A,E                 ; Do the checksums match
E57B 2708             (      monitor.asm):00357 (3)     514         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E57D 11C681           (      monitor.asm):00358 (3)     517         ldf     #$81                ; Sets the checksum failure flag
E580 8658             (      monitor.asm):00359 (2)     519         lda     #'X'                ; Load the failed checksum character
E582 BDE1BF           (      monitor.asm):00360 (7)     526         jsr     OutChar             ; Print it Exit routine
E585                  (      monitor.asm):00361                 LoadCheckFlag:
E585 11C180           (      monitor.asm):00362 (3)     529         cmpf    #$80                ; Was there any checksum errors?
E588 2708             (      monitor.asm):00363 (3)     532         beq     LoadSuccess         ; If no errors, then print success
E58A 8EEB73           (      monitor.asm):00364 (3)     535         ldx     #LoadFailedErr      ; Print download failed
E58D BDE317           (      monitor.asm):00365 (7)     542         jsr     OutStr              ;
E590 2017             (      monitor.asm):00366 (3)     545         bra     LoadEnd             ;
E592                  (      monitor.asm):00367                 LoadSuccess:
E592 BEEDB5           (      monitor.asm):00368 (5)     550         ldx     TempWord            ; Restore last position of X
E595 CC36FF           (      monitor.asm):00369 (3)     553         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E598 ED81             (      monitor.asm):00370 (5+2)   560         std     ,X++                ; Store it at the end of code
E59A CC103A           (      monitor.asm):00371 (3)     563         ldd     #$103A              ; Save opcode "pshuw"
E59D ED81             (      monitor.asm):00372 (5+2)   570         std     ,X++                ; Store it at the end of code
E59F 8639             (      monitor.asm):00373 (2)     572         lda     #$39                ; Save opcode "rts"
E5A1 A784             (      monitor.asm):00374 (4+0)   576         sta     ,X                  ; Store it at the end of code to return to prompt
E5A3 8EEB9B           (      monitor.asm):00375 (3)     579         ldx     #LoadSuccessMsg     ; Print success message
E5A6 BDE317           (      monitor.asm):00376 (7)     586         jsr     OutStr
E5A9                  (      monitor.asm):00377                 LoadEnd:
E5A9 1039             (      monitor.asm):00378 (6)     592         pulsw
E5AB 35B7             (      monitor.asm):00379 (4+9)   605         puls    A,B,X,Y,CC,PC
                      (      monitor.asm):00380                 
                      (      monitor.asm):00381                 ;  __  __                                             __  __                 
                      (      monitor.asm):00382                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00383                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00384                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00385                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00386                 ;                                             |___/                   |_|
                      (      monitor.asm):00387                 ;
                      (      monitor.asm):00388                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00389                 ; ===========================================
                      (      monitor.asm):00390                 
E5AD                  (      monitor.asm):00391                 MemoryMap:
E5AD 3406             (      monitor.asm):00392 (4+2)   611         pshs    A,B
E5AF 8EEBB1           (      monitor.asm):00393 (3)     614         ldx     #MemoryMapMsg
E5B2 BDE317           (      monitor.asm):00394 (7)     621         jsr     OutStr              ; Print up to end of RAM
E5B5 CCDFFF           (      monitor.asm):00395 (3)     624         ldd     #RomStart-1
E5B8 BDE342           (      monitor.asm):00396 (7)     631         jsr     OutWord             ; Print RAM end
E5BB BDE317           (      monitor.asm):00397 (7)     638         jsr     OutStr              ; Print up to begining of ROM
E5BE 104C             (      monitor.asm):00398 (2)     640         incd
E5C0 BDE342           (      monitor.asm):00399 (7)     647         jsr     OutWord             ; Print ROM start
E5C3 BDE317           (      monitor.asm):00400 (7)     654         jsr     OutStr              ; Print till the end of mapping
E5C6 3586             (      monitor.asm):00401 (4+4)   662         puls    A,B,PC
                      (      monitor.asm):00402                 
                      (      monitor.asm):00403                 ;  ____                  _    
                      (      monitor.asm):00404                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00405                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00406                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00407                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00408                 ;
                      (      monitor.asm):00409                 ;
                      (      monitor.asm):00410                 ; Read a byte from a specific or current address
                      (      monitor.asm):00411                 ; ==============================================
                      (      monitor.asm):00412                 
E5C8                  (      monitor.asm):00413                 Peek:
E5C8 BDE7D4           (      monitor.asm):00414 (7)     669         jsr     SkipSpaces
E5CB A684             (      monitor.asm):00415 (4+0)   673         lda     ,X
E5CD 2708             (      monitor.asm):00416 (3)     676         beq     PeekDisplay
E5CF BDE221           (      monitor.asm):00417 (7)     683         jsr     GetStrWord
E5D2 241A             (      monitor.asm):00418 (3)     686         bcc     PeekInvalidAddr
E5D4 FDEDA0           (      monitor.asm):00419 (5)     691         std     CurrAddress
E5D7                  (      monitor.asm):00420                 PeekDisplay:
E5D7 FCEDA0           (      monitor.asm):00421 (5)     696         ldd     CurrAddress
E5DA BDE342           (      monitor.asm):00422 (7)     703         jsr     OutWord
E5DD 863D             (      monitor.asm):00423 (2)     705         lda     #'='
E5DF BDE1BF           (      monitor.asm):00424 (7)     712         jsr     OutChar
E5E2 A69FEDA0         (      monitor.asm):00425 (4+5)   721         lda     [CurrAddress]
E5E6 BDE2CF           (      monitor.asm):00426 (7)     728         jsr     OutByte
E5E9 BDE2F1           (      monitor.asm):00427 (7)     735         jsr     OutCRLF
E5EC 2003             (      monitor.asm):00428 (3)     738         bra     PeekEnd
E5EE                  (      monitor.asm):00429                 PeekInvalidAddr:
E5EE BDE3B4           (      monitor.asm):00430 (7)     745         jsr     ErrInvalidAddress
E5F1                  (      monitor.asm):00431                 PeekEnd:
E5F1 39               (      monitor.asm):00432 (4)     749         rts
                      (      monitor.asm):00433                 
                      (      monitor.asm):00434                 ;  ____            _           
                      (      monitor.asm):00435                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00436                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00437                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00438                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00439                 ;
                      (      monitor.asm):00440                 ;
                      (      monitor.asm):00441                 ; Writes a byte at a specific address
                      (      monitor.asm):00442                 ; ===================================
                      (      monitor.asm):00443                 
E5F2                  (      monitor.asm):00444                 Poke:
E5F2 BDE7D4           (      monitor.asm):00445 (7)     756         jsr     SkipSpaces          ; Remove excessive leading spaces
E5F5 A684             (      monitor.asm):00446 (4+0)   760         lda     ,X                  ; Load character
E5F7 2735             (      monitor.asm):00447 (3)     763         beq     PokeNoParameters    ; If no parameters, print no parameter error
E5F9 BDE221           (      monitor.asm):00448 (7)     770         jsr     GetStrWord          ; Get an address
E5FC 242B             (      monitor.asm):00449 (3)     773         bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E5FE FDEDA0           (      monitor.asm):00450 (5)     778         std     CurrAddress         ; Save address
E601 BDE7D4           (      monitor.asm):00451 (7)     785         jsr     SkipSpaces          ; Remove unecessary spaces
E604 BDE1E4           (      monitor.asm):00452 (7)     792         jsr     GetStrByte          ; Get byte
E607 241B             (      monitor.asm):00453 (3)     795         bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
E609 A79FEDA0         (      monitor.asm):00454 (4+5)   804         sta     [CurrAddress]       ; Poke value at address
E60D FCEDA0           (      monitor.asm):00455 (5)     809         ldd     CurrAddress         ; Print address
E610 BDE342           (      monitor.asm):00456 (7)     816         jsr     OutWord             ;
E613 863D             (      monitor.asm):00457 (2)     818         lda     #'='                ; Print a colon
E615 BDE1BF           (      monitor.asm):00458 (7)     825         jsr     OutChar             ;
E618 A69FEDA0         (      monitor.asm):00459 (4+5)   834         lda     [CurrAddress]       ; Load A from Current Address
E61C BDE2CF           (      monitor.asm):00460 (7)     841         jsr     OutByte             ; Print byte value
E61F BDE2F1           (      monitor.asm):00461 (7)     848         jsr     OutCRLF             ; New line
E622 200D             (      monitor.asm):00462 (3)     851         bra     PokeEnd
E624                  (      monitor.asm):00463                 PokeInvalidByte:
E624 BDE3C1           (      monitor.asm):00464 (7)     858         jsr     ErrInvalidByte      ; Print invalid byte
E627 2008             (      monitor.asm):00465 (3)     861         bra     PokeEnd
E629                  (      monitor.asm):00466                 PokeInvalidAddress:
E629 BDE3B4           (      monitor.asm):00467 (7)     868         jsr     ErrInvalidAddress   ; Print invalid address error
E62C 2003             (      monitor.asm):00468 (3)     871         bra     PokeEnd
E62E                  (      monitor.asm):00469                 PokeNoParameters:
E62E BDE3E8           (      monitor.asm):00470 (7)     878         jsr     ErrNoParameter      ; Print no parameter error
E631                  (      monitor.asm):00471                 PokeEnd:
E631 39               (      monitor.asm):00472 (4)     882         rts
                      (      monitor.asm):00473                 
                      (      monitor.asm):00474                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00475                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00476                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00477                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00478                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00479                 ;                                                  |___/                                     
                      (      monitor.asm):00480                 ;
                      (      monitor.asm):00481                 ; Print Registers
                      (      monitor.asm):00482                 ; ===============
E632                  (      monitor.asm):00483                 PrintRegisters:
                      (      monitor.asm):00484                     ; Print Register A
E632 8641             (      monitor.asm):00485 (2)     884         lda     #'A'
E634 BDE1BF           (      monitor.asm):00486 (7)     891         jsr     OutChar
E637 863A             (      monitor.asm):00487 (2)     893         lda     #':'
E639 BDE1BF           (      monitor.asm):00488 (7)     900         jsr     OutChar
E63C B6EDA6           (      monitor.asm):00489 (4)     904         lda     RegA
E63F BDE2CF           (      monitor.asm):00490 (7)     911         jsr     OutByte
E642 8620             (      monitor.asm):00491 (2)     913         lda     #' '
E644 BDE1BF           (      monitor.asm):00492 (7)     920         jsr     OutChar
                      (      monitor.asm):00493                     ; Print Register B
E647 8642             (      monitor.asm):00494 (2)     922         lda     #'B'
E649 BDE1BF           (      monitor.asm):00495 (7)     929         jsr     OutChar
E64C 863A             (      monitor.asm):00496 (2)     931         lda     #':'
E64E BDE1BF           (      monitor.asm):00497 (7)     938         jsr     OutChar
E651 B6EDA7           (      monitor.asm):00498 (4)     942         lda     RegB
E654 BDE2CF           (      monitor.asm):00499 (7)     949         jsr     OutByte
E657 8620             (      monitor.asm):00500 (2)     951         lda     #' '
E659 BDE1BF           (      monitor.asm):00501 (7)     958         jsr     OutChar
                      (      monitor.asm):00502                     ; Print Register E
E65C 8645             (      monitor.asm):00503 (2)     960         lda     #'E'
E65E BDE1BF           (      monitor.asm):00504 (7)     967         jsr     OutChar
E661 863A             (      monitor.asm):00505 (2)     969         lda     #':'
E663 BDE1BF           (      monitor.asm):00506 (7)     976         jsr     OutChar
E666 B6EDA8           (      monitor.asm):00507 (4)     980         lda     RegE
E669 BDE2CF           (      monitor.asm):00508 (7)     987         jsr     OutByte
E66C 8620             (      monitor.asm):00509 (2)     989         lda     #' '
E66E BDE1BF           (      monitor.asm):00510 (7)     996         jsr     OutChar
                      (      monitor.asm):00511                     ; Print Register F
E671 8646             (      monitor.asm):00512 (2)     998         lda     #'F'
E673 BDE1BF           (      monitor.asm):00513 (7)     1005        jsr     OutChar
E676 863A             (      monitor.asm):00514 (2)     1007        lda     #':'
E678 BDE1BF           (      monitor.asm):00515 (7)     1014        jsr     OutChar
E67B B6EDA9           (      monitor.asm):00516 (4)     1018        lda     RegF
E67E BDE2CF           (      monitor.asm):00517 (7)     1025        jsr     OutByte
E681 8620             (      monitor.asm):00518 (2)     1027        lda     #' '
E683 BDE1BF           (      monitor.asm):00519 (7)     1034        jsr     OutChar
                      (      monitor.asm):00520                     ; Print Register X
E686 8658             (      monitor.asm):00521 (2)     1036        lda     #'X'
E688 BDE1BF           (      monitor.asm):00522 (7)     1043        jsr     OutChar
E68B 863A             (      monitor.asm):00523 (2)     1045        lda     #':'
E68D BDE1BF           (      monitor.asm):00524 (7)     1052        jsr     OutChar
E690 FCEDAA           (      monitor.asm):00525 (5)     1057        ldd     RegX
E693 BDE342           (      monitor.asm):00526 (7)     1064        jsr     OutWord
E696 8620             (      monitor.asm):00527 (2)     1066        lda     #' '
E698 BDE1BF           (      monitor.asm):00528 (7)     1073        jsr     OutChar
                      (      monitor.asm):00529                     ; Print Register Y
E69B 8659             (      monitor.asm):00530 (2)     1075        lda     #'Y'
E69D BDE1BF           (      monitor.asm):00531 (7)     1082        jsr     OutChar
E6A0 863A             (      monitor.asm):00532 (2)     1084        lda     #':'
E6A2 BDE1BF           (      monitor.asm):00533 (7)     1091        jsr     OutChar
E6A5 FCEDAC           (      monitor.asm):00534 (5)     1096        ldd     RegY
E6A8 BDE342           (      monitor.asm):00535 (7)     1103        jsr     OutWord
E6AB 8620             (      monitor.asm):00536 (2)     1105        lda     #' '
E6AD BDE1BF           (      monitor.asm):00537 (7)     1112        jsr     OutChar
                      (      monitor.asm):00538                     ; Print Register U
E6B0 8655             (      monitor.asm):00539 (2)     1114        lda     #'U'
E6B2 BDE1BF           (      monitor.asm):00540 (7)     1121        jsr     OutChar
E6B5 863A             (      monitor.asm):00541 (2)     1123        lda     #':'
E6B7 BDE1BF           (      monitor.asm):00542 (7)     1130        jsr     OutChar
E6BA FCEDAE           (      monitor.asm):00543 (5)     1135        ldd     RegU
E6BD BDE342           (      monitor.asm):00544 (7)     1142        jsr     OutWord
E6C0 8620             (      monitor.asm):00545 (2)     1144        lda     #' '
E6C2 BDE1BF           (      monitor.asm):00546 (7)     1151        jsr     OutChar
                      (      monitor.asm):00547                     ; Print Register S
E6C5 8653             (      monitor.asm):00548 (2)     1153        lda     #'S'
E6C7 BDE1BF           (      monitor.asm):00549 (7)     1160        jsr     OutChar
E6CA 863A             (      monitor.asm):00550 (2)     1162        lda     #':'
E6CC BDE1BF           (      monitor.asm):00551 (7)     1169        jsr     OutChar
E6CF FCEDB0           (      monitor.asm):00552 (5)     1174        ldd     RegS
E6D2 BDE342           (      monitor.asm):00553 (7)     1181        jsr     OutWord
E6D5 8620             (      monitor.asm):00554 (2)     1183        lda     #' '
E6D7 BDE1BF           (      monitor.asm):00555 (7)     1190        jsr     OutChar
                      (      monitor.asm):00556                     ; Print Register CC
E6DA 8643             (      monitor.asm):00557 (2)     1192        lda     #'C'
E6DC BDE1BF           (      monitor.asm):00558 (7)     1199        jsr     OutChar
E6DF BDE1BF           (      monitor.asm):00559 (7)     1206        jsr     OutChar
E6E2 863A             (      monitor.asm):00560 (2)     1208        lda     #':'
E6E4 BDE1BF           (      monitor.asm):00561 (7)     1215        jsr     OutChar
E6E7 B6EDA4           (      monitor.asm):00562 (4)     1219        lda     RegCC
E6EA BDE2CF           (      monitor.asm):00563 (7)     1226        jsr     OutByte
E6ED 8620             (      monitor.asm):00564 (2)     1228        lda     #' '
E6EF BDE1BF           (      monitor.asm):00565 (7)     1235        jsr     OutChar
                      (      monitor.asm):00566                     ; Print Register DP
E6F2 8644             (      monitor.asm):00567 (2)     1237        lda     #'D'
E6F4 BDE1BF           (      monitor.asm):00568 (7)     1244        jsr     OutChar
E6F7 8650             (      monitor.asm):00569 (2)     1246        lda     #'P'
E6F9 BDE1BF           (      monitor.asm):00570 (7)     1253        jsr     OutChar
E6FC 863A             (      monitor.asm):00571 (2)     1255        lda     #':'
E6FE BDE1BF           (      monitor.asm):00572 (7)     1262        jsr     OutChar
E701 B6EDA5           (      monitor.asm):00573 (4)     1266        lda     RegDP
E704 BDE2CF           (      monitor.asm):00574 (7)     1273        jsr     OutByte
E707 8620             (      monitor.asm):00575 (2)     1275        lda     #' '
E709 BDE1BF           (      monitor.asm):00576 (7)     1282        jsr     OutChar
                      (      monitor.asm):00577                     ; Print Program Counter
E70C 8650             (      monitor.asm):00578 (2)     1284        lda     #'P'
E70E BDE1BF           (      monitor.asm):00579 (7)     1291        jsr     OutChar
E711 8643             (      monitor.asm):00580 (2)     1293        lda     #'C'
E713 BDE1BF           (      monitor.asm):00581 (7)     1300        jsr     OutChar
E716 863A             (      monitor.asm):00582 (2)     1302        lda     #':'
E718 BDE1BF           (      monitor.asm):00583 (7)     1309        jsr     OutChar
E71B FCEDB2           (      monitor.asm):00584 (5)     1314        ldd     RegPC
E71E BDE342           (      monitor.asm):00585 (7)     1321        jsr     OutWord
E721 BDE2F1           (      monitor.asm):00586 (7)     1328        jsr     OutCRLF
E724 39               (      monitor.asm):00587 (4)     1332        rts
                      (      monitor.asm):00588                 
                      (      monitor.asm):00589                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):00590                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00591                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00592                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00593                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00594                 ;                                               |___/                                     
                      (      monitor.asm):00595                 ;
                      (      monitor.asm):00596                 ; Push Registers
                      (      monitor.asm):00597                 ; ==============
                      (      monitor.asm):00598                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):00599                 
E725                  (      monitor.asm):00600                 PushRegisters:  
                      (      monitor.asm):00601                     ; Recover register values from last run command
E725 103B             (      monitor.asm):00602 (6)     1338        puluw
E727 377F             (      monitor.asm):00603 (4+10)  1352        pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):00604                     ; Save registers in variables
E729 3401             (      monitor.asm):00605 (4+1)   1357        pshs    CC                  ; Store CC so it's not altered
E72B B7EDA6           (      monitor.asm):00606 (4)     1361        sta     RegA                ; Save the A register
E72E 3502             (      monitor.asm):00607 (4+1)   1366        puls    A                   ; Restore CC so it can be saved
E730 B7EDA4           (      monitor.asm):00608 (4)     1370        sta     RegCC               ; Save the condition code register
E733 F7EDA7           (      monitor.asm):00609 (4)     1374        stb     RegB                ; Save the B register
E736 11B7EDA8         (      monitor.asm):00610 (5)     1379        ste     RegE                ; Save the E register
E73A 11F7EDA9         (      monitor.asm):00611 (5)     1384        stf     RegF                ; Save the F register
E73E BFEDAA           (      monitor.asm):00612 (5)     1389        stx     RegX                ; Save the X register
E741 10BFEDAC         (      monitor.asm):00613 (6)     1395        sty     RegY                ; Save the Y register
E745 10FFEDB0         (      monitor.asm):00614 (6)     1401        sts     RegS                ; Save the systemp stack
E749 3706             (      monitor.asm):00615 (4+2)   1407        pulu    D                   ; Restore PC in D
E74B 830002           (      monitor.asm):00616 (3)     1410        subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
E74E FDEDB2           (      monitor.asm):00617 (5)     1415        std     RegPC               ; Save the program counter that was in D
E751 FFEDAE           (      monitor.asm):00618 (5)     1420        stu     RegU                ; Save the user stack
E754 39               (      monitor.asm):00619 (4)     1424        rts
                      (      monitor.asm):00620                 
                      (      monitor.asm):00621                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):00622                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00623                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00624                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00625                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00626                 ;                                         |___/                                     
                      (      monitor.asm):00627                 ;
                      (      monitor.asm):00628                 ; Pull Registers
                      (      monitor.asm):00629                 ; --------------
E755                  (      monitor.asm):00630                 PullRegisters:  
E755 B6EDA4           (      monitor.asm):00631 (4)     1428        lda     RegCC               ; Load CC register
E758 3402             (      monitor.asm):00632 (4+1)   1433        pshs    A                   ; Store it so it can be restored
E75A B6EDA6           (      monitor.asm):00633 (4)     1437        lda     RegA                ; Load the A register
E75D F6EDA7           (      monitor.asm):00634 (4)     1441        ldb     RegB                ; Load the B register
E760 11B6EDA8         (      monitor.asm):00635 (5)     1446        lde     RegE                ; Load the E register
E764 11F6EDA9         (      monitor.asm):00636 (5)     1451        ldf     RegF                ; Load the F register
E768 BEEDAA           (      monitor.asm):00637 (5)     1456        ldx     RegX                ; Load the X register
E76B 10BEEDAC         (      monitor.asm):00638 (6)     1462        ldy     RegY                ; Load the Y register
E76F FEEDAE           (      monitor.asm):00639 (5)     1467        ldu     RegU                ; Load the user stack
E772 3581             (      monitor.asm):00640 (4+3)   1474        puls    CC,PC
                      (      monitor.asm):00641                 
                      (      monitor.asm):00642                 ;  ____                  
                      (      monitor.asm):00643                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):00644                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):00645                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):00646                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):00647                 ;
                      (      monitor.asm):00648                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):00649                 ; -------------------------------------------------
                      (      monitor.asm):00650                 ; Input:    X = Command line string
                      (      monitor.asm):00651                 
E774                  (      monitor.asm):00652                 Run:
E774 BDE7D4           (      monitor.asm):00653 (7)     1481        jsr     SkipSpaces          ; Removes possible leading spaces
E777 A684             (      monitor.asm):00654 (4+0)   1485        lda     ,X                  ; Read character from command line
E779 2708             (      monitor.asm):00655 (3)     1488        beq     RunValidate         ; Use current address
E77B                  (      monitor.asm):00656                 RunGetAddress:
E77B BDE221           (      monitor.asm):00657 (7)     1495        jsr     GetStrWord          ; Get address from the input buffer
E77E FDEDA0           (      monitor.asm):00658 (5)     1500        std     CurrAddress         ; Save address to memory
E781 2410             (      monitor.asm):00659 (3)     1503        bcc     RunError            ; Invalid address, then print error
E783                  (      monitor.asm):00660                 RunValidate:
E783 A69FEDA0         (      monitor.asm):00661 (4+5)   1512        lda     [CurrAddress]       ; Load byte at specified address
E787 270D             (      monitor.asm):00662 (3)     1515        beq     RunEnd              ; If it's zero, then don't try to execute code
E789                  (      monitor.asm):00663                 RunExecute:
E789 7CEDA3           (      monitor.asm):00664 (6)     1521        inc     RunFlag             ; Make run flag non zero
E78C BDE755           (      monitor.asm):00665 (7)     1528        jsr     PullRegisters       ; Restore registers from previous command
E78F 6E9FEDA0         (      monitor.asm):00666 (3+5)   1536        jmp     [CurrAddress]       ; Execute code at specified address
E793                  (      monitor.asm):00667                 RunError:
E793 BDE3B4           (      monitor.asm):00668 (7)     1543        jsr     ErrInvalidAddress   ; If there's an error in the address, print it
E796                  (      monitor.asm):00669                 RunEnd:
E796 39               (      monitor.asm):00670 (4)     1547        rts
                      (      monitor.asm):00671                 
                      (      monitor.asm):00672                 ;  ____           _        _          _       _                           
                      (      monitor.asm):00673                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):00674                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):00675                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):00676                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):00677                 ;
                      (      monitor.asm):00678                 ; Sets the current address
                      (      monitor.asm):00679                 ; ========================
                      (      monitor.asm):00680                 ; Input:    X = Command line string
                      (      monitor.asm):00681                 
E797                  (      monitor.asm):00682                 SetAddress:
E797 3407             (      monitor.asm):00683 (4+3)   1554        pshs    A,B,CC
E799 BDE7D4           (      monitor.asm):00684 (7)     1561        jsr     SkipSpaces          ; Remove leading spaces
E79C A684             (      monitor.asm):00685 (4+0)   1565        lda     ,X                  ; Load first character
E79E 270F             (      monitor.asm):00686 (3)     1568        beq     SetAddressDefault   ; Is it the end of the string?
E7A0 BDE221           (      monitor.asm):00687 (7)     1575        jsr     GetStrWord          ; Get address from the input buffer
E7A3 2405             (      monitor.asm):00688 (3)     1578        bcc     SetAddressError     ; Error in address
E7A5 FDEDA0           (      monitor.asm):00689 (5)     1583        std     CurrAddress         ; Save the address
E7A8 200B             (      monitor.asm):00690 (3)     1586        bra     SetAddressEnd
E7AA                  (      monitor.asm):00691                 SetAddressError:
E7AA BDE3B4           (      monitor.asm):00692 (7)     1593        jsr     ErrInvalidAddress   ; Display address error
E7AD 2006             (      monitor.asm):00693 (3)     1596        bra     SetAddressEnd
E7AF                  (      monitor.asm):00694                 SetAddressDefault:
E7AF CC0000           (      monitor.asm):00695 (3)     1599        ldd     #$0000
E7B2 FDEDA0           (      monitor.asm):00696 (5)     1604        std     CurrAddress         ; Set default address to $0000
E7B5                  (      monitor.asm):00697                 SetAddressEnd:
E7B5 3587             (      monitor.asm):00698 (4+5)   1613        puls    A,B,CC,PC
                      (      monitor.asm):00699                 
                      (      monitor.asm):00700                 ;  ____           _     ____                    _    
                      (      monitor.asm):00701                 ; / ___|    ___  | |_  | __ )    __ _   _ __   | | __
                      (      monitor.asm):00702                 ; \___ \   / _ \ | __| |  _ \   / _` | | '_ \  | |/ /
                      (      monitor.asm):00703                 ;  ___) | |  __/ | |_  | |_) | | (_| | | | | | |   < 
                      (      monitor.asm):00704                 ; |____/   \___|  \__| |____/   \__,_| |_| |_| |_|\_\
                      (      monitor.asm):00705                 ;
                      (      monitor.asm):00706                 ; Sets the current bank
                      (      monitor.asm):00707                 ; =====================
                      (      monitor.asm):00708                 ; Input:    X = Command line string
                      (      monitor.asm):00709                 
E7B7                  (      monitor.asm):00710                 SetBank:
E7B7 3403             (      monitor.asm):00711 (4+2)   1619        pshs    A,CC
E7B9 BDE7D4           (      monitor.asm):00712 (7)     1626        jsr     SkipSpaces          ; Remove leading spaces
E7BC A684             (      monitor.asm):00713 (4+0)   1630        lda     ,X                  ; Load first character
E7BE 270F             (      monitor.asm):00714 (3)     1633        beq     SetBankDefault      ; Is it the end of the string?
E7C0 BDE1E4           (      monitor.asm):00715 (7)     1640        jsr     GetStrByte          ; Get bank from the input buffer
E7C3 2405             (      monitor.asm):00716 (3)     1643        bcc     SetBankError        ; Error in byte
E7C5 B7EDA2           (      monitor.asm):00717 (4)     1647        sta     CurrBank            ; Save the bank
E7C8 2008             (      monitor.asm):00718 (3)     1650        bra     SetBankEnd
E7CA                  (      monitor.asm):00719                 SetBankError:
E7CA BDE3C1           (      monitor.asm):00720 (7)     1657        jsr     ErrInvalidByte      ; Display byte error
E7CD 2003             (      monitor.asm):00721 (3)     1660        bra     SetBankEnd
E7CF                  (      monitor.asm):00722                 SetBankDefault:
E7CF 7FEDA2           (      monitor.asm):00723 (6)     1666        clr     CurrBank            ; Set default bank to $00
E7D2                  (      monitor.asm):00724                 SetBankEnd:
E7D2 3583             (      monitor.asm):00725 (4+4)   1674        puls    A,CC,PC
                      (      monitor.asm):00726                 
                      (      monitor.asm):00727                 ;  ____    _      _           ____                                      
                      (      monitor.asm):00728                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):00729                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):00730                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):00731                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):00732                 ;                    |_|             |_|
                      (      monitor.asm):00733                 ;
                      (      monitor.asm):00734                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):00735                 ; ================================================================================
                      (      monitor.asm):00736                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):00737                 ; Output:   X = New position of pointer
                      (      monitor.asm):00738                 
                      (      monitor.asm):00739                     PRAGMA cc
                      (      monitor.asm):00740                 
E7D4                  (      monitor.asm):00741                 SkipSpaces:
E7D4 3403             (      monitor.asm):00742 (4+2)   6           pshs    A,CC
E7D6                  (      monitor.asm):00743                 SkipSpacesLoop:
E7D6 A684             (      monitor.asm):00744 (4+0)   10          lda     ,X                  ; Load character from string
E7D8 270B             (      monitor.asm):00745 (3)     13          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
E7DA 8120             (      monitor.asm):00746 (2)     15          cmpa    #' '                ; Is it a space?
E7DC 2607             (      monitor.asm):00747 (3)     18          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
E7DE 3001             (      monitor.asm):00748 (4+1)   23          leax    1,X                 ; Increment index for next character
E7E0 7CED9F           (      monitor.asm):00749 (6)     29          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
E7E3 20F1             (      monitor.asm):00750 (3)     32          bra     SkipSpacesLoop      ; Go and read another character
E7E5                  (      monitor.asm):00751                 SkipSpacesEnd:
E7E5 3583             (      monitor.asm):00752 (4+4)   40          puls    A,CC,PC
                      (         main.asm):00184                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
E7E7                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
E7E7 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E80F 0D0A             (         data.asm):00009                     .db     CR,LF
E811 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
E839 0D0A             (         data.asm):00011                     .db     CR,LF
E83B 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
E85E 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
E861 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
E884 0D0A0A2400       (         data.asm):00015                     .db     CR,LF,LF,'$',NULL
E889 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
E895 0D0A2400         (         data.asm):00017                     .db     CR,LF,'$',NULL
E899 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
E8B9 0D0A             (         data.asm):00019                     .db     CR,LF
E8BB 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E8E3 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
E8E7                  (         data.asm):00023                 CmdList:
E8E7 41444452         (         data.asm):00024                     .str    "ADDR"
E8EB FF               (         data.asm):00025                     .db     EOD
E8EC E797             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
E8EE 42414E4B         (         data.asm):00027                     .str    "BANK"
E8F2 FF               (         data.asm):00028                     .db     EOD
E8F3 E7B7             (         data.asm):00029                     .dw     SetBank             ; Run code at current or specified address
E8F5 44554D50         (         data.asm):00030                     .str    "DUMP"
E8F9 FF               (         data.asm):00031                     .db     EOD
E8FA E47A             (         data.asm):00032                     .dw     Dump                ; Display content of memory
E8FC 48454C50         (         data.asm):00033                     .str    "HELP"
E900 FF               (         data.asm):00034                     .db     EOD
E901 E402             (         data.asm):00035                     .dw     CmdHelp             ; Help for various commands
E903 4C4F4144         (         data.asm):00036                     .str    "LOAD"
E907 FF               (         data.asm):00037                     .db     EOD
E908 E4DE             (         data.asm):00038                     .dw     LoadIntelHex        ; Upload Intel Hex code
E90A 4D4150           (         data.asm):00039                     .str    "MAP"
E90D FF               (         data.asm):00040                     .db     EOD
E90E E5AD             (         data.asm):00041                     .dw     MemoryMap           ; Memory map of LogicSpark-09
E910 5045454B         (         data.asm):00042                     .str    "PEEK"
E914 FF               (         data.asm):00043                     .db     EOD
E915 E5C8             (         data.asm):00044                     .dw     Peek                ; Read a byte of memory
E917 504F4B45         (         data.asm):00045                     .str    "POKE"
E91B FF               (         data.asm):00046                     .db     EOD
E91C E5F2             (         data.asm):00047                     .dw     Poke                ; Write a byte of memory
E91E 524547           (         data.asm):00048                     .str    "REG"
E921 FF               (         data.asm):00049                     .db     EOD
E922 E632             (         data.asm):00050                     .dw     PrintRegisters      ; Print registers
E924 52554E           (         data.asm):00051                     .str    "RUN"
E927 FF               (         data.asm):00052                     .db     EOD
E928 E774             (         data.asm):00053                     .dw     Run                 ; Run code at current or specified address
E92A 00               (         data.asm):00054                     .db     NULL
                      (         data.asm):00055                 
E92B                  (         data.asm):00056                 CmdHelpMsg: ;                                        *                       *               *
E92B 4C697374206F6620 (         data.asm):00057                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
E942 0D0A             (         data.asm):00058                     .db     CR,LF
E944 20202D2041444452 (         data.asm):00059                     .str    "  - ADDR: Set current address"
     3A20536574206375
     7272656E74206164
     6472657373
E961 0D0A             (         data.asm):00060                     .db     CR,LF
E963 20202D2042414E4B (         data.asm):00061                     .str    "  - BANK: Set current bank"
     3A20536574206375
     7272656E74206261
     6E6B
E97D 0D0A             (         data.asm):00062                     .db     CR,LF
E97F 20202D2044554D50 (         data.asm):00063                     .str    "  - DUMP: Display memory content"
     3A20446973706C61
     79206D656D6F7279
     20636F6E74656E74
E99F 0D0A             (         data.asm):00064                     .db     CR,LF
E9A1 20202D2048454C50 (         data.asm):00065                     .str    "  - HELP: This help screen"
     3A20546869732068
     656C702073637265
     656E
E9BB 0D0A             (         data.asm):00066                     .db     CR,LF
E9BD 20202D204C4F4144 (         data.asm):00067                     .str    "  - LOAD: Load Intel Hex from console"
     3A204C6F61642049
     6E74656C20486578
     2066726F6D20636F
     6E736F6C65
E9E2 0D0A             (         data.asm):00068                     .db     CR,LF
E9E4 20202D204D41503A (         data.asm):00069                     .str    "  - MAP: Memory and I/O map of system"
     204D656D6F727920
     616E6420492F4F20
     6D6170206F662073
     797374656D
EA09 0D0A             (         data.asm):00070                     .db     CR,LF
EA0B 20202D205045454B (         data.asm):00071                     .str    "  - PEEK: Read a byte of memory"
     3A20526561642061
     2062797465206F66
     206D656D6F7279
EA2A 0D0A             (         data.asm):00072                     .db     CR,LF
EA2C 20202D20504F4B45 (         data.asm):00073                     .str    "  - POKE: Write a byte into memory"
     3A20577269746520
     6120627974652069
     6E746F206D656D6F
     7279
EA4E 0D0A             (         data.asm):00074                     .db     CR,LF
EA50 20202D205245473A (         data.asm):00075                     .str    "  - REG: Print the registers content"
     205072696E742074
     6865207265676973
     7465727320636F6E
     74656E74
EA74 0D0A             (         data.asm):00076                     .db     CR,LF
EA76 20202D2052554E3A (         data.asm):00077                     .str    "  - RUN: Execute code"
     2045786563757465
     20636F6465
EA8B 0D0A00           (         data.asm):00078                     .db     CR,LF,NULL
                      (         data.asm):00079                 
EA8E                  (         data.asm):00080                 ErrInvalidAddrMsg:
EA8E 496E76616C696420 (         data.asm):00081                     .str    "Invalid address!"
     6164647265737321
EA9E 0D0A00           (         data.asm):00082                     .db     CR,LF,NULL
                      (         data.asm):00083                 
EAA1                  (         data.asm):00084                 ErrInvalidByteMsg:
EAA1 496E76616C696420 (         data.asm):00085                     .str    "Invalid byte!"
     6279746521
EAAE 0D0A00           (         data.asm):00086                     .db     CR,LF,NULL
                      (         data.asm):00087                 
EAB1                  (         data.asm):00088                 ErrInvalidParamMsg:
EAB1 496E76616C696420 (         data.asm):00089                     .str    "Invalid parameter!"
     706172616D657465
     7221
EAC3 0D0A00           (         data.asm):00090                     .db     CR,LF,NULL
                      (         data.asm):00091                 
EAC6                  (         data.asm):00092                 ErrNoParameterMsg:
EAC6 4E6F20706172616D (         data.asm):00093                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
EAE1 0D0A00           (         data.asm):00094                     .db     CR,LF,NULL
                      (         data.asm):00095                 
EAE4                  (         data.asm):00096                 ErrInvalidCmdMsg:
EAE4 496E76616C696420 (         data.asm):00097                     .str    "Invalid command!"
     636F6D6D616E6421
EAF4 0D0A00           (         data.asm):00098                     .db     CR,LF,NULL
                      (         data.asm):00099                 
EAF7                  (         data.asm):00100                 ErrSyntaxErrorMsg:
EAF7 53796E7461782065 (         data.asm):00101                     .str    "Syntax error!"
     72726F7221
EB04 0D0A00           (         data.asm):00102                     .db     CR,LF,NULL
                      (         data.asm):00103                     
EB07                  (         data.asm):00104                 LoadStartMsg:
EB07 4C6F616420363330 (         data.asm):00105                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
EB29 0D0A             (         data.asm):00106                     .db     CR,LF
EB2B 5072657373204553 (         data.asm):00107                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
EB3F 0D0A00           (         data.asm):00108                     .db     CR,LF,NULL
                      (         data.asm):00109                 
EB42                  (         data.asm):00110                 LoadUserAbortErr:
EB42 5472616E73666572 (         data.asm):00111                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
EB5A 0D0A00           (         data.asm):00112                     .db     CR,LF,NULL
                      (         data.asm):00113                 
EB5D                  (         data.asm):00114                 LoadRecordErr:
EB5D 556E6B6E6F776E20 (         data.asm):00115                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
EB72 00               (         data.asm):00116                     .db     NULL
                      (         data.asm):00117                 
EB73                  (         data.asm):00118                 LoadFailedErr:
EB73 446F776E6C6F6164 (         data.asm):00119                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
EB98 0D0A00           (         data.asm):00120                     .db     CR,LF,NULL
                      (         data.asm):00121                 
EB9B                  (         data.asm):00122                 LoadSuccessMsg:
EB9B 446F776E6C6F6164 (         data.asm):00123                     .str    "Download Successful"
     2053756363657373
     66756C
EBAE 0D0A00           (         data.asm):00124                     .db     CR,LF,NULL
                      (         data.asm):00125                 
EBB1                  (         data.asm):00126                 MemoryMapMsg:
                      (         data.asm):00127                     ; Memory Map:
EBB1 4D656D6F7279204D (         data.asm):00128                     .str    "Memory Map:"
     61703A
EBBC 0D0A             (         data.asm):00129                     .db     CR,LF
EBBE 202052414D3A2020 (         data.asm):00130                     .str    "  RAM:       $0000-$"
     2020202020243030
     30302D24
EBD2 000D0A           (         data.asm):00131                     .db     NULL,CR,LF
EBD5 2020524F4D3A2020 (         data.asm):00132                     .str    "  ROM:       $"
     202020202024
EBE3 00               (         data.asm):00133                     .db     NULL
EBE4 2D2446444646     (         data.asm):00134                     .str    "-$FDFF"
EBEA 0D0A             (         data.asm):00135                     .db     CR,LF
EBEC 2020436F6E737420 (         data.asm):00136                     .str    "  Const RAM: $FE00-$FEFF"
     52414D3A20244645
     30302D2446454646
EC04 0D0A             (         data.asm):00137                     .db     CR,LF
EC06 2020492F4F207261 (         data.asm):00138                     .str    "  I/O range: $FF00-$FFEF"
     6E67653A20244646
     30302D2446464546
EC1E 0D0A             (         data.asm):00139                     .db     CR,LF
EC20 2020566563746F72 (         data.asm):00140                     .str    "  Vectors:   $FFF0-$FFFF"
     733A202020244646
     46302D2446464646
EC38 0D0A             (         data.asm):00141                     .db     CR,LF
EC3A 492F4F204D61703A (         data.asm):00142                     .str    "I/O Map:"
EC42 0D0A             (         data.asm):00143                     .db     CR,LF
EC44 2020524F4D204469 (         data.asm):00144                     .str    "  ROM Dissable: $FF08 (W)"
     737361626C653A20
     2446463038202857
     29
EC5D 0D0A             (         data.asm):00145                     .db     CR,LF
EC5F 2020496E742E2056 (         data.asm):00146                     .str    "  Int. Vector:  $FF09 (R)"
     6563746F723A2020
     2446463039202852
     29
EC78 0D0A             (         data.asm):00147                     .db     CR,LF
EC7A 2020414349413120 (         data.asm):00148                     .str    "  ACIA1 (USB):  $FF68-$FF6B"
     28555342293A2020
     24464636382D2446
     463642
EC95 0D0A00           (         data.asm):00149                     .db     CR,LF,NULL
                      (         main.asm):00185                 
                      (         main.asm):00186                 ;  ___           _                                          _         
                      (         main.asm):00187                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00188                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00189                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00190                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00191                 ;                                                  |_|
                      (         main.asm):00192                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00193                 
                      (         main.asm):00194                     PRAGMA cc
                      (         main.asm):00195                     
EC98                  (         main.asm):00196                 IllegalDiv0:
EC98 3B               (         main.asm):00197 (17+?)  17          rti
                      (         main.asm):00198                     
                      (         main.asm):00199                     PRAGMA cc
                      (         main.asm):00200                 
EC99                  (         main.asm):00201                 SoftInt3:
EC99 3B               (         main.asm):00202 (17+?)  17          rti
                      (         main.asm):00203                     
                      (         main.asm):00204                     PRAGMA cc
                      (         main.asm):00205                 
EC9A                  (         main.asm):00206                 SoftInt2:
EC9A 3B               (         main.asm):00207 (17+?)  17          rti
                      (         main.asm):00208                     
                      (         main.asm):00209                     PRAGMA cc
                      (         main.asm):00210                 
EC9B                  (         main.asm):00211                 SoftInt1:
EC9B 3B               (         main.asm):00212 (17+?)  17          rti
                      (         main.asm):00213                     
                      (         main.asm):00214                     PRAGMA cc
                      (         main.asm):00215                 
EC9C                  (         main.asm):00216                 FIRQInt:
EC9C 3B               (         main.asm):00217 (17+?)  17          rti
                      (         main.asm):00218                 
                      (         main.asm):00219                     PRAGMA cc
                      (         main.asm):00220                 
EC9D                  (         main.asm):00221                 IRQInt:
EC9D 3B               (         main.asm):00222 (17+?)  17          rti
                      (         main.asm):00223                 
                      (         main.asm):00224                     PRAGMA cc
                      (         main.asm):00225                 
EC9E                  (         main.asm):00226                 NMIInt:
EC9E 3B               (         main.asm):00227 (17+?)  17          rti
                      (         main.asm):00228                 
                      (         main.asm):00229                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00230                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00231                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00232                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00233                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00234                 ;          |___/
                      (         main.asm):00235                 ;
                      (         main.asm):00236                 ; System variables used by monitor subroutines
                      (         main.asm):00237                 ; ============================================
                      (         main.asm):00238                 
EC9F                  (         main.asm):00239                 InStrBuffer:    .DS     $100    ; String input for console input
ED9F                  (         main.asm):00240                 CmdErrorPtr:    .DS     1       ; Command prompt error pointer
EDA0                  (         main.asm):00241                 CurrAddress:    .DS     2       ; Current address, useful for monitor actions
EDA2                  (         main.asm):00242                 CurrBank:       .DS     1       ; Current bank number, relative to current address
EDA3                  (         main.asm):00243                 RunFlag         .DS     1       ; Run flag to indicate registers should be saved or not
EDA4                  (         main.asm):00244                 RegCC:          .DS     1       ; Register CC
EDA5                  (         main.asm):00245                 RegDP:          .DS     1       ; Register DP
EDA6                  (         main.asm):00246                 RegA:           .DS     1       ; Register A
EDA7                  (         main.asm):00247                 RegB:           .DS     1       ; Register B
EDA8                  (         main.asm):00248                 RegE:           .DS     1       ; Register E
EDA9                  (         main.asm):00249                 RegF:           .DS     1       ; Register F
EDAA                  (         main.asm):00250                 RegX:           .DS     2       ; Register X
EDAC                  (         main.asm):00251                 RegY:           .DS     2       ; Register Y
EDAE                  (         main.asm):00252                 RegU:           .DS     2       ; User stack
EDB0                  (         main.asm):00253                 RegS:           .DS     2       ; System stack
EDB2                  (         main.asm):00254                 RegPC:          .DS     2       ; Register PC
EDB4                  (         main.asm):00255                 TempByte:       .DS     1       ; Temporary storage byte (8-bit)
EDB5                  (         main.asm):00256                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
EDB5                  (         main.asm):00257                 TempW1:         .DS     1       ; Word MSB
EDB6                  (         main.asm):00258                 TempW2:         .DS     1       ; Word LSB
EDB7                  (         main.asm):00259                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
EDB7                  (         main.asm):00260                 TempQ1:         .DS     1       ; Quad High MSB
EDB8                  (         main.asm):00261                 TempQ2:         .DS     1       ; Quad Low MSB
EDB9                  (         main.asm):00262                 TempQ3:         .DS     1       ; Quad High LSB
EDBA                  (         main.asm):00263                 TempQ4:         .DS     1       ; Quad Low LSB
EDBB                  (         main.asm):00264                 VarEnd:
                      (         main.asm):00265                 
EDBB 5353535353535353 (         main.asm):00266                     FILL 'S',JmpStart-VarEnd    ; Clear area with $00
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353
                      (         main.asm):00267                 
                      (         main.asm):00268                 ;      _                             
                      (         main.asm):00269                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00270                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00271                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00272                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00273                 ;                             |_|    
                      (         main.asm):00274                 ;
                      (         main.asm):00275                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00276                 ; =======================================================
                      (         main.asm):00277                 
                      (         main.asm):00278                     ORG $FD00
                      (         main.asm):00279                 
FD00                  (         main.asm):00280                 JmpStart:
FD00 E15C             (         main.asm):00281                 JmpCls:             .DW     Cls
FD02 E1CE             (         main.asm):00282                 JmpDelChar:         .DW     DelChar
FD04 E1E4             (         main.asm):00283                 JmpGetStrByte:      .DW     GetStrByte
FD06 E1FB             (         main.asm):00284                 JmpGetStrNibble:    .DW     GetStrNibble
FD08 E221             (         main.asm):00285                 JmpGetStrWord:      .DW     GetStrWord
FD0A E230             (         main.asm):00286                 JmpInByte:          .DW     InByte
FD0C E1A5             (         main.asm):00287                 JmpInChar:          .DW     InChar
FD0E E1B0             (         main.asm):00288                 JmpInCharNW:        .DW     InCharNW
FD10 E241             (         main.asm):00289                 JmpInStr:           .DW     InStr
FD12 E2B0             (         main.asm):00290                 JmpInWord:          .DW     InWord
FD14 E1BF             (         main.asm):00291                 JmpOutChar:         .DW     OutChar
FD16 E2CF             (         main.asm):00292                 JmpOutByte:         .DW     OutByte
FD18 E2F1             (         main.asm):00293                 JmpOutCRLF:         .DW     OutCRLF
FD1A E2FF             (         main.asm):00294                 JmpOutNibble:       .DW     OutNibble
FD1C E317             (         main.asm):00295                 JmpOutStr:          .DW     OutStr
FD1E E342             (         main.asm):00296                 JmpOutWord:         .DW     OutWord
FD20 E089             (         main.asm):00297                 JmpAscToBinNibble:  .DW     AscToBinNibble
FD22 E09C             (         main.asm):00298                 JmpAscToBinByte:    .DW     AscToBinByte
FD24 E0B2             (         main.asm):00299                 JmpAscToBinWord:    .DW     AscToBinWord
FD26 E0C4             (         main.asm):00300                 JmpBinToAscNibble:  .DW     BinToAscNibble
FD28 E0D4             (         main.asm):00301                 JmpBinToAscByte:    .DW     BinToAscByte
FD2A E0F0             (         main.asm):00302                 JmpBinToAscWord:    .DW     BinToAscWord
FD2C E101             (         main.asm):00303                 JmpBinToBcd:        .DW     BinToBcd
FD2E E14E             (         main.asm):00304                 JmpUpperCase:       .DW     UpperCase
FD30                  (         main.asm):00305                 JmpTableEnd:
                      (         main.asm):00306                 
FD30 4A4A4A4A4A4A4A4A (         main.asm):00307                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
                      (         main.asm):00308                 
                      (         main.asm):00309                 ;   ____                         _                     _   
                      (         main.asm):00310                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00311                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00312                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00313                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00314                 ;
                      (         main.asm):00315                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00316                 ; =====================================================================
                      (         main.asm):00317                 
                      (         main.asm):00318                     PRAGMA cc
                      (         main.asm):00319                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00320                     
FE00                  (         main.asm):00321                 ConstRAM:
FE00                  (         main.asm):00322                     .DS     256                 
                      (         main.asm):00323                 
                      (         main.asm):00324                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00325                 
FF00                  (         main.asm):00326                 InputOutputRange:
FF00                  (         main.asm):00327                     .DS     240
                      (         main.asm):00328                 
                      (         main.asm):00329                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00330                 
FFF0                  (         main.asm):00331                 Vectors:
FFF0 EC98             (         main.asm):00332                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 EC99             (         main.asm):00333                     .DW     SoftInt3            ; SWI3
FFF4 EC9A             (         main.asm):00334                     .DW     SoftInt2            ; SWI2
FFF6 EC9B             (         main.asm):00335                     .DW     SoftInt1            ; SWI
FFF8 EC9C             (         main.asm):00336                     .DW     FIRQInt             ; FIRQ
FFFA EC9D             (         main.asm):00337                     .DW     IRQInt              ; IRQ
FFFC EC9E             (         main.asm):00338                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00339                     .DW     Reset               ; RESET
                      (         main.asm):00340                 
                      (         main.asm):00341                     END

Symbol Table:
[ G] AscToBinByte                     E09C
[ G] AscToBinNibble                   E089
[ G] AscToBinNibbleAlpha              E096
[ G] AscToBinNibbleEnd                E098
[ G] AscToBinWord                     E0B2
[ G] BinToAscByte                     E0D4
[ G] BinToAscNibble                   E0C4
[ G] BinToAscNibbleAlpha              E0D0
[ G] BinToAscNibbleEnd                E0D2
[ G] BinToAscWord                     E0F0
[ G] BinToBcd                         E101
[ G] BootMsg                          E7E7
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E15C
[ G] CmdErrorPtr                      ED9F
[ G] CmdHelp                          E402
[ G] CmdHelpMsg                       E92B
[ G] CmdList                          E8E7
[ G] CmdParse                         E409
[ G] CmdParseChar                     E419
[ G] CmdParseEnd                      E456
[ G] CmdParseExecute                  E446
[ G] CmdParseNone                     E453
[ G] CmdParseSkip                     E42C
[ G] CmdParseSkipLoop                 E432
[ G] CmdParseValid                    E43E
[ G] CmdPrompt                        E458
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E192
[ G] Com1RxNoWait                     E1B0
[ G] Com1RxNoWaitEnd                  E1BE
[ G] Com1RxWait                       E1A5
[ G] Com1Tx                           E1BF
[ G] Com1TxNotReady                   E1C1
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      EDA0
[ G] CurrBank                         EDA2
[ G] DelChar                          E1CE
[ G] DelCharLoop                      E1D2
[ G] Dump                             E47A
[ G] DumpAddr                         E491
[ G] DumpByte                         E4A2
[ G] DumpChar                         E4BB
[ G] DumpCharDot                      E4C6
[ G] DumpCharPrint                    E4C8
[ G] DumpDisplay                      E489
[ G] DumpEnd                          E4DD
[ G] DumpInvalidAddress               E4DA
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E3B4
[ G] ErrInvalidAddrMsg                EA8E
[ G] ErrInvalidByte                   E3C1
[ G] ErrInvalidByteMsg                EAA1
[ G] ErrInvalidCmdMsg                 EAE4
[ G] ErrInvalidCommand                E3CE
[ G] ErrInvalidParameter              E3DB
[ G] ErrInvalidParamMsg               EAB1
[ G] ErrNoParameter                   E3E8
[ G] ErrNoParameterMsg                EAC6
[ G] ErrorPointerLoop                 E3A2
[ G] ErrPointer                       E39B
[ G] ErrSyntaxError                   E3F5
[ G] ErrSyntaxErrorMsg                EAF7
[ G] ESC                              001B
[ G] FIRQInt                          EC9C
[ G] GetStrByte                       E1E4
[ G] GetStrByteEnd                    E1F9
[ G] GetStrNibble                     E1FB
[ G] GetStrNibbleEnd                  E21B
[ G] GetStrNibbleError                E212
[ G] GetStrNibbleGood                 E216
[ G] GetStrWord                       E221
[ G] GetStrWordEnd                    E22F
[ G] IllegalDiv0                      EC98
[ G] InByte                           E230
[ G] InChar                           E1A5
[ G] InCharNW                         E1B0
[ G] Init                             E000
[ G] InputOutputRange                 FF00
[ G] InStr                            E241
[ G] InStrBackspace                   E261
[ G] InStrBuffer                      EC9F
[ G] InStrClearCarry                  E2AA
[ G] InStrEnd                         E2AC
[ G] InStrEscape                      E278
[ G] InStrPrintCR                     E29A
[ G] InStrReadChar                    E24B
[ G] InStrStoreChar                   E291
[ G] IntVector                        FF09
[ G] InWord                           E2B0
[ G] IRQInt                           EC9D
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD30
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E585
[ G] LoadChecksum                     E552
[ G] LoadData                         E542
[ G] LoadEnd                          E5A9
[ G] LoadEOF                          E571
[ G] LoadFailedErr                    EB73
[ G] LoadFailure                      E566
[ G] LoadIntelHex                     E4DE
[ G] LoadRecord                       E4EA
[ G] LoadRecordErr                    EB5D
[ G] LoadRecordType                   E525
[ G] LoadStart                        E4FA
[ G] LoadStartMsg                     EB07
[ G] LoadSuccess                      E592
[ G] LoadSuccessMsg                   EB9B
[ G] LoadUserAbortErr                 EB42
[ G] Main                             E064
[ G] MainRunExec                      E07F
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E5AD
[ G] MemoryMapMsg                     EBB1
[ G] NMIInt                           EC9E
[ G] NULL                             0000
[ G] OutByte                          E2CF
[ G] OutByteDigit1NLZ                 E2EA
[ G] OutByteLZ                        E2CF
[ G] OutByteNLZ                       E2DE
[ G] OutChar                          E1BF
[ G] OutCRLF                          E2F1
[ G] OutNibble                        E2FF
[ G] OutNibbleLSB                     E2FF
[ G] OutNibbleMSB                     E309
[ G] OutStr                           E317
[ G] OutStrEnd                        E326
[ G] OutStrLoop                       E319
[ G] OutStrLZ                         E317
[ G] OutStrNLZ                        E328
[ G] OutStrNLZEnd                     E340
[ G] OutStrNLZLoop                    E32B
[ G] OutStrNLZPrintChar               E339
[ G] OutWord                          E342
[ G] OutWordNLZ                       E35F
[ G] OutWordNLZ2                      E372
[ G] OutWordNLZ3                      E382
[ G] OutWordNLZ4                      E392
[ G] OutWordNLZp2                     E37D
[ G] OutWordNLZp3                     E38D
[ G] Peek                             E5C8
[ G] PeekDisplay                      E5D7
[ G] PeekEnd                          E5F1
[ G] PeekInvalidAddr                  E5EE
[ G] Poke                             E5F2
[ G] PokeEnd                          E631
[ G] PokeInvalidAddress               E629
[ G] PokeInvalidByte                  E624
[ G] PokeNoParameters                 E62E
[ G] PrintRegisters                   E632
[ G] PromptSize                       0009
[ G] PullRegisters                    E755
[ G] PushRegisters                    E725
[ G] RegA                             EDA6
[ G] RegB                             EDA7
[ G] RegCC                            EDA4
[ G] RegDP                            EDA5
[ G] RegE                             EDA8
[ G] RegF                             EDA9
[ G] RegPC                            EDB2
[ G] RegS                             EDB0
[ G] RegU                             EDAE
[ G] RegX                             EDAA
[ G] RegY                             EDAC
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0004
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              E774
[ G] RunEnd                           E796
[ G] RunError                         E793
[ G] RunExecute                       E789
[ G] RunFlag                          EDA3
[ G] RunGetAddress                    E77B
[ G] RunValidate                      E783
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       E797
[ G] SetAddressDefault                E7AF
[ G] SetAddressEnd                    E7B5
[ G] SetAddressError                  E7AA
[ G] SetBank                          E7B7
[ G] SetBankDefault                   E7CF
[ G] SetBankEnd                       E7D2
[ G] SetBankError                     E7CA
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       E7D4
[ G] SkipSpacesEnd                    E7E5
[ G] SkipSpacesLoop                   E7D6
[ G] SoftInt1                         EC9B
[ G] SoftInt2                         EC9A
[ G] SoftInt3                         EC99
[ G] SPACE                            0020
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TempByte                         EDB4
[ G] TempQ1                           EDB7
[ G] TempQ2                           EDB8
[ G] TempQ3                           EDB9
[ G] TempQ4                           EDBA
[ G] TempQuad                         EDB7
[ G] TempW1                           EDB5
[ G] TempW2                           EDB6
[ G] TempWord                         EDB5
[ G] UpperCase                        E14E
[ G] UpperCaseEnd                     E15A
[ G] UsrStack                         FA00
[ G] VarEnd                           EDBB
[ G] Vectors                          FFF0
