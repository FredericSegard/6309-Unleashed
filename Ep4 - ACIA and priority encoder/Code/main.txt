Sections:
00: "seg0" (0-8000)
01: "seg8000" (8000-FFF0)
02: "segfff0" (FFF0-0)


Source: "main.asm"
                        	     1: 
                        	     2: ;         ::::::::       ::::::::       :::::::       :::::::: 
                        	     3: ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                        	     4: ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                        	     5: ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                        	     6: ;    +#+    +#+            +#+     +#+   +#+            +#+    
                        	     7: ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                        	     8: ;   ########       ########       #######       ########       
                        	     9: 
                        	    10: ; *********************************************************************************************************************
                        	    11: ; * 6309 project, code named LogicSpark-09
                        	    12: ; *
                        	    13: ; * https://www.youtube.com/@microhobbyist
                        	    14: ; * https://github.com/FredericSegard
                        	    15: ; *
                        	    16: ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                        	    17: ; *
                        	    18: ; * This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
                        	    19: ; * Public License as published by the Free Software Foundation. You can use all or part of the code, regardless of
                        	    20: ; * the version. But there is no warrenty of any kind.
                        	    21: ; *
                        	    22: ; * Reference:	ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                        	    23: ; *				Editor tab-stops set to 4
                        	    24: ; *				Assembler: VASM  (vasm6809_oldstyle -6309 -dotdir -chklabels -nocase %1.asm -Fbin -o %1.out -L %1.txt)
                        	    25: ; *
                        	    26: ; * Version 0.1 (Jan 10th 2024)
                        	    27: ; *********************************************************************************************************************
                        	    28: 
                        	    29: 
                        	    30: ; ---------------
                        	    31: ; *** EQUATES ***
                        	    32: ; ---------------
                        	    33: 
                        	    34: ; I/O addresses
                        	    35: ;--------------
                        	    36: RomDisable		= $FF08			; ROM disable (poke any value)
                        	    37: 
                        	    38: ; ---------------------------------------------------------------------------------------------------------------------
                        	    39: 
                        	    40: 	org		$0000
                        	    41: 
                        	    42: RESET:
                        	    43: 
00:0000 1A50            	    44: 	orcc	#$50				; Disable interrupts, just in case
00:0002 013D01          	    45: 	ldmd	#$01				; Begin processing in 6309 native mode
                        	    46: 
                        	    47: 
                        	    48: ; -------------------
                        	    49: ; *** SHADOW COPY ***
                        	    50: ; -------------------
                        	    51: ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                        	    52: ; until RomDisable has been written to, at which point ROM is disabled until reset.
                        	    53: 
                        	    54: ShadowCopy:
                        	    55: 
                        	    56: 	; Copies everything, except the IO region and vectors ($0000-$FF00)
00:0005 8E0000          	    57: 	ldx		#$0000				; Source address: Read only ROM
00:0008 108E0000        	    58: 	ldy		#$0000				; Destination address: Write only RAM
00:000C 1086FF00        	    59: 	ldw		#$FF00				; Number of bytes to copy (64K - 256 bytes)
00:0010 113812          	    60: 	tfm		X+,Y+				; Transfer data and increment pointers
                        	    61: 	
                        	    62: 	; Copies only the vectors ($FFF0-$FFFF)
00:0013 8EFFF0          	    63: 	ldx		#$FFF0				; Source address: Read only ROM
00:0016 108EFFF0        	    64: 	ldy		#$FFF0				; Destination address: Write only RAM
00:001A 10860010        	    65: 	ldw		#16					; Number of bytes to copy (8x 16-bit vectors)
00:001E 113812          	    66: 	tfm		X+,Y+				; Transfer data and increment pointers
                        	    67: 
                        	    68: 	; Disable ROM and make RAM Read/Write.
00:0021 B7FF08          	    69: 	sta		RomDisable			; Poke any value to disable the ROM
00:0024 7E8000          	    70: 	jmp		Init
                        	    71: 
                        	    72: ShadowCopyEnd:
                        	    73: 
00:0027 FF              	    74: 	ds		Init-ShadowCopyEnd,$FF ; Fill memory with $FF for rapid programming
00:0028 *
                        	    75: 
                        	    76: 
                        	    77: ; ---------------------------------------------------------------------------------------------------------------------
                        	    78: 
                        	    79: 	org		$8000
                        	    80: 
                        	    81: 
                        	    82: Init:
01:8000 20FE            	    83: 	bra		Init				; Currently does nothing. WiP
                        	    84: 
                        	    85: InitEnd:
01:8002 FF              	    86: 	ds		Vectors-InitEnd,$FF	; Fill memory with $FF for rapid programming
01:8003 *
                        	    87: 
                        	    88: ; ---------------------------------------------------------------------------------------------------------------------
                        	    89: 
                        	    90: 
                        	    91: ; ---------------
                        	    92: ; *** VECTORS ***
                        	    93: ; ---------------
                        	    94: 
                        	    95: 	org		$FFF0
                        	    96: 
                        	    97: Vectors:
02:FFF0 0000            	    98: 	dw		$0000	; Illegal Opcode and Division by Zero Trap (exception)
02:FFF2 0000            	    99: 	dw		$0000	; SWI3
02:FFF4 0000            	   100: 	dw		$0000	; SWI2
02:FFF6 0000            	   101: 	dw		$0000	; SWI
02:FFF8 0000            	   102: 	dw		$0000	; FIRQ
02:FFFA 0000            	   103: 	dw		$0000	; IRQ
02:FFFC 0000            	   104: 	dw		$0000	; NMI
02:FFFE 0000            	   105: 	dw		$0000	; RESET
                        	   106: 
                        	   107: 	end
                        	   108: 
                        	   109: 
                        	   110: 
                        	   111: 
                        	   112: 
                        	   113: 
                        	   114: 
                        	   115: 
                        	   116: 
                        	   117: 
                        	   118: 
                        	   119: 


Symbols by name:
Init                             A:8000
InitEnd                          A:8002
RESET                            A:0000
RomDisable                       E:FF08
ShadowCopy                       A:0005
ShadowCopyEnd                    A:0027
Vectors                          A:FFF0

Symbols by value:
0000 RESET
0005 ShadowCopy
0027 ShadowCopyEnd
8000 Init
8002 InitEnd
FF08 RomDisable
FFF0 Vectors
