                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; ****************************************************************************************
                      (         main.asm):00029         
                      (         main.asm):00030         ; Revision
                      (         main.asm):00031         ; --------
     0000             (         main.asm):00032         RevMajor    EQU $00             ; Major revision number: 0 = Breadboard, 1+ = PCB revision
     0004             (         main.asm):00033         RevMinor    EQU $0004           ; Minor revision number
                      (         main.asm):00034         
                      (         main.asm):00035         ; Keystrokes and delimiters
                      (         main.asm):00036         ; -------------------------
     0000             (         main.asm):00037         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00038         BS          EQU $08             ; Backspace
     0009             (         main.asm):00039         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00040         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00041         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00042         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00043         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00044         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00045         
                      (         main.asm):00046         ; Misc
                      (         main.asm):00047         ; ----
     E000             (         main.asm):00048         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00049         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     FC00             (         main.asm):00050         SysStack    EQU $FC00           ; Position system stack before Constant RAM space
     FA00             (         main.asm):00051         UsrStack    EQU $FA00           ; Position user stack before system stack
     0050             (         main.asm):00052         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00053         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00054         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00055         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00056         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00057         
                      (         main.asm):00058         ; I/O addresses
                      (         main.asm):00059         ; -------------
     FF08             (         main.asm):00060         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00061         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
                      (         main.asm):00062         
                      (         main.asm):00063         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00064         
                      (         main.asm):00065             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00066             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00067                 
                      (         main.asm):00068                     ORG $0000                   ; Start of code
                      (         main.asm):00069                 
0000                  (         main.asm):00070                 Reset:
                      (         main.asm):00071                 
0000 1A50             (         main.asm):00072 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00073 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00074                 
                      (         main.asm):00075                 ; -------------------
                      (         main.asm):00076                 ; *** SHADOW COPY ***
                      (         main.asm):00077                 ; -------------------
                      (         main.asm):00078                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00079                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00080                 
0005                  (         main.asm):00081                 ShadowCopy:
                      (         main.asm):00082                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00083 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00084 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00085 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00086 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00087                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00088                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00089 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00090 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00091 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00092 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00093 (3)     44          jmp     Init
                      (         main.asm):00094                 
0024                  (         main.asm):00095                 ShadowEnd:
0024 0000000000000000 (         main.asm):00096                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00097                 
                      (         main.asm):00098                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00099                 
                      (         main.asm):00100                     PRAGMA cc
                      (         main.asm):00101                     
                      (         main.asm):00102                     ORG RomStart
                      (         main.asm):00103                 
E000                  (         main.asm):00104                 Init:
E000 B7FF08           (         main.asm):00105 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00106                 
                      (         main.asm):00107                     ; Clear the shadow copy code
E003 8E0100           (         main.asm):00108 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00109 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00110 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00111 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00112                 
                      (         main.asm):00113                     ; Configure the stacks
E011 CEFA00           (         main.asm):00114 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFEE6B           (         main.asm):00115 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00116 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFEE6D         (         main.asm):00117 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00118                     
                      (         main.asm):00119                     ; Initialize peripherals
E01F BDE191           (         main.asm):00120 (7)     46          jsr     Com1Init            ; Initialize ACIA1
                      (         main.asm):00121                     
                      (         main.asm):00122                     ; Print boot message
E022 BDE15B           (         main.asm):00123 (7)     53          jsr     Cls                 ; Clears the screen
E025 8EE8A4           (         main.asm):00124 (3)     56          ldx     #BootMsg            ; Print title
E028 BDE3CE           (         main.asm):00125 (7)     63          jsr     OutStr              ;
E02B 8600             (         main.asm):00126 (2)     65          lda     #RevMajor           ; Print major version
E02D BDE395           (         main.asm):00127 (7)     72          jsr     OutByteNLZ          ;
E030 862E             (         main.asm):00128 (2)     74          lda     #'.'                ; Print dot
E032 BDE1BE           (         main.asm):00129 (7)     81          jsr     OutChar             ;
E035 CC0004           (         main.asm):00130 (3)     84          ldd     #RevMinor           ; Print minor version
E038 BDE416           (         main.asm):00131 (7)     91          jsr     OutWordNLZ          ;
E03B BDE3CE           (         main.asm):00132 (7)     98          jsr     OutStr              ;
E03E CCE000           (         main.asm):00133 (3)     101         ldd     #RomStart           ; Free RAM available
E041 BDE3F9           (         main.asm):00134 (7)     108         jsr     OutWord
E044 BDE3CE           (         main.asm):00135 (7)     115         jsr     OutStr
E047 CC0E88           (         main.asm):00136 (3)     118         ldd     #JmpStart-VarEnd    ; Free shadow RAM left
E04A BDE3F9           (         main.asm):00137 (7)     125         jsr     OutWord
E04D BDE3CE           (         main.asm):00138 (7)     132         jsr     OutStr
                      (         main.asm):00139                 
                      (         main.asm):00140                     ; Clear the registers
E050 104F             (         main.asm):00141 (2)     134         clrd                        ; Clear the D register (A & B)
E052 105F             (         main.asm):00142 (2)     136         clrw                        ; Clear the W register (E & F)
E054 8E0000           (         main.asm):00143 (3)     139         ldx     #$0000              ; Clear X register
E057 108E0000         (         main.asm):00144 (4)     143         ldy     #$0000              ; Clear Y register
                      (         main.asm):00145                 
                      (         main.asm):00146                     ; Clears some variables
E05B FDEE5D           (         main.asm):00147 (5)     148         std     CurrAddress
E05E 7FEE5F           (         main.asm):00148 (6)     154         clr     CurrBank
E061 7FEE60           (         main.asm):00149 (6)     160         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00150                     
                      (         main.asm):00151                     PRAGMA cc
                      (         main.asm):00152                 
E064                  (         main.asm):00153                 Main:
E064 BDE50F           (         main.asm):00154 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E067 C646             (         main.asm):00155 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E069 8EED5C           (         main.asm):00156 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E06C BDE2F8           (         main.asm):00157 (7)     19          jsr     InStr               ; Read the a string
E06F 24F3             (         main.asm):00158 (3)     22          bcc     Main                ; If no data in string then bypass parser
E071 BDE4C0           (         main.asm):00159 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00160                     ; Save registers after execution of a run command
E074 3401             (         main.asm):00161 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E076 7DEE60           (         main.asm):00162 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E079 2604             (         main.asm):00163 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E07B 3501             (         main.asm):00164 (4+1)   47          puls    CC                  ; Restore CC
E07D 20E5             (         main.asm):00165 (3)     50          bra     Main                ; Loop back, without recording the resistors
E07F                  (         main.asm):00166                 MainRunExec:
E07F 3501             (         main.asm):00167 (4+1)   55          puls    CC                  ; Restore CC
E081 BDE7E2           (         main.asm):00168 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E084 7FEE60           (         main.asm):00169 (6)     68          clr     RunFlag             ; Reset run flag
E087 20DB             (         main.asm):00170 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00171                 
                      (         main.asm):00172                 ;  ___                  _               _              
                      (         main.asm):00173                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00174                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00175                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00176                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00177                 ;
                      (         main.asm):00178                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00179                 ; ---------------------------------------------------------------
                      (         main.asm):00180                 
                      (         main.asm):00181                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E089                  (      convert.asm):00029                 AscToBinNibble:
E089 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E08B BDE14D           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E08E 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E090 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E092 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E094 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E096                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E096 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E098                  (      convert.asm):00038                 AscToBinNibbleEnd
E098 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E09A 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E09C                  (      convert.asm):00050                 AscToBinByte:
E09C 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E09E BDE089           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E0A1 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A2 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A3 48               (      convert.asm):00055 (1)     15          asla                        ;
E0A4 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0A5 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0A7 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0A9 BDE089           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0AC 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0AF 5F               (      convert.asm):00061 (1)     35          clrb
E0B0 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B2                  (      convert.asm):00072                 AscToBinWord:
E0B2 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0B4 BDE09C           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0B7 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0B9 BDE09C           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BC 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0BE 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0C0 105F             (      convert.asm):00079 (2)     34          clrw
E0C2 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0C4                  (      convert.asm):00098                 BinToAscNibble:
E0C4 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0C6 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0C8 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0CA 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0CC 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0CE 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0D0                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0D0 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D2                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D2 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0D4                  (      convert.asm):00117                 BinToAscByte:
E0D4 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0D6 1038             (      convert.asm):00119 (6)     11          pshsw
E0D8 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0DA 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0DB 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0DC 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0DD 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0DE BDE0C4           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0E1 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E3 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0E5 BDE0C4           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0E8 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0EA 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0EC 1039             (      convert.asm):00131 (6)     57          pulsw
E0EE 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0F0                  (      convert.asm):00141                 BinToAscWord:
E0F0 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F2 BDE0D4           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0F5 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0F7 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0F9 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E0FB BDE0D4           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E0FE 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E100 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data (To be coded: 24 bit)
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E101                  (      convert.asm):00167                 BinToBcd:
E101 3401             (      convert.asm):00168 (4+1)   5           pshs    CC
E103 7FEE74           (      convert.asm):00169 (6)     11          clr     TempQ1              ; Clear Q's High MSB byte
E106 105F             (      convert.asm):00170 (2)     13          clrw                        ; Clear Q's MSB
                      (      convert.asm):00171                     ; Calculate 10,000's digit
E108 1E60             (      convert.asm):00172 (5)     18          exg     W,D                 ; Q = DW
E10A 118E2710         (      convert.asm):00173 (34)    52          divq    #10000              ; Divide Q by 10,000: Quotient in W, Remainder in D
E10E 10B7EE75         (      convert.asm):00174 (6)     58          stw     TempQ2              ; Save 10,000's digit to variable
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E112 1F06             (      convert.asm):00176 (4)     62          tfr     D,W                 ; Transfer Remainder to LSB
E114 104F             (      convert.asm):00177 (2)     64          clrd                        ; Clear MSB
E116 118E03E8         (      convert.asm):00178 (34)    98          divq    #1000               ; Divide Q by 1,000: Quotient in W, Remainder in D
E11A 1E06             (      convert.asm):00179 (5)     103         exg     D,W                 ; Exchange registers: Quotien is now in D, and remainder in W
E11C 1048             (      convert.asm):00180 (2)     105         lsld                        ; Move 1,000's digit to high nibble
E11E 1048             (      convert.asm):00181 (2)     107         lsld                        ;   Had to exchange D <-> W
E120 1048             (      convert.asm):00182 (2)     109         lsld                        ;   in order for lsld to work
E122 1048             (      convert.asm):00183 (2)     111         lsld                        ;
E124 F7EE76           (      convert.asm):00184 (4)     115         stb     TempQ3              ; Save 1,000's digit for later or'ing with the 100's
                      (      convert.asm):00185                     ; Calculate 100's digit
E127 1F60             (      convert.asm):00186 (4)     119         tfr     W,D                 ; Transfer remainder to D
E129 118D64           (      convert.asm):00187 (25)    144         divd    #100                ; Divide D by 100: Quotient in B, Remainder in A
E12C 3402             (      convert.asm):00188 (4+1)   149         pshs    A                   ; Save for 10's and 1's 
E12E B6EE76           (      convert.asm):00189 (4)     153         lda     TempQ3              ; Load quotien from the 1000's
E131 103598           (      convert.asm):00190 (4)     157         orr     B,A                 ; Merge 1000's and 100's digits together
E134 B7EE76           (      convert.asm):00191 (4)     161         sta     TempQ3              ; Save result to variable
                      (      convert.asm):00192                     ; Calculate the 10's and 1's digit
E137 3504             (      convert.asm):00193 (4+1)   166         puls    B                   ; Place remainder in LSB of D
E139 4F               (      convert.asm):00194 (1)     167         clra                        ; Clear MSB of D
E13A 118D0A           (      convert.asm):00195 (25)    192         divd    #10                 ; Divide D by 10: Quotient in B, Remainder in A
E13D 58               (      convert.asm):00196 (1)     193         lslb                        ; Move 10's digit to high nibble
E13E 58               (      convert.asm):00197 (1)     194         lslb                        ;
E13F 58               (      convert.asm):00198 (1)     195         lslb                        ;
E140 58               (      convert.asm):00199 (1)     196         lslb                        ;
E141 103598           (      convert.asm):00200 (4)     200         orr     B,A                 ; Merge 10's and 1's digits together
E144 B7EE77           (      convert.asm):00201 (4)     204         sta     TempQ4              ; Save result to Variable
E147 10FCEE74         (      convert.asm):00202 (8)     212         ldq     TempQuad            ; Load Quad result
E14B 3581             (      convert.asm):00203 (4+3)   219         puls    CC,PC
                      (      convert.asm):00204                 
                      (      convert.asm):00205                 ;  _   _                                  ____                      
                      (      convert.asm):00206                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00207                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00208                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00209                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00210                 ;         |_|     |_|                                               
                      (      convert.asm):00211                 ;
                      (      convert.asm):00212                 ; Convert character in A to uppercase
                      (      convert.asm):00213                 ; ===================================
                      (      convert.asm):00214                 ; Input:    A = anycase
                      (      convert.asm):00215                 ; Output:   A = UPPERCASE
                      (      convert.asm):00216                 
                      (      convert.asm):00217                     PRAGMA cc
                      (      convert.asm):00218                 
E14D                  (      convert.asm):00219                 UpperCase:
E14D 3401             (      convert.asm):00220 (4+1)   5           pshs    CC
E14F 8161             (      convert.asm):00221 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E151 2D06             (      convert.asm):00222 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E153 817A             (      convert.asm):00223 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E155 2E02             (      convert.asm):00224 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E157 8020             (      convert.asm):00225 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E159                  (      convert.asm):00226                 UpperCaseEnd:
E159 3581             (      convert.asm):00227 (4+3)   24          puls    CC,PC
                      (      convert.asm):00228                     
                      (         main.asm):00182                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E15B                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E15B 3406             (           io.asm):00058 (4+2)   6           pshs    D
E15D 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E15F BDE1BE           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E162 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E164 BDE1BE           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E167 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E169 BDE1BE           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E16C 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E16E BDE1BE           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E171 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E173 BDE1BE           (           io.asm):00069 (7)     51          jsr     OutChar
E176 865B             (           io.asm):00070 (2)     53          lda     #'['
E178 BDE1BE           (           io.asm):00071 (7)     60          jsr     OutChar
E17B 8631             (           io.asm):00072 (2)     62          lda     #'1'
E17D BDE1BE           (           io.asm):00073 (7)     69          jsr     OutChar
E180 863B             (           io.asm):00074 (2)     71          lda     #';'
E182 BDE1BE           (           io.asm):00075 (7)     78          jsr     OutChar
E185 8631             (           io.asm):00076 (2)     80          lda     #'1'
E187 BDE1BE           (           io.asm):00077 (7)     87          jsr     OutChar
E18A 8648             (           io.asm):00078 (2)     89          lda     #'H'
E18C BDE1BE           (           io.asm):00079 (7)     96          jsr     OutChar
E18F 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E191                  (           io.asm):00094                 Com1Init:
E191 3402             (           io.asm):00095 (4+1)   5           pshs    A
E193 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E195 B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E198 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E19A B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E19D 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E19F B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A2 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1A4                  (           io.asm):00122                 InChar:
E1A4                  (           io.asm):00123                 Com1RxWait:
E1A4 B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1A7 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1A9 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1AB B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1AE 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1AF                  (           io.asm):00137                 InCharNW:
E1AF                  (           io.asm):00138                 Com1RxNoWait:
E1AF 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1B1 B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1B4 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1B6 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1B8 B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1BB 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1BD                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1BD 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1BE                  (           io.asm):00168                 OutChar:
E1BE                  (           io.asm):00169                 Com1Tx:
E1BE 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1C0                  (           io.asm):00171                 Com1TxNotReady:
E1C0 B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C3 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1C5 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1C7 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1C9 B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1CC 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _    ____   _                    
                      (           io.asm):00180                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00181                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00182                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00183                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00184                 ;
                      (           io.asm):00185                 ; Delete a number of characters
                      (           io.asm):00186                 ; =============================
                      (           io.asm):00187                 ; Input:    B = Number of characters to delete
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1CD                  (           io.asm):00191                 DelChar:
E1CD 3406             (           io.asm):00192 (4+2)   6           pshs    D
E1CF 8608             (           io.asm):00193 (2)     8           lda     #BS                 ; Load the backspace character
E1D1                  (           io.asm):00194                 DelCharLoop:
E1D1 BDE1BE           (           io.asm):00195 (7)     15          jsr     OutChar             ; Print the backspace character
E1D4 8620             (           io.asm):00196 (2)     17          lda     #' '                ; Load the space character
E1D6 BDE1BE           (           io.asm):00197 (7)     24          jsr     OutChar             ; Print it the space character
E1D9 8608             (           io.asm):00198 (2)     26          lda     #BS                 ; Load the backspace character
E1DB BDE1BE           (           io.asm):00199 (7)     33          jsr     OutChar             ; Print it the backspace character
E1DE 5A               (           io.asm):00200 (1)     34          decb                        ; Decrement the character count
E1DF 26F0             (           io.asm):00201 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1E1 3586             (           io.asm):00202 (4+4)   45          puls    D,PC
                      (           io.asm):00203                 
                      (           io.asm):00204                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00205                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00206                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00207                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00208                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00209                 ;                                                    |___/
                      (           io.asm):00210                 ;
                      (           io.asm):00211                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00212                 ; ====================================================
                      (           io.asm):00213                 ; Input:    X = String pointer
                      (           io.asm):00214                 ; Output:   A = Binary byte
                      (           io.asm):00215                 ;           X = Points to next character in string
                      (           io.asm):00216                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00217                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00218                 
E1E3                  (           io.asm):00219                 GetStrByte:
E1E3 3404             (           io.asm):00220 (4+1)   50          pshs    B
E1E5 1038             (           io.asm):00221 (6)     56          pshsw
E1E7 3410             (           io.asm):00222 (4+2)   62          pshs    X                   ; Save position
E1E9 5F               (           io.asm):00223 (1)     63          clrb                        ; Clear byte counter
E1EA 115F             (           io.asm):00224 (2)     65          clrf                        ; Clear byte storage
E1EC                  (           io.asm):00225                 GetStrByteCount:
E1EC A680             (           io.asm):00226 (4+1)   70          lda     ,X+                 ; Load a character
E1EE 2707             (           io.asm):00227 (3)     73          beq     GetStrByteParse     ; If it's the end of the string, parse byte
E1F0 8120             (           io.asm):00228 (2)     75          cmpa    #' '                ; Is it a space delimiter
E1F2 2703             (           io.asm):00229 (3)     78          beq     GetStrByteParse     ; Yes, then parse byte
E1F4 5C               (           io.asm):00230 (1)     79          incb                        ; Increment byte counter
E1F5 20F5             (           io.asm):00231 (3)     82          bra     GetStrByteCount     ; Loop till delimiter found
E1F7                  (           io.asm):00232                 GetStrByteParse:
E1F7 3510             (           io.asm):00233 (4+2)   88          puls    X                   ; Restore position
E1F9 C100             (           io.asm):00234 (2)     90          cmpb    #0                  ; Is the counter = 0
E1FB 2732             (           io.asm):00235 (3)     93          beq     GetStrByteError     ; Yes, then set error flag
E1FD C101             (           io.asm):00236 (2)     95          cmpb    #1                  ; Is it 1 character long
E1FF 2607             (           io.asm):00237 (3)     98          bne     GetStrByteParse2    ; No, then check if it's 2
E201 BDE252           (           io.asm):00238 (7)     105         jsr     GetStrNibble        ; Get a nibble
E204 2429             (           io.asm):00239 (3)     108         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E206 2023             (           io.asm):00240 (3)     111         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E208                  (           io.asm):00241                 GetStrByteParse2:
E208 C102             (           io.asm):00242 (2)     113         cmpb    #2                  ; Is it 2 character long
E20A 2615             (           io.asm):00243 (3)     116         bne     GetStrByteParseMore ; No, then check if it's 3
E20C BDE252           (           io.asm):00244 (7)     123         jsr     GetStrNibble        ; Get a nibble
E20F 241E             (           io.asm):00245 (3)     126         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E211 48               (           io.asm):00246 (1)     127         asla                        ; Push nibble to MSB
E212 48               (           io.asm):00247 (1)     128         asla                        ;
E213 48               (           io.asm):00248 (1)     129         asla                        ;
E214 48               (           io.asm):00249 (1)     130         asla                        ;
E215 1F89             (           io.asm):00250 (4)     134         tfr     A,B                 ; Store byte in LSB of W
E217 BDE252           (           io.asm):00251 (7)     141         jsr     GetStrNibble        ; Get a nibble
E21A 2413             (           io.asm):00252 (3)     144         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E21C 103598           (           io.asm):00253 (4)     148         orr     B,A                 ; Merge both nibbles as a byte
E21F 200A             (           io.asm):00254 (3)     151         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E221                  (           io.asm):00255                 GetStrByteParseMore:
E221 B6EE5C           (           io.asm):00256 (4)     155         lda     CmdErrorPtr         ; Load error pointer
E224 8B03             (           io.asm):00257 (2)     157         adda    #3                  ; Add 3 to it
E226 B7EE5C           (           io.asm):00258 (4)     161         sta     CmdErrorPtr         ; Store it back
E229 2004             (           io.asm):00259 (3)     164         bra     GetStrByteError     ; Set error flag
E22B                  (           io.asm):00260                 GetStrByteGood:
E22B 1A01             (           io.asm):00261 (2)     166         orcc    #%00000001          ; Set Carry: Indicates the byte is ok
E22D 2002             (           io.asm):00262 (3)     169         bra     GetStrByteEnd
E22F                  (           io.asm):00263                 GetStrByteError:
E22F 1CFE             (           io.asm):00264 (2)     171         andcc   #%11111110          ; Clear Carry: Indicates there an error
E231                  (           io.asm):00265                 GetStrByteEnd:
E231 1039             (           io.asm):00266 (6)     177         pulsw
E233 3584             (           io.asm):00267 (4+3)   184         puls    B,PC
                      (           io.asm):00268                 
E235                  (           io.asm):00269                 GetStrByteFixed:
E235 3404             (           io.asm):00270 (4+1)   189         pshs    B
E237 BDE252           (           io.asm):00271 (7)     196         jsr     GetStrNibble        ; Get a nibble
E23A 2412             (           io.asm):00272 (3)     199         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E23C 48               (           io.asm):00273 (1)     200         asla                        ; Push nibble to MSB
E23D 48               (           io.asm):00274 (1)     201         asla                        ;
E23E 48               (           io.asm):00275 (1)     202         asla                        ;
E23F 48               (           io.asm):00276 (1)     203         asla                        ;
E240 1F89             (           io.asm):00277 (4)     207         tfr     A,B                 ; Store byte in B
E242 BDE252           (           io.asm):00278 (7)     214         jsr     GetStrNibble        ; Get a nibble
E245 2407             (           io.asm):00279 (3)     217         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E247 103598           (           io.asm):00280 (4)     221         orr     B,A                 ; Merge both nibbles as a byte
E24A 1A01             (           io.asm):00281 (2)     223         orcc    #%00000001          ; Set Carry: Indicates the nibble is ok
E24C 2002             (           io.asm):00282 (3)     226         bra     GetStrByteFixedEnd  ;
E24E                  (           io.asm):00283                 GetStrByteFixedErr:
E24E 1CFE             (           io.asm):00284 (2)     228         andcc   #%11111110          ; Clear Carry: Indicates there an error
E250                  (           io.asm):00285                 GetStrByteFixedEnd:
E250 3584             (           io.asm):00286 (4+3)   235         puls    B,PC
                      (           io.asm):00287                 
                      (           io.asm):00288                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00289                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00290                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00291                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00292                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00293                 ;
                      (           io.asm):00294                 ;
                      (           io.asm):00295                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00296                 ; ======================================================
                      (           io.asm):00297                 ; Input:    X = String pointer
                      (           io.asm):00298                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00299                 ;           X = Points to next character in string
                      (           io.asm):00300                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00301                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00302                 
E252                  (           io.asm):00303                 GetStrNibble:
E252 A684             (           io.asm):00304 (4+0)   239         lda     ,X                  ; Get a character from string
E254 2713             (           io.asm):00305 (3)     242         beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E256 BDE14D           (           io.asm):00306 (7)     249         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00307                     ; Is it a valid hex character?
E259 8130             (           io.asm):00308 (2)     251         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E25B 2D0C             (           io.asm):00309 (3)     254         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E25D 8146             (           io.asm):00310 (2)     256         cmpa    #'F'                ; Filter anything above the ASCII F
E25F 2E08             (           io.asm):00311 (3)     259         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E261 8139             (           io.asm):00312 (2)     261         cmpa    #'9'                ; Filter anything above ASCII '9'
E263 2F08             (           io.asm):00313 (3)     264         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E265 8141             (           io.asm):00314 (2)     266         cmpa    #'A'                ; Filter anything below ASCII 'A'
E267 2C04             (           io.asm):00315 (3)     269         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E269                  (           io.asm):00316                 GetStrNibbleError:
E269 1CFE             (           io.asm):00317 (2)     271         andcc   #$FE                ; Clear carry to indicate error
E26B 2005             (           io.asm):00318 (3)     274         bra     GetStrNibbleEnd
E26D                  (           io.asm):00319                 GetStrNibbleGood:
E26D BDE089           (           io.asm):00320 (7)     281         jsr     AscToBinNibble
E270 1A01             (           io.asm):00321 (2)     283         orcc    #$01                ; Set carry to indicate valid number in A
E272                  (           io.asm):00322                 GetStrNibbleEnd:
E272 3001             (           io.asm):00323 (4+1)   288         leax    1,X                 ; Increment string pointer
E274 7CEE5C           (           io.asm):00324 (6)     294         inc     CmdErrorPtr         ; Advance error pointer
E277 39               (           io.asm):00325 (4)     298         rts
                      (           io.asm):00326                     
                      (           io.asm):00327                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00328                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00329                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00330                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00331                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00332                 ;
                      (           io.asm):00333                 ;
                      (           io.asm):00334                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00335                 ; ======================================================
                      (           io.asm):00336                 ; Input:    X = String pointer
                      (           io.asm):00337                 ; Output:   D = Binary word
                      (           io.asm):00338                 ;           X = Points to next character in string
                      (           io.asm):00339                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00340                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00341                 
E278                  (           io.asm):00342                 GetStrWord:
E278 1038             (           io.asm):00343 (6)     304         pshsw
E27A 3410             (           io.asm):00344 (4+2)   310         pshs    X                   ; Save position
E27C 5F               (           io.asm):00345 (1)     311         clrb                        ; Clear word counter
E27D 105F             (           io.asm):00346 (2)     313         clrw                        ; Clear word storage
E27F                  (           io.asm):00347                 GetStrWordCount:
E27F A680             (           io.asm):00348 (4+1)   318         lda     ,X+                 ; Load a character
E281 2707             (           io.asm):00349 (3)     321         beq     GetStrWordParse     ; If it's the end of the string, parse word
E283 8120             (           io.asm):00350 (2)     323         cmpa    #' '                ; Is it a space delimiter
E285 2703             (           io.asm):00351 (3)     326         beq     GetStrWordParse     ; Yes, then parse word
E287 5C               (           io.asm):00352 (1)     327         incb                        ; Increment byte counter
E288 20F5             (           io.asm):00353 (3)     330         bra     GetStrWordCount     ; Loop till delimiter found
E28A                  (           io.asm):00354                 GetStrWordParse:
E28A 3510             (           io.asm):00355 (4+2)   336         puls    X                   ; Restore position
E28C C100             (           io.asm):00356 (2)     338         cmpb    #0                  ; Is the counter = 0
E28E 2752             (           io.asm):00357 (3)     341         beq     GetStrWordError     ; Yes, then set error flag
E290 C101             (           io.asm):00358 (2)     343         cmpb    #1                  ; Is it 1 character long
E292 2609             (           io.asm):00359 (3)     346         bne     GetStrWordParse2    ; No, then check if it's 2
E294 BDE252           (           io.asm):00360 (7)     353         jsr     GetStrNibble        ; Get a nibble
E297 2449             (           io.asm):00361 (3)     356         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E299 1F8F             (           io.asm):00362 (4)     360         tfr     A,F                 ; Store nibble in LSB of W
E29B 203F             (           io.asm):00363 (3)     363         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E29D                  (           io.asm):00364                 GetStrWordParse2:
E29D C102             (           io.asm):00365 (2)     365         cmpb    #2                  ; Is it 2 character long
E29F 2609             (           io.asm):00366 (3)     368         bne     GetStrWordParse3    ; No, then check if it's 3
E2A1 BDE235           (           io.asm):00367 (7)     375         jsr     GetStrByteFixed     ; Get a byte
E2A4 243C             (           io.asm):00368 (3)     378         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2A6 1F8F             (           io.asm):00369 (4)     382         tfr     A,F                 ; Store byte in LSB of W
E2A8 2032             (           io.asm):00370 (3)     385         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2AA                  (           io.asm):00371                 GetStrWordParse3:
E2AA C103             (           io.asm):00372 (2)     387         cmpb    #3                  ; Is it 3 character long
E2AC 2610             (           io.asm):00373 (3)     390         bne     GetStrWordParse4    ; No, then check if it's 4
E2AE BDE252           (           io.asm):00374 (7)     397         jsr     GetStrNibble        ; Get a nibble
E2B1 242F             (           io.asm):00375 (3)     400         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2B3 1F8E             (           io.asm):00376 (4)     404         tfr     A,E                 ; Store nibble in MSB of W
E2B5 BDE235           (           io.asm):00377 (7)     411         jsr     GetStrByteFixed     ; Get a byte
E2B8 2428             (           io.asm):00378 (3)     414         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2BA 1F8F             (           io.asm):00379 (4)     418         tfr     A,F                 ; Store byte in LSB of W
E2BC 201E             (           io.asm):00380 (3)     421         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2BE                  (           io.asm):00381                 GetStrWordParse4:
E2BE C104             (           io.asm):00382 (2)     423         cmpb    #4                  ; Is it 4 character long
E2C0 2610             (           io.asm):00383 (3)     426         bne     GetStrWordParseMore ; No, then check if it's longer
E2C2 BDE235           (           io.asm):00384 (7)     433         jsr     GetStrByteFixed     ; Get a byte
E2C5 241B             (           io.asm):00385 (3)     436         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C7 1F8E             (           io.asm):00386 (4)     440         tfr     A,E                 ; Store byte in MSB of W
E2C9 BDE235           (           io.asm):00387 (7)     447         jsr     GetStrByteFixed     ; Get a byte
E2CC 2414             (           io.asm):00388 (3)     450         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2CE 1F8F             (           io.asm):00389 (4)     454         tfr     A,F                 ; Store byte in LSB of W
E2D0 200A             (           io.asm):00390 (3)     457         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2D2                  (           io.asm):00391                 GetStrWordParseMore:
E2D2 B6EE5C           (           io.asm):00392 (4)     461         lda     CmdErrorPtr         ; Load error pointer
E2D5 8B05             (           io.asm):00393 (2)     463         adda    #5                  ; Add 5 to it
E2D7 B7EE5C           (           io.asm):00394 (4)     467         sta     CmdErrorPtr         ; Store it back
E2DA 2006             (           io.asm):00395 (3)     470         bra     GetStrWordError     ; Set error flag
E2DC                  (           io.asm):00396                 GetStrWordGood:
E2DC 1F60             (           io.asm):00397 (4)     474         tfr     W,D
E2DE 1A01             (           io.asm):00398 (2)     476         orcc    #%00000001          ; Set Carry: Indicates the word is ok
E2E0 2002             (           io.asm):00399 (3)     479         bra     GetStrWordEnd
E2E2                  (           io.asm):00400                 GetStrWordError:
E2E2 1CFE             (           io.asm):00401 (2)     481         andcc   #%11111110          ; Clear Carry: Indicates there an error
E2E4                  (           io.asm):00402                 GetStrWordEnd:
E2E4 1039             (           io.asm):00403 (6)     487         pulsw
E2E6 39               (           io.asm):00404 (4)     491         rts
                      (           io.asm):00405                 
                      (           io.asm):00406                 ;  ___           ____            _          
                      (           io.asm):00407                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00408                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00409                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00410                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00411                 ;                        |___/              
                      (           io.asm):00412                 ;
                      (           io.asm):00413                 ; Read a hexadecimal byte
                      (           io.asm):00414                 ; =======================
                      (           io.asm):00415                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00416                 
                      (           io.asm):00417                     PRAGMA cc
                      (           io.asm):00418                 
E2E7                  (           io.asm):00419                 InByte:
E2E7 3405             (           io.asm):00420 (4+2)   6           pshs    B,CC
E2E9 BDE1A4           (           io.asm):00421 (7)     13          jsr     InChar              ; Read first character in A
E2EC 1F89             (           io.asm):00422 (4)     17          tfr     A,B                 ; Save is in B temporarily
E2EE BDE1A4           (           io.asm):00423 (7)     24          jsr     InChar              ; Read second character in A
E2F1 1E89             (           io.asm):00424 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E2F3 BDE09C           (           io.asm):00425 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E2F6 3585             (           io.asm):00426 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00427                 
                      (           io.asm):00428                 ;  ___           ____    _
                      (           io.asm):00429                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00430                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00431                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00432                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00433                 ;
                      (           io.asm):00434                 ;
                      (           io.asm):00435                 ; Read string from from stdin
                      (           io.asm):00436                 ; ===========================
                      (           io.asm):00437                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00438                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00439                 ;           Y = contains the original string pointer start
                      (           io.asm):00440                 ; Input:    B = max number of characters to read
                      (           io.asm):00441                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00442                 ; Output:   B = Actual number of characters read
                      (           io.asm):00443                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00444                 ;               Carry bit clear = no string recorded
                      (           io.asm):00445                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00446                 
                      (           io.asm):00447                     PRAGMA cc
                      (           io.asm):00448                 
E2F8                  (           io.asm):00449                 InStr:
E2F8 3432             (           io.asm):00450 (4+5)   9           pshs    A,X,Y
E2FA 1038             (           io.asm):00451 (6)     15          pshsw
E2FC 1F12             (           io.asm):00452 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E2FE 1F9F             (           io.asm):00453 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E300 114F             (           io.asm):00454 (2)     25          clre                        ; Clear the current byte count
E302                  (           io.asm):00455                 InStrReadChar:
E302 BDE1A4           (           io.asm):00456 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00457                     ;jsr        UpperCase   ; *** TEMPORARY
E305 810D             (           io.asm):00458 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E307 2748             (           io.asm):00459 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E309 8108             (           io.asm):00460 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E30B 270B             (           io.asm):00461 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E30D 811B             (           io.asm):00462 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E30F 271E             (           io.asm):00463 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E311 2BEF             (           io.asm):00464 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E313 10379E           (           io.asm):00465 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E316 2630             (           io.asm):00466 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E318                  (           io.asm):00467                 InStrBackspace:
E318 103712           (           io.asm):00468 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E31B 27E5             (           io.asm):00469 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E31D 301F             (           io.asm):00470 (4+1)   69          leax    -1,X                ; Decrement string index
E31F 114A             (           io.asm):00471 (2)     71          dece                        ; Decrement the current byte counter
E321 7AEE5C           (           io.asm):00472 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E324 3404             (           io.asm):00473 (4+1)   82          pshs    B                   ; Saves B
E326 C601             (           io.asm):00474 (2)     84          ldb     #1                  ; number of characters to delete
E328 BDE1CD           (           io.asm):00475 (7)     91          jsr     DelChar             ; Delete a character
E32B 3504             (           io.asm):00476 (4+1)   96          puls    B                   ; Restores B
E32D 20D3             (           io.asm):00477 (3)     99          bra     InStrReadChar       ; Go read next character
E32F                  (           io.asm):00478                 InStrEscape:
E32F 118100           (           io.asm):00479 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E332 27CE             (           io.asm):00480 (3)     105         beq     InStrReadChar       ; No, then read a character
E334 3404             (           io.asm):00481 (4+1)   110         pshs    B                   ; Else, erase everyting
E336 1FE9             (           io.asm):00482 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E338 BDE1CD           (           io.asm):00483 (7)     121         jsr     DelChar             ; Delete the whole line
E33B 3504             (           io.asm):00484 (4+1)   126         puls    B
E33D 1F21             (           io.asm):00485 (4)     130         tfr     Y,X                 ; Restores string pointer position
E33F 114F             (           io.asm):00486 (2)     132         clre                        ; Clear the byte count
E341 9609             (           io.asm):00487 (3)     135         lda     PromptSize
E343 B7EE5C           (           io.asm):00488 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E346 20BA             (           io.asm):00489 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E348                  (           io.asm):00490                 InStrStoreChar:
E348 BDE1BE           (           io.asm):00491 (7)     149         jsr     OutChar             ; Print character on terminal
E34B A780             (           io.asm):00492 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E34D 114C             (           io.asm):00493 (2)     156         ince                        ; Increment byte count
E34F 20B1             (           io.asm):00494 (3)     159         bra     InStrReadChar       ; No? Read another character
E351                  (           io.asm):00495                 InStrPrintCR:
E351 BDE3A8           (           io.asm):00496 (7)     166         jsr     OutCRLF             ; Print carriage return
E354 6F84             (           io.asm):00497 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E356 1FE9             (           io.asm):00498 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E358 118100           (           io.asm):00499 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E35B 2704             (           io.asm):00500 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E35D 1A01             (           io.asm):00501 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E35F 2002             (           io.asm):00502 (3)     187         bra     InStrEnd
E361                  (           io.asm):00503                 InStrClearCarry:
E361 1CFE             (           io.asm):00504 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E363                  (           io.asm):00505                 InStrEnd:
E363 1039             (           io.asm):00506 (6)     195         pulsw
E365 35B2             (           io.asm):00507 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00508                 
                      (           io.asm):00509                 ;  ___          __        __                     _ 
                      (           io.asm):00510                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00511                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00512                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00513                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00514                 ;
                      (           io.asm):00515                 ;
                      (           io.asm):00516                 ; Read a hexadecimal word
                      (           io.asm):00517                 ; =======================
                      (           io.asm):00518                 ; Output:   D = Binary number converted from four ASCII characters read from stdin
                      (           io.asm):00519                 ; 
                      (           io.asm):00520                     PRAGMA cc
                      (           io.asm):00521                 
E367                  (           io.asm):00522                 InWord:
E367 3401             (           io.asm):00523 (4+1)   5           pshs    CC
E369 1038             (           io.asm):00524 (6)     11          pshsw
E36B BDE1A4           (           io.asm):00525 (7)     18          jsr     InChar
E36E 1F8F             (           io.asm):00526 (4)     22          tfr     A,F
E370 BDE1A4           (           io.asm):00527 (7)     29          jsr     InChar
E373 1F89             (           io.asm):00528 (4)     33          tfr     A,B
E375 BDE1A4           (           io.asm):00529 (7)     40          jsr     InChar
E378 1F8E             (           io.asm):00530 (4)     44          tfr     A,E
E37A BDE1A4           (           io.asm):00531 (7)     51          jsr     InChar
E37D 1E8F             (           io.asm):00532 (5)     56          exg     A,F
E37F BDE0B2           (           io.asm):00533 (7)     63          jsr     AscToBinWord
E382 1039             (           io.asm):00534 (6)     69          pulsw
E384 3581             (           io.asm):00535 (4+3)   76          puls    CC,PC
                      (           io.asm):00536                     
                      (           io.asm):00537                 ;   ___            _     ____            _          
                      (           io.asm):00538                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00539                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00540                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00541                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00542                 ;                                |___/
                      (           io.asm):00543                 ;
                      (           io.asm):00544                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00545                 ; ==================================
                      (           io.asm):00546                 ; Input:    A = Byte to output
                      (           io.asm):00547                 
                      (           io.asm):00548                     PRAGMA cc
                      (           io.asm):00549                 
E386                  (           io.asm):00550                 OutByte:
E386                  (           io.asm):00551                 OutByteLZ:
E386 3407             (           io.asm):00552 (4+3)   7           pshs    A,B,CC
E388 BDE0D4           (           io.asm):00553 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E38B BDE1BE           (           io.asm):00554 (7)     21          jsr     OutChar             ; Print MSB in A
E38E 1F98             (           io.asm):00555 (4)     25          tfr     B,A                 ; Transfer LSB in A
E390 BDE1BE           (           io.asm):00556 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E393 3587             (           io.asm):00557 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00558                 
                      (           io.asm):00559                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00560                 ; ==========================================================
                      (           io.asm):00561                 ; Input:    A = Byte to output
                      (           io.asm):00562                 
                      (           io.asm):00563                     PRAGMA cc
                      (           io.asm):00564                 
E395                  (           io.asm):00565                 OutByteNLZ:
E395 3407             (           io.asm):00566 (4+3)   7           pshs    A,B,CC
E397 BDE0D4           (           io.asm):00567 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E39A 8130             (           io.asm):00568 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E39C 2703             (           io.asm):00569 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E39E BDE1BE           (           io.asm):00570 (7)     26          jsr     OutChar             ; Print MSB in A
E3A1                  (           io.asm):00571                 OutByteDigit1NLZ:   
E3A1 1F98             (           io.asm):00572 (4)     30          tfr     B,A                 ; Transfer LSB in A
E3A3 BDE1BE           (           io.asm):00573 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E3A6 3587             (           io.asm):00574 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00575                 
                      (           io.asm):00576                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00577                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00578                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00579                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00580                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00581                 ;
                      (           io.asm):00582                 ; Print a carriage return and linefeed
                      (           io.asm):00583                 ; ====================================
                      (           io.asm):00584                 
                      (           io.asm):00585                     PRAGMA cc
                      (           io.asm):00586                 
E3A8                  (           io.asm):00587                 OutCRLF:
E3A8 3403             (           io.asm):00588 (4+2)   6           pshs    A,CC
E3AA 860D             (           io.asm):00589 (2)     8           lda     #CR
E3AC BDE1BE           (           io.asm):00590 (7)     15          jsr     OutChar
E3AF 860A             (           io.asm):00591 (2)     17          lda     #LF
E3B1 BDE1BE           (           io.asm):00592 (7)     24          jsr     OutChar
E3B4 3583             (           io.asm):00593 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00594                 
                      (           io.asm):00595                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00596                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00597                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00598                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00599                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00600                 ;
                      (           io.asm):00601                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00602                 ; ====================================
                      (           io.asm):00603                 ; Input:    A = Nibble to output
                      (           io.asm):00604                 
                      (           io.asm):00605                     PRAGMA cc
                      (           io.asm):00606                 
E3B6                  (           io.asm):00607                 OutNibble:
E3B6                  (           io.asm):00608                 OutNibbleLSB:
E3B6 3403             (           io.asm):00609 (4+2)   6           pshs    A,CC
E3B8 BDE0C4           (           io.asm):00610 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E3BB BDE1BE           (           io.asm):00611 (7)     20          jsr     OutChar
E3BE 3583             (           io.asm):00612 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00613                 
                      (           io.asm):00614                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00615                 ; ====================================
                      (           io.asm):00616                 ; Input:    A = Nibble to output
                      (           io.asm):00617                 
                      (           io.asm):00618                     PRAGMA cc
                      (           io.asm):00619                 
E3C0                  (           io.asm):00620                 OutNibbleMSB:
E3C0 3403             (           io.asm):00621 (4+2)   6           pshs    A,CC
E3C2 44               (           io.asm):00622 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E3C3 44               (           io.asm):00623 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E3C4 44               (           io.asm):00624 (1)     9           lsra                        ;
E3C5 44               (           io.asm):00625 (1)     10          lsra                        ;
E3C6 BDE0C4           (           io.asm):00626 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E3C9 BDE1BE           (           io.asm):00627 (7)     24          jsr     OutChar
E3CC 3583             (           io.asm):00628 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00629                 
                      (           io.asm):00630                 ;   ___            _     ____    _
                      (           io.asm):00631                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00632                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00633                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00634                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00635                 ;
                      (           io.asm):00636                 ; Print a string to the screen
                      (           io.asm):00637                 ; ============================
                      (           io.asm):00638                 ; Input:    X = Address of string to print
                      (           io.asm):00639                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00640                 
                      (           io.asm):00641                     PRAGMA cc
                      (           io.asm):00642                 
E3CE                  (           io.asm):00643                 OutStr:
E3CE                  (           io.asm):00644                 OutStrLZ:
E3CE 3403             (           io.asm):00645 (4+2)   6           pshs    A,CC
E3D0                  (           io.asm):00646                 OutStrLoop:
E3D0 A680             (           io.asm):00647 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E3D2 2709             (           io.asm):00648 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E3D4 81FF             (           io.asm):00649 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E3D6 2705             (           io.asm):00650 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E3D8 17FDE3           (           io.asm):00651 (7)     26          lbsr    OutChar             ; Print character
E3DB 20F3             (           io.asm):00652 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E3DD                  (           io.asm):00653                 OutStrEnd:
E3DD 3583             (           io.asm):00654 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00655                 
                      (           io.asm):00656                 ; Print a string to the screen without leading zeros
                      (           io.asm):00657                 ; ==================================================
                      (           io.asm):00658                 ; Input:    X = Address of string to print
                      (           io.asm):00659                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00660                 
                      (           io.asm):00661                     PRAGMA cc
                      (           io.asm):00662                 
E3DF                  (           io.asm):00663                 OutStrNLZ:
E3DF 3407             (           io.asm):00664 (4+3)   7           pshs    A,B,CC
E3E1 5F               (           io.asm):00665 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E3E2                  (           io.asm):00666                 OutStrNLZLoop:
E3E2 A680             (           io.asm):00667 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E3E4 81FF             (           io.asm):00668 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E3E6 270F             (           io.asm):00669 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E3E8 8130             (           io.asm):00670 (2)     20          cmpa    #'0'                ; Is it a zero?
E3EA 2604             (           io.asm):00671 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E3EC 8100             (           io.asm):00672 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E3EE 27F2             (           io.asm):00673 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E3F0                  (           io.asm):00674                 OutStrNLZPrintChar:
E3F0 1F89             (           io.asm):00675 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E3F2 BDE1BE           (           io.asm):00676 (7)     39          jsr     OutChar             ; Print character
E3F5 20EB             (           io.asm):00677 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E3F7                  (           io.asm):00678                 OutStrNLZEnd:
E3F7 3587             (           io.asm):00679 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00680                 
                      (           io.asm):00681                 ;   ___            _    __        __                     _ 
                      (           io.asm):00682                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00683                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00684                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00685                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00686                 ;
                      (           io.asm):00687                 ; Print a word as 4 ASCII characters
                      (           io.asm):00688                 ; ==================================
                      (           io.asm):00689                 ; Input:    D = Word to output
                      (           io.asm):00690                 
                      (           io.asm):00691                     PRAGMA cc
                      (           io.asm):00692                 
E3F9                  (           io.asm):00693                 OutWord:
E3F9 3407             (           io.asm):00694 (4+3)   7           pshs    A,B,CC
E3FB 1038             (           io.asm):00695 (6)     13          pshsw
E3FD BDE0F0           (           io.asm):00696 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E400 BDE1BE           (           io.asm):00697 (7)     27          jsr     OutChar             ; Print 4th digit
E403 1F98             (           io.asm):00698 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E405 BDE1BE           (           io.asm):00699 (7)     38          jsr     OutChar             ; Print 3rd digit
E408 1FE8             (           io.asm):00700 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E40A BDE1BE           (           io.asm):00701 (7)     49          jsr     OutChar             ; Print 2nd digit
E40D 1FF8             (           io.asm):00702 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E40F BDE1BE           (           io.asm):00703 (7)     60          jsr     OutChar             ; Print 1st digit
E412 1039             (           io.asm):00704 (6)     66          pulsw
E414 3587             (           io.asm):00705 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00706                 
                      (           io.asm):00707                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00708                 ; =========================================================
                      (           io.asm):00709                 ; Input:    D = Byte to output
                      (           io.asm):00710                 
                      (           io.asm):00711                     PRAGMA cc
                      (           io.asm):00712                 
E416                  (           io.asm):00713                 OutWordNLZ:
E416 3416             (           io.asm):00714 (4+4)   8           pshs    A,B,X
E418 1038             (           io.asm):00715 (6)     14          pshsw
E41A 8E0000           (           io.asm):00716 (3)     17          ldx     #0                  ; Clear leading zero flag
E41D BDE0F0           (           io.asm):00717 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E420 8130             (           io.asm):00718 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E422 2705             (           io.asm):00719 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E424 3001             (           io.asm):00720 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E426 BDE1BE           (           io.asm):00721 (7)     41          jsr     OutChar             ; Print 1th digit
E429                  (           io.asm):00722                 OutWordNLZ2:
E429 1F98             (           io.asm):00723 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E42B 8130             (           io.asm):00724 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E42D 2605             (           io.asm):00725 (3)     50          bne     OutWordNLZp2        ; It's not zero
E42F 8C0000           (           io.asm):00726 (3)     53          cmpx    #0                  ; Check leading zero flag
E432 2705             (           io.asm):00727 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E434                  (           io.asm):00728                 OutWordNLZp2:
E434 3001             (           io.asm):00729 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E436 BDE1BE           (           io.asm):00730 (7)     68          jsr     OutChar             ; Print 2rd digit
E439                  (           io.asm):00731                 OutWordNLZ3:
E439 1FE8             (           io.asm):00732 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E43B 8130             (           io.asm):00733 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E43D 2605             (           io.asm):00734 (3)     77          bne     OutWordNLZp3        ; It's not zero
E43F 8C0000           (           io.asm):00735 (3)     80          cmpx    #0                  ; Check leading zero flag
E442 2705             (           io.asm):00736 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E444                  (           io.asm):00737                 OutWordNLZp3:
E444 3001             (           io.asm):00738 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E446 BDE1BE           (           io.asm):00739 (7)     95          jsr     OutChar             ; Print 3nd digit
E449                  (           io.asm):00740                 OutWordNLZ4:
E449 1FF8             (           io.asm):00741 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E44B BDE1BE           (           io.asm):00742 (7)     106         jsr     OutChar             ; Print 4st digit
E44E 1039             (           io.asm):00743 (6)     112         pulsw
E450 3596             (           io.asm):00744 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00183                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors
                      (      monitor.asm):00005                 ; *   ErrPointer
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00016                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00017                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00018                 ; ****************************************************************************************
                      (      monitor.asm):00019                 
                      (      monitor.asm):00020                 ;   ____                   _   _____                                    
                      (      monitor.asm):00021                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00022                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00023                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00024                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00025                 ;
                      (      monitor.asm):00026                 ; Various error messages pertaining to command line
                      (      monitor.asm):00027                 ; =================================================
                      (      monitor.asm):00028                 
                      (      monitor.asm):00029                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00030                 ; ------------------------------------------------------------
E452                  (      monitor.asm):00031                 ErrPointer:
E452 3407             (      monitor.asm):00032 (4+3)   129         pshs    A,B,CC
E454 F6EE5C           (      monitor.asm):00033 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E457 CB09             (      monitor.asm):00034 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E459                  (      monitor.asm):00035                 ErrorPointerLoop:
E459 8620             (      monitor.asm):00036 (2)     137         lda     #' '                ; Move cursor one space
E45B BDE1BE           (      monitor.asm):00037 (7)     144         jsr     OutChar             ;
E45E 5A               (      monitor.asm):00038 (1)     145         decb                        ; Decrement position counter
E45F 26F8             (      monitor.asm):00039 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E461 865E             (      monitor.asm):00040 (2)     150         lda     #'^'                ; Print the position pointer
E463 BDE1BE           (      monitor.asm):00041 (7)     157         jsr     OutChar             ;
E466 BDE3A8           (      monitor.asm):00042 (7)     164         jsr     OutCRLF             ;
E469 3587             (      monitor.asm):00043 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00044                 
                      (      monitor.asm):00045                 ; Invalid address error message
                      (      monitor.asm):00046                 ; -----------------------------
E46B                  (      monitor.asm):00047                 ErrInvalidAddress:
E46B 3411             (      monitor.asm):00048 (4+3)   180         pshs    X,CC
E46D BDE452           (      monitor.asm):00049 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E470 8EEB4B           (      monitor.asm):00050 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E473 BDE3CE           (      monitor.asm):00051 (7)     197         jsr     OutStr              ;
E476 3591             (      monitor.asm):00052 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00053                 
                      (      monitor.asm):00054                 ; Invalid byte error message
                      (      monitor.asm):00055                 ; --------------------------
E478                  (      monitor.asm):00056                 ErrInvalidByte:
E478 3411             (      monitor.asm):00057 (4+3)   213         pshs    X,CC
E47A BDE452           (      monitor.asm):00058 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E47D 8EEB5E           (      monitor.asm):00059 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E480 BDE3CE           (      monitor.asm):00060 (7)     230         jsr     OutStr              ;
E483 3591             (      monitor.asm):00061 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00062                 
                      (      monitor.asm):00063                 ; Invalid command error message
                      (      monitor.asm):00064                 ; -----------------------------
E485                  (      monitor.asm):00065                 ErrInvalidCommand:
E485 3411             (      monitor.asm):00066 (4+3)   246         pshs    X,CC
E487 BDE452           (      monitor.asm):00067 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E48A 8EEBA1           (      monitor.asm):00068 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E48D BDE3CE           (      monitor.asm):00069 (7)     263         jsr     OutStr              ;
E490 3591             (      monitor.asm):00070 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00071                 
                      (      monitor.asm):00072                 ; Invalid parameter error message
                      (      monitor.asm):00073                 ; -------------------------------
E492                  (      monitor.asm):00074                 ErrInvalidParameter:
E492 3411             (      monitor.asm):00075 (4+3)   279         pshs    X,CC
E494 BDE452           (      monitor.asm):00076 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E497 8EEB6E           (      monitor.asm):00077 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E49A BDE3CE           (      monitor.asm):00078 (7)     296         jsr     OutStr              ;
E49D 3591             (      monitor.asm):00079 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00080                 
                      (      monitor.asm):00081                 ; No parameter error message
                      (      monitor.asm):00082                 ; --------------------------
E49F                  (      monitor.asm):00083                 ErrNoParameter:
E49F 3411             (      monitor.asm):00084 (4+3)   312         pshs    X,CC
E4A1 BDE452           (      monitor.asm):00085 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E4A4 8EEB83           (      monitor.asm):00086 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E4A7 BDE3CE           (      monitor.asm):00087 (7)     329         jsr     OutStr              ;
E4AA 3591             (      monitor.asm):00088 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00089                     
                      (      monitor.asm):00090                 ; Syntax error message
                      (      monitor.asm):00091                 ; --------------------
E4AC                  (      monitor.asm):00092                 ErrSyntaxError:
E4AC 3411             (      monitor.asm):00093 (4+3)   345         pshs    X,CC
E4AE BDE452           (      monitor.asm):00094 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E4B1 8EEBB4           (      monitor.asm):00095 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E4B4 BDE3CE           (      monitor.asm):00096 (7)     362         jsr     OutStr              ;
E4B7 3591             (      monitor.asm):00097 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00098                 
                      (      monitor.asm):00099                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00100                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00101                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00102                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00103                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00104                 ;                                                |_|
                      (      monitor.asm):00105                 ; Monitor help screen
                      (      monitor.asm):00106                 ; ===================
                      (      monitor.asm):00107                 
E4B9                  (      monitor.asm):00108                 CmdHelp:
E4B9 8EE9E8           (      monitor.asm):00109 (3)     374         ldx     #CmdHelpMsg
E4BC BDE3CE           (      monitor.asm):00110 (7)     381         jsr     OutStr
E4BF 39               (      monitor.asm):00111 (4)     385         rts
                      (      monitor.asm):00112                     
                      (      monitor.asm):00113                 ;   ____                   _   ____                              
                      (      monitor.asm):00114                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00115                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00116                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00117                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00118                 ;
                      (      monitor.asm):00119                 ; Command parser for the monitor
                      (      monitor.asm):00120                 ; ==============================
                      (      monitor.asm):00121                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00122                 
                      (      monitor.asm):00123                     PRAGMA cc
                      (      monitor.asm):00124                 
E4C0                  (      monitor.asm):00125                 CmdParse:
E4C0 3427             (      monitor.asm):00126 (4+5)   9           pshs    A,B,Y,CC
E4C2 BDE891           (      monitor.asm):00127 (7)     16          jsr     SkipSpaces          ; Skip leading spaces
E4C5 BFEE72           (      monitor.asm):00128 (5)     21          stx     TempWord            ; Store string pointer for command list cycling
E4C8 A684             (      monitor.asm):00129 (4+0)   25          lda     ,X                  ; Load first character from command string to see if it's empty
E4CA 2741             (      monitor.asm):00130 (3)     28          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E4CC 108EE9A4         (      monitor.asm):00131 (4)     32          ldy     #CmdList            ; Load command list table location in Y
E4D0                  (      monitor.asm):00132                 CmdParseChar:
E4D0 A680             (      monitor.asm):00133 (4+1)   37          lda     ,X+                 ; Load first character from command prompt string
E4D2 BDE14D           (      monitor.asm):00134 (7)     44          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E4D5 E6A0             (      monitor.asm):00135 (4+1)   49          ldb     ,Y+                 ; Load a character from the command list
E4D7 2B1C             (      monitor.asm):00136 (3)     52          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E4D9 103789           (      monitor.asm):00137 (4)     56          cmpr    A,B                 ; Compare command string to command list character
E4DC 2605             (      monitor.asm):00138 (3)     59          bne     CmdParseSkip        ; Skip command list entry and point to next command
E4DE 7CEE5C           (      monitor.asm):00139 (6)     65          inc     CmdErrorPtr         ; Increment command line error pointer
E4E1 20ED             (      monitor.asm):00140 (3)     68          bra     CmdParseChar        ; Go and compare the next character
E4E3                  (      monitor.asm):00141                 CmdParseSkip:
E4E3 BEEE72           (      monitor.asm):00142 (5)     73          ldx     TempWord            ; Restore command prompt pointer to starting position
E4E6 7FEE5C           (      monitor.asm):00143 (6)     79          clr     CmdErrorPtr         ; Restore command prompt error pointer
E4E9                  (      monitor.asm):00144                 CmdParseSkipLoop:
E4E9 E6A0             (      monitor.asm):00145 (4+1)   84          ldb     ,Y+                 ; Read next character
E4EB 2AFC             (      monitor.asm):00146 (3)     87          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E4ED 3122             (      monitor.asm):00147 (4+1)   92          leay    2,Y                 ; Jump over command address
E4EF E6A4             (      monitor.asm):00148 (4+0)   96          ldb     ,Y                  ; Is it the end of the command list
E4F1 2717             (      monitor.asm):00149 (3)     99          beq     CmdParseNone        ; Yes it is, print error and exit
E4F3 20DB             (      monitor.asm):00150 (3)     102         bra     CmdParseChar        ; Repeat process until command found
E4F5                  (      monitor.asm):00151                 CmdParseValid:
                      (      monitor.asm):00152                     ; Check for characters after valid command
E4F5 8120             (      monitor.asm):00153 (2)     104         cmpa    #' '                ; Check for a parameter separator (space)
E4F7 2704             (      monitor.asm):00154 (3)     107         beq     CmdParseExecute     ; Yes, then execute command
E4F9 8100             (      monitor.asm):00155 (2)     109         cmpa    #$00                ; Check for an end of line in string (null)
E4FB 260D             (      monitor.asm):00156 (3)     112         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E4FD                  (      monitor.asm):00157                 CmdParseExecute:
E4FD 7AEE5C           (      monitor.asm):00158 (6)     118         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E500 ECA4             (      monitor.asm):00159 (5+0)   123         ldd     ,Y                  ; Load address of command from table
E502 EDC3             (      monitor.asm):00160 (5+2)   130         std     ,--U                ; Save address to user stack
E504 301F             (      monitor.asm):00161 (4+1)   135         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E506 3527             (      monitor.asm):00162 (4+5)   144         puls    A,B,Y,CC            ; Restore registers
E508 6ED1             (      monitor.asm):00163 (3+6)   153         jmp     [,U++]              ; Execute command
E50A                  (      monitor.asm):00164                 CmdParseNone:
E50A BDE485           (      monitor.asm):00165 (7)     160         jsr     ErrInvalidCommand   ;
E50D                  (      monitor.asm):00166                 CmdParseEnd:
E50D 35A7             (      monitor.asm):00167 (4+7)   171         puls    A,B,Y,CC,PC
                      (      monitor.asm):00168                 
                      (      monitor.asm):00169                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00170                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00171                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00172                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00173                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00174                 ;                                                                |_|
                      (      monitor.asm):00175                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00176                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                     PRAGMA cc
                      (      monitor.asm):00179                 
E50F                  (      monitor.asm):00180                 CmdPrompt:
E50F 3406             (      monitor.asm):00181 (4+2)   6           pshs    D
E511 B6EE5F           (      monitor.asm):00182 (4)     10          lda     CurrBank            ;
E514 BDE386           (      monitor.asm):00183 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E517 863A             (      monitor.asm):00184 (2)     19          lda     #':'                ;
E519 BDE1BE           (      monitor.asm):00185 (7)     26          jsr     OutChar             ; Print separator
E51C FCEE5D           (      monitor.asm):00186 (5)     31          ldd     CurrAddress         ;
E51F BDE3F9           (      monitor.asm):00187 (7)     38          jsr     OutWord             ; Print current address
E522 863E             (      monitor.asm):00188 (2)     40          lda     #'>'                ;
E524 BDE1BE           (      monitor.asm):00189 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E527 8620             (      monitor.asm):00190 (2)     49          lda     #' '                ;
E529 BDE1BE           (      monitor.asm):00191 (7)     56          jsr     OutChar             ; Print space
E52C 7FEE5C           (      monitor.asm):00192 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E52F 3586             (      monitor.asm):00193 (4+4)   70          puls    D,PC
                      (      monitor.asm):00194                 
                      (      monitor.asm):00195                 ;  ____                              
                      (      monitor.asm):00196                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00197                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00198                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00199                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00200                 ;                             |_|    
                      (      monitor.asm):00201                 ;
                      (      monitor.asm):00202                 ; Memory dump
                      (      monitor.asm):00203                 ; ===========
                      (      monitor.asm):00204                 
E531                  (      monitor.asm):00205                 Dump:
E531 BDE891           (      monitor.asm):00206 (7)     77          jsr     SkipSpaces          ; Remove leading white spaces
E534 A684             (      monitor.asm):00207 (4+0)   81          lda     ,X                  ; Read a character from string
E536 2708             (      monitor.asm):00208 (3)     84          beq     DumpDisplay         ; If empty, assume Current Address, and display
E538 BDE278           (      monitor.asm):00209 (7)     91          jsr     GetStrWord          ; Read address from string
E53B 2454             (      monitor.asm):00210 (3)     94          bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E53D FDEE5D           (      monitor.asm):00211 (5)     99          std     CurrAddress         ; Save inputed address in Current Address
E540                  (      monitor.asm):00212                 DumpDisplay:
E540 BEEE5D           (      monitor.asm):00213 (5)     104         ldx     CurrAddress         ; Retrieve Current Address
E543 1F12             (      monitor.asm):00214 (4)     108         tfr     X,Y
E545 118614           (      monitor.asm):00215 (3)     111         lde     #ScrVertRes-4       ; Number of lines to print
E548                  (      monitor.asm):00216                 DumpAddr:
E548 1F10             (      monitor.asm):00217 (4)     115         tfr     X,D                 ; Put Current address in D
E54A BDE3F9           (      monitor.asm):00218 (7)     122         jsr     OutWord             ;
E54D 863A             (      monitor.asm):00219 (2)     124         lda     #':'                ; Print address separator
E54F BDE1BE           (      monitor.asm):00220 (7)     131         jsr     OutChar             ;
E552 8620             (      monitor.asm):00221 (2)     133         lda     #' '                ; Print space separator
E554 BDE1BE           (      monitor.asm):00222 (7)     140         jsr     OutChar             ;
E557 C610             (      monitor.asm):00223 (2)     142         ldb     #BytePerLine        ; Get the number of bytes to print per line
E559                  (      monitor.asm):00224                 DumpByte:
E559 A680             (      monitor.asm):00225 (4+1)   147         lda     ,X+                 ; Print byte from Current Address
E55B BDE386           (      monitor.asm):00226 (7)     154         jsr     OutByte             ;
E55E 8620             (      monitor.asm):00227 (2)     156         lda     #' '                ; Print space separator
E560 BDE1BE           (      monitor.asm):00228 (7)     163         jsr     OutChar             ;
E563 5A               (      monitor.asm):00229 (1)     164         decb                        ; Decrement byte counter
E564 26F3             (      monitor.asm):00230 (3)     167         bne     DumpByte            ; If not finished, loop and output next byte
E566 867C             (      monitor.asm):00231 (2)     169         lda     #'|'                ; Print space separator
E568 BDE1BE           (      monitor.asm):00232 (7)     176         jsr     OutChar             ;
E56B 8620             (      monitor.asm):00233 (2)     178         lda     #' '                ; Print space separator
E56D BDE1BE           (      monitor.asm):00234 (7)     185         jsr     OutChar             ;
E570 C610             (      monitor.asm):00235 (2)     187         ldb     #BytePerLine        ; Get the number of bytes to print per line
E572                  (      monitor.asm):00236                 DumpChar:
E572 A6A0             (      monitor.asm):00237 (4+1)   192         lda     ,Y+                 ; Print character from Current Address
E574 8120             (      monitor.asm):00238 (2)     194         cmpa    #' '                ; Compare character to space character
E576 2D05             (      monitor.asm):00239 (3)     197         blt     DumpCharDot         ; If lower, then print dot
E578 4D               (      monitor.asm):00240 (1)     198         tsta                        ; Is the characther in the extended ASCII range
E579 2B02             (      monitor.asm):00241 (3)     201         bmi     DumpCharDot         ; If it is, the print dot
E57B 2002             (      monitor.asm):00242 (3)     204         bra     DumpCharPrint       ; Else, print character
E57D                  (      monitor.asm):00243                 DumpCharDot:
E57D 862E             (      monitor.asm):00244 (2)     206         lda     #'.'                ; Replace character to dot
E57F                  (      monitor.asm):00245                 DumpCharPrint:
E57F BDE1BE           (      monitor.asm):00246 (7)     213         jsr     OutChar             ; Output actual or replaced character
E582 5A               (      monitor.asm):00247 (1)     214         decb                        ; Decrement byte counter
E583 26ED             (      monitor.asm):00248 (3)     217         bne     DumpChar            ; If not finished, loop and output next character
E585 BDE3A8           (      monitor.asm):00249 (7)     224         jsr     OutCRLF             ; Change line
E588 114A             (      monitor.asm):00250 (2)     226         dece                        ; Decrement the lines to print
E58A 26BC             (      monitor.asm):00251 (3)     229         bne     DumpAddr
E58C BFEE5D           (      monitor.asm):00252 (5)     234         stx     CurrAddress         ; Store new Current Address in memory
E58F 2003             (      monitor.asm):00253 (3)     237         bra     DumpEnd
E591                  (      monitor.asm):00254                 DumpInvalidAddress:
E591 BDE46B           (      monitor.asm):00255 (7)     244         jsr     ErrInvalidAddress   ; Display address error
E594                  (      monitor.asm):00256                 DumpEnd:
E594 39               (      monitor.asm):00257 (4)     248         rts
                      (      monitor.asm):00258                     
                      (      monitor.asm):00259                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00260                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00261                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00262                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00263                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00264                 ;
                      (      monitor.asm):00265                 ; Load Intel Hex file to memory
                      (      monitor.asm):00266                 ; =============================
                      (      monitor.asm):00267                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00268                 ;           E = Checksum accumulator
                      (      monitor.asm):00269                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00270                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00271                 ;           Y = Byte count in current record
                      (      monitor.asm):00272                 ; Vars:     TempWord
                      (      monitor.asm):00273                 
E595                  (      monitor.asm):00274                 LoadIntelHex:
E595 3437             (      monitor.asm):00275 (4+7)   259         pshs    A,B,X,Y,CC
E597 1038             (      monitor.asm):00276 (6)     265         pshsw
E599 105F             (      monitor.asm):00277 (2)     267         clrw                        ; Clear the flags and checksum accumulator
E59B 8EEBC4           (      monitor.asm):00278 (3)     270         ldx     #LoadStartMsg       ; Print message that loading will commence
E59E BDE3CE           (      monitor.asm):00279 (7)     277         jsr     OutStr              ; 
E5A1                  (      monitor.asm):00280                 LoadRecord:
E5A1 BDE1A4           (      monitor.asm):00281 (7)     284         jsr     InChar              ; Read a character
E5A4 811B             (      monitor.asm):00282 (2)     286         cmpa    #ESC                ; Is it the ESC key?
E5A6 2609             (      monitor.asm):00283 (3)     289         bne     LoadStart           ; No, check for record marker
E5A8 8EEBFF           (      monitor.asm):00284 (3)     292         ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E5AB BDE3CE           (      monitor.asm):00285 (7)     299         jsr     OutStr              ; 
E5AE 1600B5           (      monitor.asm):00286 (4)     303         lbra    LoadEnd             ; Exit
E5B1                  (      monitor.asm):00287                 LoadStart:
E5B1 813A             (      monitor.asm):00288 (2)     305         cmpa    #':'                ; Start of record marker
E5B3 26EC             (      monitor.asm):00289 (3)     308         bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E5B5 114F             (      monitor.asm):00290 (2)     310         clre                        ; Clear checksum accumulator
                      (      monitor.asm):00291                     ; Read the record length
E5B7 BDE2E7           (      monitor.asm):00292 (7)     317         jsr     InByte              ; Get record length
E5BA 1F89             (      monitor.asm):00293 (4)     321         tfr     A,B                 ; Transfer value to LSB of D
E5BC 4F               (      monitor.asm):00294 (1)     322         clra                        ; Clear MSB of D
E5BD 1F02             (      monitor.asm):00295 (4)     326         tfr     D,Y                 ; Transfer byte count D to Y
E5BF 1F9E             (      monitor.asm):00296 (4)     330         tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00297                     ; Read the destination address
E5C1 BDE367           (      monitor.asm):00298 (7)     337         jsr     InWord              ; Read the address
E5C4 BFEE72           (      monitor.asm):00299 (5)     342         stx     TempWord            ; Save last address pointed by X, as last record is $0000
E5C7 1F01             (      monitor.asm):00300 (4)     346         tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00301                     ; Add checksum of both bytes
E5C9 10308E           (      monitor.asm):00302 (4)     350         addr    A,E                 ; Add MSB of address to checksum accumulator
E5CC 10309E           (      monitor.asm):00303 (4)     354         addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00304                     ;Set origin address flag and store address in CurrAddress
E5CF 115D             (      monitor.asm):00305 (2)     356         tstf                        ; Test the flags register
E5D1 2B09             (      monitor.asm):00306 (3)     359         bmi     LoadRecordType      ; If it's not the first line of code read record type
E5D3 BFEE5D           (      monitor.asm):00307 (5)     364         stx     CurrAddress         ; Save start address
E5D6 BFEE6F           (      monitor.asm):00308 (5)     369         stx     RegPC               ; Save the user PC 
E5D9 11C680           (      monitor.asm):00309 (3)     372         ldf     #$80                ; Sets the origin flag
E5DC                  (      monitor.asm):00310                 LoadRecordType:
E5DC BDE2E7           (      monitor.asm):00311 (7)     379         jsr     InByte              ; Get the record type
                      (      monitor.asm):00312                     ; Add checksum
E5DF 10308E           (      monitor.asm):00313 (4)     383         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00314                     ; Which record type is it?
E5E2 8100             (      monitor.asm):00315 (2)     385         cmpa    #0                  ; Is it the Data record type?
E5E4 2713             (      monitor.asm):00316 (3)     388         beq     LoadData            ; Get Data
E5E6 8101             (      monitor.asm):00317 (2)     390         cmpa    #1                  ; Is it the End of File record type?
E5E8 273E             (      monitor.asm):00318 (3)     393         beq     LoadEOF             ; Load last line
E5EA 8EEC1A           (      monitor.asm):00319 (3)     396         ldx     #LoadRecordErr      ; 
E5ED BDE3CE           (      monitor.asm):00320 (7)     403         jsr     OutStr              ; Print Unknown Record Type message
E5F0 BDE386           (      monitor.asm):00321 (7)     410         jsr     OutByte             ; Print the actual record number
E5F3 BDE3A8           (      monitor.asm):00322 (7)     417         jsr     OutCRLF             ; Change line
E5F6 16006D           (      monitor.asm):00323 (4)     421         lbra    LoadEnd
E5F9                  (      monitor.asm):00324                 LoadData:
                      (      monitor.asm):00325                     ; Get record type 00 (Data)
E5F9 BDE2E7           (      monitor.asm):00326 (7)     428         jsr     InByte              ; Read data
E5FC A780             (      monitor.asm):00327 (4+1)   433         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00328                     ; Add checksum
E5FE 10308E           (      monitor.asm):00329 (4)     437         addr    A,E                 ; Add byte data to checksum accumulator
E601 313F             (      monitor.asm):00330 (4+1)   442         leay    -1,Y                ; Decrement byte counter
E603 108C0000         (      monitor.asm):00331 (4)     446         cmpy    #0
E607 26F0             (      monitor.asm):00332 (3)     449         bne     LoadData
E609                  (      monitor.asm):00333                 LoadChecksum:
                      (      monitor.asm):00334                     ; Process accumulated checksum
E609 1143             (      monitor.asm):00335 (2)     451         come                        ; Complement F
E60B 114C             (      monitor.asm):00336 (2)     453         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00337                     ; Get record checksum
E60D BDE2E7           (      monitor.asm):00338 (7)     460         jsr     InByte              ; Read checksum
E610 10378E           (      monitor.asm):00339 (4)     464         cmpr    A,E                 ; Do the checksums match
E613 2608             (      monitor.asm):00340 (3)     467         bne     LoadFailure         ; If inconsistent, display message
E615 862E             (      monitor.asm):00341 (2)     469         lda     #'.'                ; Character indicating line is ok
E617 BDE1BE           (      monitor.asm):00342 (7)     476         jsr     OutChar             ; Print the period character
E61A 16FF84           (      monitor.asm):00343 (4)     480         lbra    LoadRecord          ; Fetch next record
E61D                  (      monitor.asm):00344                 LoadFailure:
                      (      monitor.asm):00345                     ; Indicate record failed checksum
E61D 11C681           (      monitor.asm):00346 (3)     483         ldf     #$81                ; Sets the checksum failure flag
E620 8678             (      monitor.asm):00347 (2)     485         lda     #'x'                ; Load the failed checksum character
E622 BDE1BE           (      monitor.asm):00348 (7)     492         jsr     OutChar             ; Print it
E625 16FF79           (      monitor.asm):00349 (4)     496         lbra    LoadRecord          ; Get next record
E628                  (      monitor.asm):00350                 LoadEOF:
                      (      monitor.asm):00351                     ; Process accumulated checksum
E628 1143             (      monitor.asm):00352 (2)     498         come                        ; Complement E
E62A 114C             (      monitor.asm):00353 (2)     500         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00354                     ; Get end record (01) checksum
E62C BDE2E7           (      monitor.asm):00355 (7)     507         jsr     InByte              ; Get the checksum byte
E62F 10378E           (      monitor.asm):00356 (4)     511         cmpr    A,E                 ; Do the checksums match
E632 2708             (      monitor.asm):00357 (3)     514         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E634 11C681           (      monitor.asm):00358 (3)     517         ldf     #$81                ; Sets the checksum failure flag
E637 8658             (      monitor.asm):00359 (2)     519         lda     #'X'                ; Load the failed checksum character
E639 BDE1BE           (      monitor.asm):00360 (7)     526         jsr     OutChar             ; Print it Exit routine
E63C                  (      monitor.asm):00361                 LoadCheckFlag:
E63C 11C180           (      monitor.asm):00362 (3)     529         cmpf    #$80                ; Was there any checksum errors?
E63F 270B             (      monitor.asm):00363 (3)     532         beq     LoadSuccess         ; If no errors, then print success
E641 BDE3A8           (      monitor.asm):00364 (7)     539         jsr     OutCRLF             ; Change line
E644 8EEC30           (      monitor.asm):00365 (3)     542         ldx     #LoadFailedErr      ; Print download failed
E647 BDE3CE           (      monitor.asm):00366 (7)     549         jsr     OutStr              ;
E64A 201A             (      monitor.asm):00367 (3)     552         bra     LoadEnd             ;
E64C                  (      monitor.asm):00368                 LoadSuccess:
E64C BEEE72           (      monitor.asm):00369 (5)     557         ldx     TempWord            ; Restore last position of X
E64F CC36FF           (      monitor.asm):00370 (3)     560         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E652 ED81             (      monitor.asm):00371 (5+2)   567         std     ,X++                ; Store it at the end of code
E654 CC103A           (      monitor.asm):00372 (3)     570         ldd     #$103A              ; Save opcode "pshuw"
E657 ED81             (      monitor.asm):00373 (5+2)   577         std     ,X++                ; Store it at the end of code
E659 8639             (      monitor.asm):00374 (2)     579         lda     #$39                ; Save opcode "rts"
E65B A784             (      monitor.asm):00375 (4+0)   583         sta     ,X                  ; Store it at the end of code to return to prompt
E65D BDE3A8           (      monitor.asm):00376 (7)     590         jsr     OutCRLF             ; Change line
E660 8EEC58           (      monitor.asm):00377 (3)     593         ldx     #LoadSuccessMsg     ; Print success message
E663 BDE3CE           (      monitor.asm):00378 (7)     600         jsr     OutStr
E666                  (      monitor.asm):00379                 LoadEnd:
E666 1039             (      monitor.asm):00380 (6)     606         pulsw
E668 35B7             (      monitor.asm):00381 (4+9)   619         puls    A,B,X,Y,CC,PC
                      (      monitor.asm):00382                 
                      (      monitor.asm):00383                 ;  __  __                                             __  __                 
                      (      monitor.asm):00384                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00385                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00386                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00387                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00388                 ;                                             |___/                   |_|
                      (      monitor.asm):00389                 ;
                      (      monitor.asm):00390                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00391                 ; ===========================================
                      (      monitor.asm):00392                 
E66A                  (      monitor.asm):00393                 MemoryMap:
E66A 3406             (      monitor.asm):00394 (4+2)   625         pshs    A,B
E66C 8EEC6E           (      monitor.asm):00395 (3)     628         ldx     #MemoryMapMsg
E66F BDE3CE           (      monitor.asm):00396 (7)     635         jsr     OutStr              ; Print up to end of RAM
E672 CCDFFF           (      monitor.asm):00397 (3)     638         ldd     #RomStart-1
E675 BDE3F9           (      monitor.asm):00398 (7)     645         jsr     OutWord             ; Print RAM end
E678 BDE3CE           (      monitor.asm):00399 (7)     652         jsr     OutStr              ; Print up to begining of ROM
E67B 104C             (      monitor.asm):00400 (2)     654         incd
E67D BDE3F9           (      monitor.asm):00401 (7)     661         jsr     OutWord             ; Print ROM start
E680 BDE3CE           (      monitor.asm):00402 (7)     668         jsr     OutStr              ; Print till the end of mapping
E683 3586             (      monitor.asm):00403 (4+4)   676         puls    A,B,PC
                      (      monitor.asm):00404                 
                      (      monitor.asm):00405                 ;  ____                  _    
                      (      monitor.asm):00406                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00407                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00408                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00409                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00410                 ;
                      (      monitor.asm):00411                 ;
                      (      monitor.asm):00412                 ; Read a byte from a specific or current address
                      (      monitor.asm):00413                 ; ==============================================
                      (      monitor.asm):00414                 
E685                  (      monitor.asm):00415                 Peek:
E685 BDE891           (      monitor.asm):00416 (7)     683         jsr     SkipSpaces
E688 A684             (      monitor.asm):00417 (4+0)   687         lda     ,X
E68A 2708             (      monitor.asm):00418 (3)     690         beq     PeekDisplay
E68C BDE278           (      monitor.asm):00419 (7)     697         jsr     GetStrWord
E68F 241A             (      monitor.asm):00420 (3)     700         bcc     PeekInvalidAddr
E691 FDEE5D           (      monitor.asm):00421 (5)     705         std     CurrAddress
E694                  (      monitor.asm):00422                 PeekDisplay:
E694 FCEE5D           (      monitor.asm):00423 (5)     710         ldd     CurrAddress
E697 BDE3F9           (      monitor.asm):00424 (7)     717         jsr     OutWord
E69A 863D             (      monitor.asm):00425 (2)     719         lda     #'='
E69C BDE1BE           (      monitor.asm):00426 (7)     726         jsr     OutChar
E69F A69FEE5D         (      monitor.asm):00427 (4+5)   735         lda     [CurrAddress]
E6A3 BDE386           (      monitor.asm):00428 (7)     742         jsr     OutByte
E6A6 BDE3A8           (      monitor.asm):00429 (7)     749         jsr     OutCRLF
E6A9 2003             (      monitor.asm):00430 (3)     752         bra     PeekEnd
E6AB                  (      monitor.asm):00431                 PeekInvalidAddr:
E6AB BDE46B           (      monitor.asm):00432 (7)     759         jsr     ErrInvalidAddress
E6AE                  (      monitor.asm):00433                 PeekEnd:
E6AE 39               (      monitor.asm):00434 (4)     763         rts
                      (      monitor.asm):00435                 
                      (      monitor.asm):00436                 ;  ____            _           
                      (      monitor.asm):00437                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00438                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00439                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00440                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00441                 ;
                      (      monitor.asm):00442                 ;
                      (      monitor.asm):00443                 ; Writes a byte at a specific address
                      (      monitor.asm):00444                 ; ===================================
                      (      monitor.asm):00445                 
E6AF                  (      monitor.asm):00446                 Poke:
E6AF BDE891           (      monitor.asm):00447 (7)     770         jsr     SkipSpaces          ; Remove excessive leading spaces
E6B2 A684             (      monitor.asm):00448 (4+0)   774         lda     ,X                  ; Load character
E6B4 2735             (      monitor.asm):00449 (3)     777         beq     PokeNoParameters    ; If no parameters, print no parameter error
E6B6 BDE278           (      monitor.asm):00450 (7)     784         jsr     GetStrWord          ; Get an address
E6B9 242B             (      monitor.asm):00451 (3)     787         bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E6BB FDEE5D           (      monitor.asm):00452 (5)     792         std     CurrAddress         ; Save address
E6BE BDE891           (      monitor.asm):00453 (7)     799         jsr     SkipSpaces          ; Remove unecessary spaces
E6C1 BDE1E3           (      monitor.asm):00454 (7)     806         jsr     GetStrByte          ; Get byte
E6C4 241B             (      monitor.asm):00455 (3)     809         bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
E6C6 A79FEE5D         (      monitor.asm):00456 (4+5)   818         sta     [CurrAddress]       ; Poke value at address
E6CA FCEE5D           (      monitor.asm):00457 (5)     823         ldd     CurrAddress         ; Print address
E6CD BDE3F9           (      monitor.asm):00458 (7)     830         jsr     OutWord             ;
E6D0 863D             (      monitor.asm):00459 (2)     832         lda     #'='                ; Print a colon
E6D2 BDE1BE           (      monitor.asm):00460 (7)     839         jsr     OutChar             ;
E6D5 A69FEE5D         (      monitor.asm):00461 (4+5)   848         lda     [CurrAddress]       ; Load A from Current Address
E6D9 BDE386           (      monitor.asm):00462 (7)     855         jsr     OutByte             ; Print byte value
E6DC BDE3A8           (      monitor.asm):00463 (7)     862         jsr     OutCRLF             ; New line
E6DF 200D             (      monitor.asm):00464 (3)     865         bra     PokeEnd
E6E1                  (      monitor.asm):00465                 PokeInvalidByte:
E6E1 BDE478           (      monitor.asm):00466 (7)     872         jsr     ErrInvalidByte      ; Print invalid byte
E6E4 2008             (      monitor.asm):00467 (3)     875         bra     PokeEnd
E6E6                  (      monitor.asm):00468                 PokeInvalidAddress:
E6E6 BDE46B           (      monitor.asm):00469 (7)     882         jsr     ErrInvalidAddress   ; Print invalid address error
E6E9 2003             (      monitor.asm):00470 (3)     885         bra     PokeEnd
E6EB                  (      monitor.asm):00471                 PokeNoParameters:
E6EB BDE49F           (      monitor.asm):00472 (7)     892         jsr     ErrNoParameter      ; Print no parameter error
E6EE                  (      monitor.asm):00473                 PokeEnd:
E6EE 39               (      monitor.asm):00474 (4)     896         rts
                      (      monitor.asm):00475                 
                      (      monitor.asm):00476                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00477                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00478                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00479                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00480                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00481                 ;                                                  |___/                                     
                      (      monitor.asm):00482                 ;
                      (      monitor.asm):00483                 ; Print Registers
                      (      monitor.asm):00484                 ; ===============
E6EF                  (      monitor.asm):00485                 PrintRegisters:
                      (      monitor.asm):00486                     ; Print Register A
E6EF 8641             (      monitor.asm):00487 (2)     898         lda     #'A'
E6F1 BDE1BE           (      monitor.asm):00488 (7)     905         jsr     OutChar
E6F4 863A             (      monitor.asm):00489 (2)     907         lda     #':'
E6F6 BDE1BE           (      monitor.asm):00490 (7)     914         jsr     OutChar
E6F9 B6EE63           (      monitor.asm):00491 (4)     918         lda     RegA
E6FC BDE386           (      monitor.asm):00492 (7)     925         jsr     OutByte
E6FF 8620             (      monitor.asm):00493 (2)     927         lda     #' '
E701 BDE1BE           (      monitor.asm):00494 (7)     934         jsr     OutChar
                      (      monitor.asm):00495                     ; Print Register B
E704 8642             (      monitor.asm):00496 (2)     936         lda     #'B'
E706 BDE1BE           (      monitor.asm):00497 (7)     943         jsr     OutChar
E709 863A             (      monitor.asm):00498 (2)     945         lda     #':'
E70B BDE1BE           (      monitor.asm):00499 (7)     952         jsr     OutChar
E70E B6EE64           (      monitor.asm):00500 (4)     956         lda     RegB
E711 BDE386           (      monitor.asm):00501 (7)     963         jsr     OutByte
E714 8620             (      monitor.asm):00502 (2)     965         lda     #' '
E716 BDE1BE           (      monitor.asm):00503 (7)     972         jsr     OutChar
                      (      monitor.asm):00504                     ; Print Register E
E719 8645             (      monitor.asm):00505 (2)     974         lda     #'E'
E71B BDE1BE           (      monitor.asm):00506 (7)     981         jsr     OutChar
E71E 863A             (      monitor.asm):00507 (2)     983         lda     #':'
E720 BDE1BE           (      monitor.asm):00508 (7)     990         jsr     OutChar
E723 B6EE65           (      monitor.asm):00509 (4)     994         lda     RegE
E726 BDE386           (      monitor.asm):00510 (7)     1001        jsr     OutByte
E729 8620             (      monitor.asm):00511 (2)     1003        lda     #' '
E72B BDE1BE           (      monitor.asm):00512 (7)     1010        jsr     OutChar
                      (      monitor.asm):00513                     ; Print Register F
E72E 8646             (      monitor.asm):00514 (2)     1012        lda     #'F'
E730 BDE1BE           (      monitor.asm):00515 (7)     1019        jsr     OutChar
E733 863A             (      monitor.asm):00516 (2)     1021        lda     #':'
E735 BDE1BE           (      monitor.asm):00517 (7)     1028        jsr     OutChar
E738 B6EE66           (      monitor.asm):00518 (4)     1032        lda     RegF
E73B BDE386           (      monitor.asm):00519 (7)     1039        jsr     OutByte
E73E 8620             (      monitor.asm):00520 (2)     1041        lda     #' '
E740 BDE1BE           (      monitor.asm):00521 (7)     1048        jsr     OutChar
                      (      monitor.asm):00522                     ; Print Register X
E743 8658             (      monitor.asm):00523 (2)     1050        lda     #'X'
E745 BDE1BE           (      monitor.asm):00524 (7)     1057        jsr     OutChar
E748 863A             (      monitor.asm):00525 (2)     1059        lda     #':'
E74A BDE1BE           (      monitor.asm):00526 (7)     1066        jsr     OutChar
E74D FCEE67           (      monitor.asm):00527 (5)     1071        ldd     RegX
E750 BDE3F9           (      monitor.asm):00528 (7)     1078        jsr     OutWord
E753 8620             (      monitor.asm):00529 (2)     1080        lda     #' '
E755 BDE1BE           (      monitor.asm):00530 (7)     1087        jsr     OutChar
                      (      monitor.asm):00531                     ; Print Register Y
E758 8659             (      monitor.asm):00532 (2)     1089        lda     #'Y'
E75A BDE1BE           (      monitor.asm):00533 (7)     1096        jsr     OutChar
E75D 863A             (      monitor.asm):00534 (2)     1098        lda     #':'
E75F BDE1BE           (      monitor.asm):00535 (7)     1105        jsr     OutChar
E762 FCEE69           (      monitor.asm):00536 (5)     1110        ldd     RegY
E765 BDE3F9           (      monitor.asm):00537 (7)     1117        jsr     OutWord
E768 8620             (      monitor.asm):00538 (2)     1119        lda     #' '
E76A BDE1BE           (      monitor.asm):00539 (7)     1126        jsr     OutChar
                      (      monitor.asm):00540                     ; Print Register U
E76D 8655             (      monitor.asm):00541 (2)     1128        lda     #'U'
E76F BDE1BE           (      monitor.asm):00542 (7)     1135        jsr     OutChar
E772 863A             (      monitor.asm):00543 (2)     1137        lda     #':'
E774 BDE1BE           (      monitor.asm):00544 (7)     1144        jsr     OutChar
E777 FCEE6B           (      monitor.asm):00545 (5)     1149        ldd     RegU
E77A BDE3F9           (      monitor.asm):00546 (7)     1156        jsr     OutWord
E77D 8620             (      monitor.asm):00547 (2)     1158        lda     #' '
E77F BDE1BE           (      monitor.asm):00548 (7)     1165        jsr     OutChar
                      (      monitor.asm):00549                     ; Print Register S
E782 8653             (      monitor.asm):00550 (2)     1167        lda     #'S'
E784 BDE1BE           (      monitor.asm):00551 (7)     1174        jsr     OutChar
E787 863A             (      monitor.asm):00552 (2)     1176        lda     #':'
E789 BDE1BE           (      monitor.asm):00553 (7)     1183        jsr     OutChar
E78C FCEE6D           (      monitor.asm):00554 (5)     1188        ldd     RegS
E78F BDE3F9           (      monitor.asm):00555 (7)     1195        jsr     OutWord
E792 8620             (      monitor.asm):00556 (2)     1197        lda     #' '
E794 BDE1BE           (      monitor.asm):00557 (7)     1204        jsr     OutChar
                      (      monitor.asm):00558                     ; Print Register CC
E797 8643             (      monitor.asm):00559 (2)     1206        lda     #'C'
E799 BDE1BE           (      monitor.asm):00560 (7)     1213        jsr     OutChar
E79C BDE1BE           (      monitor.asm):00561 (7)     1220        jsr     OutChar
E79F 863A             (      monitor.asm):00562 (2)     1222        lda     #':'
E7A1 BDE1BE           (      monitor.asm):00563 (7)     1229        jsr     OutChar
E7A4 B6EE61           (      monitor.asm):00564 (4)     1233        lda     RegCC
E7A7 BDE386           (      monitor.asm):00565 (7)     1240        jsr     OutByte
E7AA 8620             (      monitor.asm):00566 (2)     1242        lda     #' '
E7AC BDE1BE           (      monitor.asm):00567 (7)     1249        jsr     OutChar
                      (      monitor.asm):00568                     ; Print Register DP
E7AF 8644             (      monitor.asm):00569 (2)     1251        lda     #'D'
E7B1 BDE1BE           (      monitor.asm):00570 (7)     1258        jsr     OutChar
E7B4 8650             (      monitor.asm):00571 (2)     1260        lda     #'P'
E7B6 BDE1BE           (      monitor.asm):00572 (7)     1267        jsr     OutChar
E7B9 863A             (      monitor.asm):00573 (2)     1269        lda     #':'
E7BB BDE1BE           (      monitor.asm):00574 (7)     1276        jsr     OutChar
E7BE B6EE62           (      monitor.asm):00575 (4)     1280        lda     RegDP
E7C1 BDE386           (      monitor.asm):00576 (7)     1287        jsr     OutByte
E7C4 8620             (      monitor.asm):00577 (2)     1289        lda     #' '
E7C6 BDE1BE           (      monitor.asm):00578 (7)     1296        jsr     OutChar
                      (      monitor.asm):00579                     ; Print Program Counter
E7C9 8650             (      monitor.asm):00580 (2)     1298        lda     #'P'
E7CB BDE1BE           (      monitor.asm):00581 (7)     1305        jsr     OutChar
E7CE 8643             (      monitor.asm):00582 (2)     1307        lda     #'C'
E7D0 BDE1BE           (      monitor.asm):00583 (7)     1314        jsr     OutChar
E7D3 863A             (      monitor.asm):00584 (2)     1316        lda     #':'
E7D5 BDE1BE           (      monitor.asm):00585 (7)     1323        jsr     OutChar
E7D8 FCEE6F           (      monitor.asm):00586 (5)     1328        ldd     RegPC
E7DB BDE3F9           (      monitor.asm):00587 (7)     1335        jsr     OutWord
E7DE BDE3A8           (      monitor.asm):00588 (7)     1342        jsr     OutCRLF
E7E1 39               (      monitor.asm):00589 (4)     1346        rts
                      (      monitor.asm):00590                 
                      (      monitor.asm):00591                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):00592                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00593                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00594                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00595                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00596                 ;                                               |___/                                     
                      (      monitor.asm):00597                 ;
                      (      monitor.asm):00598                 ; Push Registers
                      (      monitor.asm):00599                 ; ==============
                      (      monitor.asm):00600                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):00601                 
E7E2                  (      monitor.asm):00602                 PushRegisters:  
                      (      monitor.asm):00603                     ; Recover register values from last run command
E7E2 103B             (      monitor.asm):00604 (6)     1352        puluw
E7E4 377F             (      monitor.asm):00605 (4+10)  1366        pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):00606                     ; Save registers in variables
E7E6 3401             (      monitor.asm):00607 (4+1)   1371        pshs    CC                  ; Store CC so it's not altered
E7E8 B7EE63           (      monitor.asm):00608 (4)     1375        sta     RegA                ; Save the A register
E7EB 3502             (      monitor.asm):00609 (4+1)   1380        puls    A                   ; Restore CC so it can be saved
E7ED B7EE61           (      monitor.asm):00610 (4)     1384        sta     RegCC               ; Save the condition code register
E7F0 F7EE64           (      monitor.asm):00611 (4)     1388        stb     RegB                ; Save the B register
E7F3 11B7EE65         (      monitor.asm):00612 (5)     1393        ste     RegE                ; Save the E register
E7F7 11F7EE66         (      monitor.asm):00613 (5)     1398        stf     RegF                ; Save the F register
E7FB BFEE67           (      monitor.asm):00614 (5)     1403        stx     RegX                ; Save the X register
E7FE 10BFEE69         (      monitor.asm):00615 (6)     1409        sty     RegY                ; Save the Y register
E802 10FFEE6D         (      monitor.asm):00616 (6)     1415        sts     RegS                ; Save the systemp stack
E806 3706             (      monitor.asm):00617 (4+2)   1421        pulu    D                   ; Restore PC in D
E808 830002           (      monitor.asm):00618 (3)     1424        subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
E80B FDEE6F           (      monitor.asm):00619 (5)     1429        std     RegPC               ; Save the program counter that was in D
E80E FFEE6B           (      monitor.asm):00620 (5)     1434        stu     RegU                ; Save the user stack
E811 39               (      monitor.asm):00621 (4)     1438        rts
                      (      monitor.asm):00622                 
                      (      monitor.asm):00623                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):00624                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00625                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00626                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00627                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00628                 ;                                         |___/                                     
                      (      monitor.asm):00629                 ;
                      (      monitor.asm):00630                 ; Pull Registers
                      (      monitor.asm):00631                 ; --------------
E812                  (      monitor.asm):00632                 PullRegisters:  
E812 B6EE61           (      monitor.asm):00633 (4)     1442        lda     RegCC               ; Load CC register
E815 3402             (      monitor.asm):00634 (4+1)   1447        pshs    A                   ; Store it so it can be restored
E817 B6EE63           (      monitor.asm):00635 (4)     1451        lda     RegA                ; Load the A register
E81A F6EE64           (      monitor.asm):00636 (4)     1455        ldb     RegB                ; Load the B register
E81D 11B6EE65         (      monitor.asm):00637 (5)     1460        lde     RegE                ; Load the E register
E821 11F6EE66         (      monitor.asm):00638 (5)     1465        ldf     RegF                ; Load the F register
E825 BEEE67           (      monitor.asm):00639 (5)     1470        ldx     RegX                ; Load the X register
E828 10BEEE69         (      monitor.asm):00640 (6)     1476        ldy     RegY                ; Load the Y register
E82C FEEE6B           (      monitor.asm):00641 (5)     1481        ldu     RegU                ; Load the user stack
E82F 3581             (      monitor.asm):00642 (4+3)   1488        puls    CC,PC
                      (      monitor.asm):00643                 
                      (      monitor.asm):00644                 ;  ____                  
                      (      monitor.asm):00645                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):00646                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):00647                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):00648                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):00649                 ;
                      (      monitor.asm):00650                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):00651                 ; -------------------------------------------------
                      (      monitor.asm):00652                 ; Input:    X = Command line string
                      (      monitor.asm):00653                 
E831                  (      monitor.asm):00654                 Run:
E831 BDE891           (      monitor.asm):00655 (7)     1495        jsr     SkipSpaces          ; Removes possible leading spaces
E834 A684             (      monitor.asm):00656 (4+0)   1499        lda     ,X                  ; Read character from command line
E836 2708             (      monitor.asm):00657 (3)     1502        beq     RunValidate         ; Use current address
E838                  (      monitor.asm):00658                 RunGetAddress:
E838 BDE278           (      monitor.asm):00659 (7)     1509        jsr     GetStrWord          ; Get address from the input buffer
E83B 2413             (      monitor.asm):00660 (3)     1512        bcc     RunError            ; Invalid address, then print error
E83D FDEE5D           (      monitor.asm):00661 (5)     1517        std     CurrAddress         ; Save address to memory
E840                  (      monitor.asm):00662                 RunValidate:
E840 A69FEE5D         (      monitor.asm):00663 (4+5)   1526        lda     [CurrAddress]       ; Load byte at specified address
E844 270D             (      monitor.asm):00664 (3)     1529        beq     RunEnd              ; If it's zero, then don't try to execute code
E846                  (      monitor.asm):00665                 RunExecute:
E846 7CEE60           (      monitor.asm):00666 (6)     1535        inc     RunFlag             ; Make run flag non zero
E849 BDE812           (      monitor.asm):00667 (7)     1542        jsr     PullRegisters       ; Restore registers from previous command
E84C 6E9FEE5D         (      monitor.asm):00668 (3+5)   1550        jmp     [CurrAddress]       ; Execute code at specified address
E850                  (      monitor.asm):00669                 RunError:
E850 BDE46B           (      monitor.asm):00670 (7)     1557        jsr     ErrInvalidAddress   ; If there's an error in the address, print it
E853                  (      monitor.asm):00671                 RunEnd:
E853 39               (      monitor.asm):00672 (4)     1561        rts
                      (      monitor.asm):00673                 
                      (      monitor.asm):00674                 ;  ____           _        _          _       _                           
                      (      monitor.asm):00675                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):00676                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):00677                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):00678                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):00679                 ;
                      (      monitor.asm):00680                 ; Sets the current address
                      (      monitor.asm):00681                 ; ========================
                      (      monitor.asm):00682                 ; Input:    X = Command line string
                      (      monitor.asm):00683                 
E854                  (      monitor.asm):00684                 SetAddress:
E854 3407             (      monitor.asm):00685 (4+3)   1568        pshs    A,B,CC
E856 BDE891           (      monitor.asm):00686 (7)     1575        jsr     SkipSpaces          ; Remove leading spaces
E859 A684             (      monitor.asm):00687 (4+0)   1579        lda     ,X                  ; Load first character
E85B 270F             (      monitor.asm):00688 (3)     1582        beq     SetAddressDefault   ; Is it the end of the string?
E85D BDE278           (      monitor.asm):00689 (7)     1589        jsr     GetStrWord          ; Get address from the input buffer
E860 2405             (      monitor.asm):00690 (3)     1592        bcc     SetAddressError     ; Error in address
E862 FDEE5D           (      monitor.asm):00691 (5)     1597        std     CurrAddress         ; Save the address
E865 200B             (      monitor.asm):00692 (3)     1600        bra     SetAddressEnd
E867                  (      monitor.asm):00693                 SetAddressError:
E867 BDE46B           (      monitor.asm):00694 (7)     1607        jsr     ErrInvalidAddress   ; Display address error
E86A 2006             (      monitor.asm):00695 (3)     1610        bra     SetAddressEnd
E86C                  (      monitor.asm):00696                 SetAddressDefault:
E86C CC0000           (      monitor.asm):00697 (3)     1613        ldd     #$0000
E86F FDEE5D           (      monitor.asm):00698 (5)     1618        std     CurrAddress         ; Set default address to $0000
E872                  (      monitor.asm):00699                 SetAddressEnd:
E872 3587             (      monitor.asm):00700 (4+5)   1627        puls    A,B,CC,PC
                      (      monitor.asm):00701                 
                      (      monitor.asm):00702                 ;  ____           _     ____                    _    
                      (      monitor.asm):00703                 ; / ___|    ___  | |_  | __ )    __ _   _ __   | | __
                      (      monitor.asm):00704                 ; \___ \   / _ \ | __| |  _ \   / _` | | '_ \  | |/ /
                      (      monitor.asm):00705                 ;  ___) | |  __/ | |_  | |_) | | (_| | | | | | |   < 
                      (      monitor.asm):00706                 ; |____/   \___|  \__| |____/   \__,_| |_| |_| |_|\_\
                      (      monitor.asm):00707                 ;
                      (      monitor.asm):00708                 ; Sets the current bank
                      (      monitor.asm):00709                 ; =====================
                      (      monitor.asm):00710                 ; Input:    X = Command line string
                      (      monitor.asm):00711                 
E874                  (      monitor.asm):00712                 SetBank:
E874 3403             (      monitor.asm):00713 (4+2)   1633        pshs    A,CC
E876 BDE891           (      monitor.asm):00714 (7)     1640        jsr     SkipSpaces          ; Remove leading spaces
E879 A684             (      monitor.asm):00715 (4+0)   1644        lda     ,X                  ; Load first character
E87B 270F             (      monitor.asm):00716 (3)     1647        beq     SetBankDefault      ; Is it the end of the string?
E87D BDE1E3           (      monitor.asm):00717 (7)     1654        jsr     GetStrByte          ; Get bank from the input buffer
E880 2405             (      monitor.asm):00718 (3)     1657        bcc     SetBankError        ; Error in byte
E882 B7EE5F           (      monitor.asm):00719 (4)     1661        sta     CurrBank            ; Save the bank
E885 2008             (      monitor.asm):00720 (3)     1664        bra     SetBankEnd
E887                  (      monitor.asm):00721                 SetBankError:
E887 BDE478           (      monitor.asm):00722 (7)     1671        jsr     ErrInvalidByte      ; Display byte error
E88A 2003             (      monitor.asm):00723 (3)     1674        bra     SetBankEnd
E88C                  (      monitor.asm):00724                 SetBankDefault:
E88C 7FEE5F           (      monitor.asm):00725 (6)     1680        clr     CurrBank            ; Set default bank to $00
E88F                  (      monitor.asm):00726                 SetBankEnd:
E88F 3583             (      monitor.asm):00727 (4+4)   1688        puls    A,CC,PC
                      (      monitor.asm):00728                 
                      (      monitor.asm):00729                 ;  ____    _      _           ____                                      
                      (      monitor.asm):00730                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):00731                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):00732                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):00733                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):00734                 ;                    |_|             |_|
                      (      monitor.asm):00735                 ;
                      (      monitor.asm):00736                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):00737                 ; ================================================================================
                      (      monitor.asm):00738                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):00739                 ; Output:   X = New position of pointer
                      (      monitor.asm):00740                 
                      (      monitor.asm):00741                     PRAGMA cc
                      (      monitor.asm):00742                 
E891                  (      monitor.asm):00743                 SkipSpaces:
E891 3403             (      monitor.asm):00744 (4+2)   6           pshs    A,CC
E893                  (      monitor.asm):00745                 SkipSpacesLoop:
E893 A684             (      monitor.asm):00746 (4+0)   10          lda     ,X                  ; Load character from string
E895 270B             (      monitor.asm):00747 (3)     13          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
E897 8120             (      monitor.asm):00748 (2)     15          cmpa    #' '                ; Is it a space?
E899 2607             (      monitor.asm):00749 (3)     18          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
E89B 3001             (      monitor.asm):00750 (4+1)   23          leax    1,X                 ; Increment index for next character
E89D 7CEE5C           (      monitor.asm):00751 (6)     29          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
E8A0 20F1             (      monitor.asm):00752 (3)     32          bra     SkipSpacesLoop      ; Go and read another character
E8A2                  (      monitor.asm):00753                 SkipSpacesEnd:
E8A2 3583             (      monitor.asm):00754 (4+4)   40          puls    A,CC,PC
                      (         main.asm):00184                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
E8A4                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
E8A4 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E8CC 0D0A             (         data.asm):00009                     .db     CR,LF
E8CE 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
E8F6 0D0A             (         data.asm):00011                     .db     CR,LF
E8F8 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
E91B 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
E91E 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
E941 0D0A0A2400       (         data.asm):00015                     .db     CR,LF,LF,'$',NULL
E946 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
E952 0D0A2400         (         data.asm):00017                     .db     CR,LF,'$',NULL
E956 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
E976 0D0A             (         data.asm):00019                     .db     CR,LF
E978 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E9A0 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
E9A4                  (         data.asm):00023                 CmdList:
E9A4 41444452         (         data.asm):00024                     .str    "ADDR"
E9A8 FF               (         data.asm):00025                     .db     EOD
E9A9 E854             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
E9AB 42414E4B         (         data.asm):00027                     .str    "BANK"
E9AF FF               (         data.asm):00028                     .db     EOD
E9B0 E874             (         data.asm):00029                     .dw     SetBank             ; Run code at current or specified address
E9B2 44554D50         (         data.asm):00030                     .str    "DUMP"
E9B6 FF               (         data.asm):00031                     .db     EOD
E9B7 E531             (         data.asm):00032                     .dw     Dump                ; Display content of memory
E9B9 48454C50         (         data.asm):00033                     .str    "HELP"
E9BD FF               (         data.asm):00034                     .db     EOD
E9BE E4B9             (         data.asm):00035                     .dw     CmdHelp             ; Help for various commands
E9C0 4C4F4144         (         data.asm):00036                     .str    "LOAD"
E9C4 FF               (         data.asm):00037                     .db     EOD
E9C5 E595             (         data.asm):00038                     .dw     LoadIntelHex        ; Upload Intel Hex code
E9C7 4D4150           (         data.asm):00039                     .str    "MAP"
E9CA FF               (         data.asm):00040                     .db     EOD
E9CB E66A             (         data.asm):00041                     .dw     MemoryMap           ; Memory map of LogicSpark-09
E9CD 5045454B         (         data.asm):00042                     .str    "PEEK"
E9D1 FF               (         data.asm):00043                     .db     EOD
E9D2 E685             (         data.asm):00044                     .dw     Peek                ; Read a byte of memory
E9D4 504F4B45         (         data.asm):00045                     .str    "POKE"
E9D8 FF               (         data.asm):00046                     .db     EOD
E9D9 E6AF             (         data.asm):00047                     .dw     Poke                ; Write a byte of memory
E9DB 524547           (         data.asm):00048                     .str    "REG"
E9DE FF               (         data.asm):00049                     .db     EOD
E9DF E6EF             (         data.asm):00050                     .dw     PrintRegisters      ; Print registers
E9E1 52554E           (         data.asm):00051                     .str    "RUN"
E9E4 FF               (         data.asm):00052                     .db     EOD
E9E5 E831             (         data.asm):00053                     .dw     Run                 ; Run code at current or specified address
E9E7 00               (         data.asm):00054                     .db     NULL
                      (         data.asm):00055                 
E9E8                  (         data.asm):00056                 CmdHelpMsg: ;                                        *                       *               *
E9E8 4C697374206F6620 (         data.asm):00057                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
E9FF 0D0A             (         data.asm):00058                     .db     CR,LF
EA01 20202D2041444452 (         data.asm):00059                     .str    "  - ADDR: Set current address"
     3A20536574206375
     7272656E74206164
     6472657373
EA1E 0D0A             (         data.asm):00060                     .db     CR,LF
EA20 20202D2042414E4B (         data.asm):00061                     .str    "  - BANK: Set current bank"
     3A20536574206375
     7272656E74206261
     6E6B
EA3A 0D0A             (         data.asm):00062                     .db     CR,LF
EA3C 20202D2044554D50 (         data.asm):00063                     .str    "  - DUMP: Display memory content"
     3A20446973706C61
     79206D656D6F7279
     20636F6E74656E74
EA5C 0D0A             (         data.asm):00064                     .db     CR,LF
EA5E 20202D2048454C50 (         data.asm):00065                     .str    "  - HELP: This help screen"
     3A20546869732068
     656C702073637265
     656E
EA78 0D0A             (         data.asm):00066                     .db     CR,LF
EA7A 20202D204C4F4144 (         data.asm):00067                     .str    "  - LOAD: Load Intel Hex from console"
     3A204C6F61642049
     6E74656C20486578
     2066726F6D20636F
     6E736F6C65
EA9F 0D0A             (         data.asm):00068                     .db     CR,LF
EAA1 20202D204D41503A (         data.asm):00069                     .str    "  - MAP: Memory and I/O map of system"
     204D656D6F727920
     616E6420492F4F20
     6D6170206F662073
     797374656D
EAC6 0D0A             (         data.asm):00070                     .db     CR,LF
EAC8 20202D205045454B (         data.asm):00071                     .str    "  - PEEK: Read a byte of memory"
     3A20526561642061
     2062797465206F66
     206D656D6F7279
EAE7 0D0A             (         data.asm):00072                     .db     CR,LF
EAE9 20202D20504F4B45 (         data.asm):00073                     .str    "  - POKE: Write a byte into memory"
     3A20577269746520
     6120627974652069
     6E746F206D656D6F
     7279
EB0B 0D0A             (         data.asm):00074                     .db     CR,LF
EB0D 20202D205245473A (         data.asm):00075                     .str    "  - REG: Print the registers content"
     205072696E742074
     6865207265676973
     7465727320636F6E
     74656E74
EB31 0D0A             (         data.asm):00076                     .db     CR,LF
EB33 20202D2052554E3A (         data.asm):00077                     .str    "  - RUN: Execute code"
     2045786563757465
     20636F6465
EB48 0D0A00           (         data.asm):00078                     .db     CR,LF,NULL
                      (         data.asm):00079                 
EB4B                  (         data.asm):00080                 ErrInvalidAddrMsg:
EB4B 496E76616C696420 (         data.asm):00081                     .str    "Invalid address!"
     6164647265737321
EB5B 0D0A00           (         data.asm):00082                     .db     CR,LF,NULL
                      (         data.asm):00083                 
EB5E                  (         data.asm):00084                 ErrInvalidByteMsg:
EB5E 496E76616C696420 (         data.asm):00085                     .str    "Invalid byte!"
     6279746521
EB6B 0D0A00           (         data.asm):00086                     .db     CR,LF,NULL
                      (         data.asm):00087                 
EB6E                  (         data.asm):00088                 ErrInvalidParamMsg:
EB6E 496E76616C696420 (         data.asm):00089                     .str    "Invalid parameter!"
     706172616D657465
     7221
EB80 0D0A00           (         data.asm):00090                     .db     CR,LF,NULL
                      (         data.asm):00091                 
EB83                  (         data.asm):00092                 ErrNoParameterMsg:
EB83 4E6F20706172616D (         data.asm):00093                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
EB9E 0D0A00           (         data.asm):00094                     .db     CR,LF,NULL
                      (         data.asm):00095                 
EBA1                  (         data.asm):00096                 ErrInvalidCmdMsg:
EBA1 496E76616C696420 (         data.asm):00097                     .str    "Invalid command!"
     636F6D6D616E6421
EBB1 0D0A00           (         data.asm):00098                     .db     CR,LF,NULL
                      (         data.asm):00099                 
EBB4                  (         data.asm):00100                 ErrSyntaxErrorMsg:
EBB4 53796E7461782065 (         data.asm):00101                     .str    "Syntax error!"
     72726F7221
EBC1 0D0A00           (         data.asm):00102                     .db     CR,LF,NULL
                      (         data.asm):00103                     
EBC4                  (         data.asm):00104                 LoadStartMsg:
EBC4 4C6F616420363330 (         data.asm):00105                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
EBE6 0D0A             (         data.asm):00106                     .db     CR,LF
EBE8 5072657373204553 (         data.asm):00107                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
EBFC 0D0A00           (         data.asm):00108                     .db     CR,LF,NULL
                      (         data.asm):00109                 
EBFF                  (         data.asm):00110                 LoadUserAbortErr:
EBFF 5472616E73666572 (         data.asm):00111                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
EC17 0D0A00           (         data.asm):00112                     .db     CR,LF,NULL
                      (         data.asm):00113                 
EC1A                  (         data.asm):00114                 LoadRecordErr:
EC1A 556E6B6E6F776E20 (         data.asm):00115                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
EC2F 00               (         data.asm):00116                     .db     NULL
                      (         data.asm):00117                 
EC30                  (         data.asm):00118                 LoadFailedErr:
EC30 446F776E6C6F6164 (         data.asm):00119                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
EC55 0D0A00           (         data.asm):00120                     .db     CR,LF,NULL
                      (         data.asm):00121                 
EC58                  (         data.asm):00122                 LoadSuccessMsg:
EC58 446F776E6C6F6164 (         data.asm):00123                     .str    "Download Successful"
     2053756363657373
     66756C
EC6B 0D0A00           (         data.asm):00124                     .db     CR,LF,NULL
                      (         data.asm):00125                 
EC6E                  (         data.asm):00126                 MemoryMapMsg:
                      (         data.asm):00127                     ; Memory Map:
EC6E 4D656D6F7279204D (         data.asm):00128                     .str    "Memory Map:"
     61703A
EC79 0D0A             (         data.asm):00129                     .db     CR,LF
EC7B 202052414D3A2020 (         data.asm):00130                     .str    "  RAM:       $0000-$"
     2020202020243030
     30302D24
EC8F 000D0A           (         data.asm):00131                     .db     NULL,CR,LF
EC92 2020524F4D3A2020 (         data.asm):00132                     .str    "  ROM:       $"
     202020202024
ECA0 00               (         data.asm):00133                     .db     NULL
ECA1 2D2446444646     (         data.asm):00134                     .str    "-$FDFF"
ECA7 0D0A             (         data.asm):00135                     .db     CR,LF
ECA9 2020436F6E737420 (         data.asm):00136                     .str    "  Const RAM: $FE00-$FEFF"
     52414D3A20244645
     30302D2446454646
ECC1 0D0A             (         data.asm):00137                     .db     CR,LF
ECC3 2020492F4F207261 (         data.asm):00138                     .str    "  I/O range: $FF00-$FFEF"
     6E67653A20244646
     30302D2446464546
ECDB 0D0A             (         data.asm):00139                     .db     CR,LF
ECDD 2020566563746F72 (         data.asm):00140                     .str    "  Vectors:   $FFF0-$FFFF"
     733A202020244646
     46302D2446464646
ECF5 0D0A             (         data.asm):00141                     .db     CR,LF
ECF7 492F4F204D61703A (         data.asm):00142                     .str    "I/O Map:"
ECFF 0D0A             (         data.asm):00143                     .db     CR,LF
ED01 2020524F4D204469 (         data.asm):00144                     .str    "  ROM Dissable: $FF08 (W)"
     737361626C653A20
     2446463038202857
     29
ED1A 0D0A             (         data.asm):00145                     .db     CR,LF
ED1C 2020496E742E2056 (         data.asm):00146                     .str    "  Int. Vector:  $FF09 (R)"
     6563746F723A2020
     2446463039202852
     29
ED35 0D0A             (         data.asm):00147                     .db     CR,LF
ED37 2020414349413120 (         data.asm):00148                     .str    "  ACIA1 (USB):  $FF68-$FF6B"
     28555342293A2020
     24464636382D2446
     463642
ED52 0D0A00           (         data.asm):00149                     .db     CR,LF,NULL
                      (         main.asm):00185                 
                      (         main.asm):00186                 ;  ___           _                                          _         
                      (         main.asm):00187                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00188                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00189                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00190                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00191                 ;                                                  |_|
                      (         main.asm):00192                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00193                 
                      (         main.asm):00194                     PRAGMA cc
                      (         main.asm):00195                     
ED55                  (         main.asm):00196                 IllegalDiv0:
ED55 3B               (         main.asm):00197 (17+?)  17          rti
                      (         main.asm):00198                     
                      (         main.asm):00199                     PRAGMA cc
                      (         main.asm):00200                 
ED56                  (         main.asm):00201                 SoftInt3:
ED56 3B               (         main.asm):00202 (17+?)  17          rti
                      (         main.asm):00203                     
                      (         main.asm):00204                     PRAGMA cc
                      (         main.asm):00205                 
ED57                  (         main.asm):00206                 SoftInt2:
ED57 3B               (         main.asm):00207 (17+?)  17          rti
                      (         main.asm):00208                     
                      (         main.asm):00209                     PRAGMA cc
                      (         main.asm):00210                 
ED58                  (         main.asm):00211                 SoftInt1:
ED58 3B               (         main.asm):00212 (17+?)  17          rti
                      (         main.asm):00213                     
                      (         main.asm):00214                     PRAGMA cc
                      (         main.asm):00215                 
ED59                  (         main.asm):00216                 FIRQInt:
ED59 3B               (         main.asm):00217 (17+?)  17          rti
                      (         main.asm):00218                 
                      (         main.asm):00219                     PRAGMA cc
                      (         main.asm):00220                 
ED5A                  (         main.asm):00221                 IRQInt:
ED5A 3B               (         main.asm):00222 (17+?)  17          rti
                      (         main.asm):00223                 
                      (         main.asm):00224                     PRAGMA cc
                      (         main.asm):00225                 
ED5B                  (         main.asm):00226                 NMIInt:
ED5B 3B               (         main.asm):00227 (17+?)  17          rti
                      (         main.asm):00228                 
                      (         main.asm):00229                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00230                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00231                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00232                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00233                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00234                 ;          |___/
                      (         main.asm):00235                 ;
                      (         main.asm):00236                 ; System variables used by monitor subroutines
                      (         main.asm):00237                 ; ============================================
                      (         main.asm):00238                 
ED5C                  (         main.asm):00239                 InStrBuffer:    .DS     $100    ; String input for console input
EE5C                  (         main.asm):00240                 CmdErrorPtr:    .DS     1       ; Command prompt error pointer
EE5D                  (         main.asm):00241                 CurrAddress:    .DS     2       ; Current address, useful for monitor actions
EE5F                  (         main.asm):00242                 CurrBank:       .DS     1       ; Current bank number, relative to current address
EE60                  (         main.asm):00243                 RunFlag         .DS     1       ; Run flag to indicate registers should be saved or not
EE61                  (         main.asm):00244                 RegCC:          .DS     1       ; Register CC
EE62                  (         main.asm):00245                 RegDP:          .DS     1       ; Register DP
EE63                  (         main.asm):00246                 RegA:           .DS     1       ; Register A
EE64                  (         main.asm):00247                 RegB:           .DS     1       ; Register B
EE65                  (         main.asm):00248                 RegE:           .DS     1       ; Register E
EE66                  (         main.asm):00249                 RegF:           .DS     1       ; Register F
EE67                  (         main.asm):00250                 RegX:           .DS     2       ; Register X
EE69                  (         main.asm):00251                 RegY:           .DS     2       ; Register Y
EE6B                  (         main.asm):00252                 RegU:           .DS     2       ; User stack
EE6D                  (         main.asm):00253                 RegS:           .DS     2       ; System stack
EE6F                  (         main.asm):00254                 RegPC:          .DS     2       ; Register PC
EE71                  (         main.asm):00255                 TempByte:       .DS     1       ; Temporary storage byte (8-bit)
EE72                  (         main.asm):00256                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
EE72                  (         main.asm):00257                 TempW1:         .DS     1       ; Word MSB
EE73                  (         main.asm):00258                 TempW2:         .DS     1       ; Word LSB
EE74                  (         main.asm):00259                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
EE74                  (         main.asm):00260                 TempQ1:         .DS     1       ; Quad High MSB
EE75                  (         main.asm):00261                 TempQ2:         .DS     1       ; Quad Low MSB
EE76                  (         main.asm):00262                 TempQ3:         .DS     1       ; Quad High LSB
EE77                  (         main.asm):00263                 TempQ4:         .DS     1       ; Quad Low LSB
EE78                  (         main.asm):00264                 VarEnd:
                      (         main.asm):00265                 
EE78 5353535353535353 (         main.asm):00266                     FILL 'S',JmpStart-VarEnd    ; Clear area with $00
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
                      (         main.asm):00267                 
                      (         main.asm):00268                 ;      _                             
                      (         main.asm):00269                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00270                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00271                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00272                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00273                 ;                             |_|    
                      (         main.asm):00274                 ;
                      (         main.asm):00275                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00276                 ; =======================================================
                      (         main.asm):00277                 
                      (         main.asm):00278                     ORG $FD00
                      (         main.asm):00279                 
FD00                  (         main.asm):00280                 JmpStart:
FD00 E15B             (         main.asm):00281                 JmpCls:             .DW     Cls
FD02 E1CD             (         main.asm):00282                 JmpDelChar:         .DW     DelChar
FD04 E1E3             (         main.asm):00283                 JmpGetStrByte:      .DW     GetStrByte
FD06 E252             (         main.asm):00284                 JmpGetStrNibble:    .DW     GetStrNibble
FD08 E278             (         main.asm):00285                 JmpGetStrWord:      .DW     GetStrWord
FD0A E2E7             (         main.asm):00286                 JmpInByte:          .DW     InByte
FD0C E1A4             (         main.asm):00287                 JmpInChar:          .DW     InChar
FD0E E1AF             (         main.asm):00288                 JmpInCharNW:        .DW     InCharNW
FD10 E2F8             (         main.asm):00289                 JmpInStr:           .DW     InStr
FD12 E367             (         main.asm):00290                 JmpInWord:          .DW     InWord
FD14 E1BE             (         main.asm):00291                 JmpOutChar:         .DW     OutChar
FD16 E386             (         main.asm):00292                 JmpOutByte:         .DW     OutByte
FD18 E3A8             (         main.asm):00293                 JmpOutCRLF:         .DW     OutCRLF
FD1A E3B6             (         main.asm):00294                 JmpOutNibble:       .DW     OutNibble
FD1C E3CE             (         main.asm):00295                 JmpOutStr:          .DW     OutStr
FD1E E3F9             (         main.asm):00296                 JmpOutWord:         .DW     OutWord
FD20 E089             (         main.asm):00297                 JmpAscToBinNibble:  .DW     AscToBinNibble
FD22 E09C             (         main.asm):00298                 JmpAscToBinByte:    .DW     AscToBinByte
FD24 E0B2             (         main.asm):00299                 JmpAscToBinWord:    .DW     AscToBinWord
FD26 E0C4             (         main.asm):00300                 JmpBinToAscNibble:  .DW     BinToAscNibble
FD28 E0D4             (         main.asm):00301                 JmpBinToAscByte:    .DW     BinToAscByte
FD2A E0F0             (         main.asm):00302                 JmpBinToAscWord:    .DW     BinToAscWord
FD2C E101             (         main.asm):00303                 JmpBinToBcd:        .DW     BinToBcd
FD2E E14D             (         main.asm):00304                 JmpUpperCase:       .DW     UpperCase
FD30                  (         main.asm):00305                 JmpTableEnd:
                      (         main.asm):00306                 
FD30 4A4A4A4A4A4A4A4A (         main.asm):00307                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
                      (         main.asm):00308                 
                      (         main.asm):00309                 ;   ____                         _                     _   
                      (         main.asm):00310                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00311                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00312                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00313                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00314                 ;
                      (         main.asm):00315                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00316                 ; =====================================================================
                      (         main.asm):00317                 
                      (         main.asm):00318                     PRAGMA cc
                      (         main.asm):00319                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00320                     
FE00                  (         main.asm):00321                 ConstRAM:
FE00                  (         main.asm):00322                     .DS     256                 
                      (         main.asm):00323                 
                      (         main.asm):00324                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00325                 
FF00                  (         main.asm):00326                 InputOutputRange:
FF00                  (         main.asm):00327                     .DS     240
                      (         main.asm):00328                 
                      (         main.asm):00329                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00330                 
FFF0                  (         main.asm):00331                 Vectors:
FFF0 ED55             (         main.asm):00332                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 ED56             (         main.asm):00333                     .DW     SoftInt3            ; SWI3
FFF4 ED57             (         main.asm):00334                     .DW     SoftInt2            ; SWI2
FFF6 ED58             (         main.asm):00335                     .DW     SoftInt1            ; SWI
FFF8 ED59             (         main.asm):00336                     .DW     FIRQInt             ; FIRQ
FFFA ED5A             (         main.asm):00337                     .DW     IRQInt              ; IRQ
FFFC ED5B             (         main.asm):00338                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00339                     .DW     Reset               ; RESET
                      (         main.asm):00340                 
                      (         main.asm):00341                     END

Symbol Table:
[ G] AscToBinByte                     E09C
[ G] AscToBinNibble                   E089
[ G] AscToBinNibbleAlpha              E096
[ G] AscToBinNibbleEnd                E098
[ G] AscToBinWord                     E0B2
[ G] BinToAscByte                     E0D4
[ G] BinToAscNibble                   E0C4
[ G] BinToAscNibbleAlpha              E0D0
[ G] BinToAscNibbleEnd                E0D2
[ G] BinToAscWord                     E0F0
[ G] BinToBcd                         E101
[ G] BootMsg                          E8A4
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E15B
[ G] CmdErrorPtr                      EE5C
[ G] CmdHelp                          E4B9
[ G] CmdHelpMsg                       E9E8
[ G] CmdList                          E9A4
[ G] CmdParse                         E4C0
[ G] CmdParseChar                     E4D0
[ G] CmdParseEnd                      E50D
[ G] CmdParseExecute                  E4FD
[ G] CmdParseNone                     E50A
[ G] CmdParseSkip                     E4E3
[ G] CmdParseSkipLoop                 E4E9
[ G] CmdParseValid                    E4F5
[ G] CmdPrompt                        E50F
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E191
[ G] Com1RxNoWait                     E1AF
[ G] Com1RxNoWaitEnd                  E1BD
[ G] Com1RxWait                       E1A4
[ G] Com1Tx                           E1BE
[ G] Com1TxNotReady                   E1C0
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      EE5D
[ G] CurrBank                         EE5F
[ G] DelChar                          E1CD
[ G] DelCharLoop                      E1D1
[ G] Dump                             E531
[ G] DumpAddr                         E548
[ G] DumpByte                         E559
[ G] DumpChar                         E572
[ G] DumpCharDot                      E57D
[ G] DumpCharPrint                    E57F
[ G] DumpDisplay                      E540
[ G] DumpEnd                          E594
[ G] DumpInvalidAddress               E591
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E46B
[ G] ErrInvalidAddrMsg                EB4B
[ G] ErrInvalidByte                   E478
[ G] ErrInvalidByteMsg                EB5E
[ G] ErrInvalidCmdMsg                 EBA1
[ G] ErrInvalidCommand                E485
[ G] ErrInvalidParameter              E492
[ G] ErrInvalidParamMsg               EB6E
[ G] ErrNoParameter                   E49F
[ G] ErrNoParameterMsg                EB83
[ G] ErrorPointerLoop                 E459
[ G] ErrPointer                       E452
[ G] ErrSyntaxError                   E4AC
[ G] ErrSyntaxErrorMsg                EBB4
[ G] ESC                              001B
[ G] FIRQInt                          ED59
[ G] GetStrByte                       E1E3
[ G] GetStrByteCount                  E1EC
[ G] GetStrByteEnd                    E231
[ G] GetStrByteError                  E22F
[ G] GetStrByteFixed                  E235
[ G] GetStrByteFixedEnd               E250
[ G] GetStrByteFixedErr               E24E
[ G] GetStrByteGood                   E22B
[ G] GetStrByteParse                  E1F7
[ G] GetStrByteParse2                 E208
[ G] GetStrByteParseMore              E221
[ G] GetStrNibble                     E252
[ G] GetStrNibbleEnd                  E272
[ G] GetStrNibbleError                E269
[ G] GetStrNibbleGood                 E26D
[ G] GetStrWord                       E278
[ G] GetStrWordCount                  E27F
[ G] GetStrWordEnd                    E2E4
[ G] GetStrWordError                  E2E2
[ G] GetStrWordGood                   E2DC
[ G] GetStrWordParse                  E28A
[ G] GetStrWordParse2                 E29D
[ G] GetStrWordParse3                 E2AA
[ G] GetStrWordParse4                 E2BE
[ G] GetStrWordParseMore              E2D2
[ G] IllegalDiv0                      ED55
[ G] InByte                           E2E7
[ G] InChar                           E1A4
[ G] InCharNW                         E1AF
[ G] Init                             E000
[ G] InputOutputRange                 FF00
[ G] InStr                            E2F8
[ G] InStrBackspace                   E318
[ G] InStrBuffer                      ED5C
[ G] InStrClearCarry                  E361
[ G] InStrEnd                         E363
[ G] InStrEscape                      E32F
[ G] InStrPrintCR                     E351
[ G] InStrReadChar                    E302
[ G] InStrStoreChar                   E348
[ G] IntVector                        FF09
[ G] InWord                           E367
[ G] IRQInt                           ED5A
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD30
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E63C
[ G] LoadChecksum                     E609
[ G] LoadData                         E5F9
[ G] LoadEnd                          E666
[ G] LoadEOF                          E628
[ G] LoadFailedErr                    EC30
[ G] LoadFailure                      E61D
[ G] LoadIntelHex                     E595
[ G] LoadRecord                       E5A1
[ G] LoadRecordErr                    EC1A
[ G] LoadRecordType                   E5DC
[ G] LoadStart                        E5B1
[ G] LoadStartMsg                     EBC4
[ G] LoadSuccess                      E64C
[ G] LoadSuccessMsg                   EC58
[ G] LoadUserAbortErr                 EBFF
[ G] Main                             E064
[ G] MainRunExec                      E07F
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E66A
[ G] MemoryMapMsg                     EC6E
[ G] NMIInt                           ED5B
[ G] NULL                             0000
[ G] OutByte                          E386
[ G] OutByteDigit1NLZ                 E3A1
[ G] OutByteLZ                        E386
[ G] OutByteNLZ                       E395
[ G] OutChar                          E1BE
[ G] OutCRLF                          E3A8
[ G] OutNibble                        E3B6
[ G] OutNibbleLSB                     E3B6
[ G] OutNibbleMSB                     E3C0
[ G] OutStr                           E3CE
[ G] OutStrEnd                        E3DD
[ G] OutStrLoop                       E3D0
[ G] OutStrLZ                         E3CE
[ G] OutStrNLZ                        E3DF
[ G] OutStrNLZEnd                     E3F7
[ G] OutStrNLZLoop                    E3E2
[ G] OutStrNLZPrintChar               E3F0
[ G] OutWord                          E3F9
[ G] OutWordNLZ                       E416
[ G] OutWordNLZ2                      E429
[ G] OutWordNLZ3                      E439
[ G] OutWordNLZ4                      E449
[ G] OutWordNLZp2                     E434
[ G] OutWordNLZp3                     E444
[ G] Peek                             E685
[ G] PeekDisplay                      E694
[ G] PeekEnd                          E6AE
[ G] PeekInvalidAddr                  E6AB
[ G] Poke                             E6AF
[ G] PokeEnd                          E6EE
[ G] PokeInvalidAddress               E6E6
[ G] PokeInvalidByte                  E6E1
[ G] PokeNoParameters                 E6EB
[ G] PrintRegisters                   E6EF
[ G] PromptSize                       0009
[ G] PullRegisters                    E812
[ G] PushRegisters                    E7E2
[ G] RegA                             EE63
[ G] RegB                             EE64
[ G] RegCC                            EE61
[ G] RegDP                            EE62
[ G] RegE                             EE65
[ G] RegF                             EE66
[ G] RegPC                            EE6F
[ G] RegS                             EE6D
[ G] RegU                             EE6B
[ G] RegX                             EE67
[ G] RegY                             EE69
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0004
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              E831
[ G] RunEnd                           E853
[ G] RunError                         E850
[ G] RunExecute                       E846
[ G] RunFlag                          EE60
[ G] RunGetAddress                    E838
[ G] RunValidate                      E840
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       E854
[ G] SetAddressDefault                E86C
[ G] SetAddressEnd                    E872
[ G] SetAddressError                  E867
[ G] SetBank                          E874
[ G] SetBankDefault                   E88C
[ G] SetBankEnd                       E88F
[ G] SetBankError                     E887
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       E891
[ G] SkipSpacesEnd                    E8A2
[ G] SkipSpacesLoop                   E893
[ G] SoftInt1                         ED58
[ G] SoftInt2                         ED57
[ G] SoftInt3                         ED56
[ G] SPACE                            0020
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TempByte                         EE71
[ G] TempQ1                           EE74
[ G] TempQ2                           EE75
[ G] TempQ3                           EE76
[ G] TempQ4                           EE77
[ G] TempQuad                         EE74
[ G] TempW1                           EE72
[ G] TempW2                           EE73
[ G] TempWord                         EE72
[ G] UpperCase                        E14D
[ G] UpperCaseEnd                     E159
[ G] UsrStack                         FA00
[ G] VarEnd                           EE78
[ G] Vectors                          FFF0
