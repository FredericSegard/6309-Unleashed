                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; ****************************************************************************************
                      (         main.asm):00029         
                      (         main.asm):00030         ; Revision
                      (         main.asm):00031         ; --------
     0000             (         main.asm):00032         RevMajor    EQU $00             ; Major revision number: 0 = Breadboard, 1+ = PCB revision
     0004             (         main.asm):00033         RevMinor    EQU $0004           ; Minor revision number
                      (         main.asm):00034         
                      (         main.asm):00035         ; Keystrokes and delimiters
                      (         main.asm):00036         ; -------------------------
     0000             (         main.asm):00037         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00038         BS          EQU $08             ; Backspace
     0009             (         main.asm):00039         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00040         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00041         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00042         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00043         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00044         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00045         
                      (         main.asm):00046         ; Misc
                      (         main.asm):00047         ; ----
     E000             (         main.asm):00048         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00049         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     FC00             (         main.asm):00050         SysStack    EQU $FC00           ; Position system stack before Constant RAM space
     FA00             (         main.asm):00051         UsrStack    EQU $FA00           ; Position user stack before system stack
     0050             (         main.asm):00052         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00053         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00054         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00055         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00056         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00057         
                      (         main.asm):00058         ; I/O addresses
                      (         main.asm):00059         ; -------------
     FF08             (         main.asm):00060         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00061         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
                      (         main.asm):00062         
                      (         main.asm):00063         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00064         
                      (         main.asm):00065             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00066             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00067                 
                      (         main.asm):00068                     ORG $0000                   ; Start of code
                      (         main.asm):00069                 
0000                  (         main.asm):00070                 Reset:
                      (         main.asm):00071                 
0000 1A50             (         main.asm):00072 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00073 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00074                 
                      (         main.asm):00075                 ; -------------------
                      (         main.asm):00076                 ; *** SHADOW COPY ***
                      (         main.asm):00077                 ; -------------------
                      (         main.asm):00078                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00079                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00080                 
0005                  (         main.asm):00081                 ShadowCopy:
                      (         main.asm):00082                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00083 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00084 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00085 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00086 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00087                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00088                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00089 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00090 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00091 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00092 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00093 (3)     44          jmp     Init
                      (         main.asm):00094                 
0024                  (         main.asm):00095                 ShadowEnd:
0024 0000000000000000 (         main.asm):00096                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00097                 
                      (         main.asm):00098                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00099                 
                      (         main.asm):00100                     PRAGMA cc
                      (         main.asm):00101                     
                      (         main.asm):00102                     ORG RomStart
                      (         main.asm):00103                 
E000                  (         main.asm):00104                 Init:
E000 B7FF08           (         main.asm):00105 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00106                 
                      (         main.asm):00107                     ; Clear the shadow copy code
E003 8E0100           (         main.asm):00108 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00109 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00110 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00111 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00112                 
                      (         main.asm):00113                     ; Configure the stacks
E011 CEFA00           (         main.asm):00114 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFEE66           (         main.asm):00115 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00116 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFEE68         (         main.asm):00117 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00118                     
                      (         main.asm):00119                     ; Initialize peripherals
E01F BDE192           (         main.asm):00120 (7)     46          jsr     Com1Init            ; Initialize ACIA1
                      (         main.asm):00121                     
                      (         main.asm):00122                     ; Print boot message
E022 BDE15C           (         main.asm):00123 (7)     53          jsr     Cls                 ; Clears the screen
E025 8EE89F           (         main.asm):00124 (3)     56          ldx     #BootMsg            ; Print title
E028 BDE3CF           (         main.asm):00125 (7)     63          jsr     OutStr              ;
E02B 8600             (         main.asm):00126 (2)     65          lda     #RevMajor           ; Print major version
E02D BDE396           (         main.asm):00127 (7)     72          jsr     OutByteNLZ          ;
E030 862E             (         main.asm):00128 (2)     74          lda     #'.'                ; Print dot
E032 BDE1BF           (         main.asm):00129 (7)     81          jsr     OutChar             ;
E035 CC0004           (         main.asm):00130 (3)     84          ldd     #RevMinor           ; Print minor version
E038 BDE417           (         main.asm):00131 (7)     91          jsr     OutWordNLZ          ;
E03B BDE3CF           (         main.asm):00132 (7)     98          jsr     OutStr              ;
E03E CCE000           (         main.asm):00133 (3)     101         ldd     #RomStart           ; Free RAM available
E041 BDE3FA           (         main.asm):00134 (7)     108         jsr     OutWord
E044 BDE3CF           (         main.asm):00135 (7)     115         jsr     OutStr
E047 CC0E8D           (         main.asm):00136 (3)     118         ldd     #JmpStart-VarEnd    ; Free shadow RAM left
E04A BDE3FA           (         main.asm):00137 (7)     125         jsr     OutWord
E04D BDE3CF           (         main.asm):00138 (7)     132         jsr     OutStr
                      (         main.asm):00139                 
                      (         main.asm):00140                     ; Clear the registers
E050 104F             (         main.asm):00141 (2)     134         clrd                        ; Clear the D register (A & B)
E052 105F             (         main.asm):00142 (2)     136         clrw                        ; Clear the W register (E & F)
E054 8E0000           (         main.asm):00143 (3)     139         ldx     #$0000              ; Clear X register
E057 108E0000         (         main.asm):00144 (4)     143         ldy     #$0000              ; Clear Y register
                      (         main.asm):00145                 
                      (         main.asm):00146                     ; Clears some variables
E05B FDEE58           (         main.asm):00147 (5)     148         std     CurrAddress
E05E 7FEE5A           (         main.asm):00148 (6)     154         clr     CurrBank
E061 7FEE5B           (         main.asm):00149 (6)     160         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00150                     
                      (         main.asm):00151                     PRAGMA cc
                      (         main.asm):00152                 
E064                  (         main.asm):00153                 Main:
E064 BDE510           (         main.asm):00154 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E067 C646             (         main.asm):00155 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E069 8EED57           (         main.asm):00156 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E06C BDE2F9           (         main.asm):00157 (7)     19          jsr     InStr               ; Read the a string
E06F 24F3             (         main.asm):00158 (3)     22          bcc     Main                ; If no data in string then bypass parser
E071 BDE4C1           (         main.asm):00159 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00160                     ; Save registers after execution of a run command
E074 3401             (         main.asm):00161 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E076 7DEE5B           (         main.asm):00162 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E079 2604             (         main.asm):00163 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E07B 3501             (         main.asm):00164 (4+1)   47          puls    CC                  ; Restore CC
E07D 20E5             (         main.asm):00165 (3)     50          bra     Main                ; Loop back, without recording the resistors
E07F                  (         main.asm):00166                 MainRunExec:
E07F 3501             (         main.asm):00167 (4+1)   55          puls    CC                  ; Restore CC
E081 BDE7DD           (         main.asm):00168 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E084 7FEE5B           (         main.asm):00169 (6)     68          clr     RunFlag             ; Reset run flag
E087 20DB             (         main.asm):00170 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00171                 
                      (         main.asm):00172                 ;  ___                  _               _              
                      (         main.asm):00173                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00174                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00175                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00176                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00177                 ;
                      (         main.asm):00178                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00179                 ; ---------------------------------------------------------------
                      (         main.asm):00180                 
                      (         main.asm):00181                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E089                  (      convert.asm):00029                 AscToBinNibble:
E089 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E08B BDE14E           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E08E 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E090 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E092 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E094 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E096                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E096 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E098                  (      convert.asm):00038                 AscToBinNibbleEnd
E098 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E09A 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E09C                  (      convert.asm):00050                 AscToBinByte:
E09C 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E09E BDE089           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E0A1 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A2 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A3 48               (      convert.asm):00055 (1)     15          asla                        ;
E0A4 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0A5 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0A7 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0A9 BDE089           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0AC 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0AF 5F               (      convert.asm):00061 (1)     35          clrb
E0B0 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B2                  (      convert.asm):00072                 AscToBinWord:
E0B2 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0B4 BDE09C           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0B7 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0B9 BDE09C           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BC 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0BE 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0C0 105F             (      convert.asm):00079 (2)     34          clrw
E0C2 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0C4                  (      convert.asm):00098                 BinToAscNibble:
E0C4 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0C6 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0C8 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0CA 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0CC 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0CE 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0D0                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0D0 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D2                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D2 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0D4                  (      convert.asm):00117                 BinToAscByte:
E0D4 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0D6 1038             (      convert.asm):00119 (6)     11          pshsw
E0D8 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0DA 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0DB 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0DC 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0DD 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0DE BDE0C4           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0E1 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E3 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0E5 BDE0C4           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0E8 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0EA 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0EC 1039             (      convert.asm):00131 (6)     57          pulsw
E0EE 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0F0                  (      convert.asm):00141                 BinToAscWord:
E0F0 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F2 BDE0D4           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0F5 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0F7 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0F9 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E0FB BDE0D4           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E0FE 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E100 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E101                  (      convert.asm):00167                 BinToBcd:
E101 3417             (      convert.asm):00168 (4+5)   9           pshs    A,B,X,CC
E103 1038             (      convert.asm):00169 (6)     15          pshsw
                      (      convert.asm):00170                     ; Calculate 10,000's digit
E105 8E2710           (      convert.asm):00171 (3)     18          ldx     #10000              ; Load 10000 diviser
E108 AFE2             (      convert.asm):00172 (5+1)   24          stx     ,-S                 ; Save to stack
E10A 11AEE0           (      convert.asm):00173 (37)    61          divq    ,S+                 ; Divide Q by 10,000 (from stack): Quotient in W, Remainder in D
E10D 11E780           (      convert.asm):00174 (5+1)   67          stf     ,X+                 ; Save 10,000's digit to variable pointed by X
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E110 8E03E8           (      convert.asm):00176 (3)     70          ldx     #1000               ; Load 1000 diviser
E113 AFE2             (      convert.asm):00177 (5+1)   76          stx     ,-S                 ; Save to stack
E115 11AEE0           (      convert.asm):00178 (37)    113         divq    ,S+                 ; Divide Q by 1,000 (from stack): Quotient in W, Remainder in D
E118 1E06             (      convert.asm):00179 (5)     118         exg     D,W                 ; Exchange registers (Quotien is now in D, and remainder in W)
E11A 1048             (      convert.asm):00180 (2)     120         lsld                        ; Move 1,000's digit to high nibble
E11C 1048             (      convert.asm):00181 (2)     122         lsld                        ;   Had to exchange D <-> W
E11E 1048             (      convert.asm):00182 (2)     124         lsld                        ;   in order for lsld to work
E120 1048             (      convert.asm):00183 (2)     126         lsld                        ;
E122 E7E2             (      convert.asm):00184 (4+1)   131         stb     ,-S                 ; Save 1,000's digit in the stack for later addition
                      (      convert.asm):00185                     ; Calculate 100's digit
E124 8664             (      convert.asm):00186 (2)     133         lda     #100                ; Load 100
E126 A7E2             (      convert.asm):00187 (4+1)   138         sta     ,-S                 ; Store it in the stack
E128 4F               (      convert.asm):00188 (1)     139         clra                        ; Clear MSB of D
E129 1F60             (      convert.asm):00189 (4)     143         tfr     W,D                 ; Transfer remainder to D
E12B 11ADE0           (      convert.asm):00190 (27+1)  171         divd    ,S+                 ; Divide D by 100 (from stack): Quotient in B, Remainder in A
E12E EBE0             (      convert.asm):00191 (4+1)   176         addb    ,S+                 ; Add 1000's and 100's digit together
E130 E780             (      convert.asm):00192 (4+1)   181         stb     ,X+                 ; Save 100's and 100's digit to variable pointed by X
                      (      convert.asm):00193                     ; Calculate the 10's and 1's digit
E132 1F89             (      convert.asm):00194 (4)     185         tfr     A,B                 ; Place remainder in LSB of D
E134 860A             (      convert.asm):00195 (2)     187         lda     #10                 ; Load 10
E136 A7E2             (      convert.asm):00196 (4+1)   192         sta     ,-S                 ; Store it in the stack
E138 4F               (      convert.asm):00197 (1)     193         clra                        ; Clear MSB of D
E139 11ADE0           (      convert.asm):00198 (27+1)  221         divd    ,S+                 ; Divide D by 10 (from stack): Quotient in B, Remainder in A
E13C 58               (      convert.asm):00199 (1)     222         lslb                        ; Move 10's digit to high nibble
E13D 58               (      convert.asm):00200 (1)     223         lslb                        ;
E13E 58               (      convert.asm):00201 (1)     224         lslb                        ;
E13F 58               (      convert.asm):00202 (1)     225         lslb                        ;
E140 A7E2             (      convert.asm):00203 (4+1)   230         sta     ,-S                 ; Save the remainder in the stack
E142 EBE0             (      convert.asm):00204 (4+1)   235         addb    ,S+                 ; Add remainder from the stack with quotient
E144 E780             (      convert.asm):00205 (4+1)   240         stb     ,X+                 ; Save 10's and 1's digits to variable pointed by X
E146 86FF             (      convert.asm):00206 (2)     242         lda     #EOD                ; Load end of data code
E148 A784             (      convert.asm):00207 (4+0)   246         sta     ,X                  ; Insert End Of Data marker without advancing pointer
E14A 1039             (      convert.asm):00208 (6)     252         pulsw
E14C 3597             (      convert.asm):00209 (4+7)   263         puls    A,B,X,CC,PC
                      (      convert.asm):00210                 
                      (      convert.asm):00211                 ;  _   _                                  ____                      
                      (      convert.asm):00212                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00213                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00214                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00215                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00216                 ;         |_|     |_|                                               
                      (      convert.asm):00217                 ;
                      (      convert.asm):00218                 ; Convert character in A to uppercase
                      (      convert.asm):00219                 ; ===================================
                      (      convert.asm):00220                 ; Input:    A = anycase
                      (      convert.asm):00221                 ; Output:   A = UPPERCASE
                      (      convert.asm):00222                 
                      (      convert.asm):00223                     PRAGMA cc
                      (      convert.asm):00224                 
E14E                  (      convert.asm):00225                 UpperCase:
E14E 3401             (      convert.asm):00226 (4+1)   5           pshs    CC
E150 8161             (      convert.asm):00227 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E152 2D06             (      convert.asm):00228 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E154 817A             (      convert.asm):00229 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E156 2E02             (      convert.asm):00230 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E158 8020             (      convert.asm):00231 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E15A                  (      convert.asm):00232                 UpperCaseEnd:
E15A 3581             (      convert.asm):00233 (4+3)   24          puls    CC,PC
                      (      convert.asm):00234                     
                      (         main.asm):00182                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E15C                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E15C 3406             (           io.asm):00058 (4+2)   6           pshs    D
E15E 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E160 BDE1BF           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E163 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E165 BDE1BF           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E168 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E16A BDE1BF           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E16D 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E16F BDE1BF           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E172 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E174 BDE1BF           (           io.asm):00069 (7)     51          jsr     OutChar
E177 865B             (           io.asm):00070 (2)     53          lda     #'['
E179 BDE1BF           (           io.asm):00071 (7)     60          jsr     OutChar
E17C 8631             (           io.asm):00072 (2)     62          lda     #'1'
E17E BDE1BF           (           io.asm):00073 (7)     69          jsr     OutChar
E181 863B             (           io.asm):00074 (2)     71          lda     #';'
E183 BDE1BF           (           io.asm):00075 (7)     78          jsr     OutChar
E186 8631             (           io.asm):00076 (2)     80          lda     #'1'
E188 BDE1BF           (           io.asm):00077 (7)     87          jsr     OutChar
E18B 8648             (           io.asm):00078 (2)     89          lda     #'H'
E18D BDE1BF           (           io.asm):00079 (7)     96          jsr     OutChar
E190 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E192                  (           io.asm):00094                 Com1Init:
E192 3402             (           io.asm):00095 (4+1)   5           pshs    A
E194 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E196 B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E199 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E19B B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E19E 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E1A0 B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A3 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1A5                  (           io.asm):00122                 InChar:
E1A5                  (           io.asm):00123                 Com1RxWait:
E1A5 B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1A8 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1AA 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1AC B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1AF 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1B0                  (           io.asm):00137                 InCharNW:
E1B0                  (           io.asm):00138                 Com1RxNoWait:
E1B0 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1B2 B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1B5 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1B7 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1B9 B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1BC 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1BE                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1BE 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1BF                  (           io.asm):00168                 OutChar:
E1BF                  (           io.asm):00169                 Com1Tx:
E1BF 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1C1                  (           io.asm):00171                 Com1TxNotReady:
E1C1 B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C4 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1C6 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1C8 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1CA B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1CD 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _    ____   _                    
                      (           io.asm):00180                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00181                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00182                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00183                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00184                 ;
                      (           io.asm):00185                 ; Delete a number of characters
                      (           io.asm):00186                 ; =============================
                      (           io.asm):00187                 ; Input:    B = Number of characters to delete
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1CE                  (           io.asm):00191                 DelChar:
E1CE 3406             (           io.asm):00192 (4+2)   6           pshs    D
E1D0 8608             (           io.asm):00193 (2)     8           lda     #BS                 ; Load the backspace character
E1D2                  (           io.asm):00194                 DelCharLoop:
E1D2 BDE1BF           (           io.asm):00195 (7)     15          jsr     OutChar             ; Print the backspace character
E1D5 8620             (           io.asm):00196 (2)     17          lda     #' '                ; Load the space character
E1D7 BDE1BF           (           io.asm):00197 (7)     24          jsr     OutChar             ; Print it the space character
E1DA 8608             (           io.asm):00198 (2)     26          lda     #BS                 ; Load the backspace character
E1DC BDE1BF           (           io.asm):00199 (7)     33          jsr     OutChar             ; Print it the backspace character
E1DF 5A               (           io.asm):00200 (1)     34          decb                        ; Decrement the character count
E1E0 26F0             (           io.asm):00201 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1E2 3586             (           io.asm):00202 (4+4)   45          puls    D,PC
                      (           io.asm):00203                 
                      (           io.asm):00204                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00205                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00206                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00207                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00208                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00209                 ;                                                    |___/
                      (           io.asm):00210                 ;
                      (           io.asm):00211                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00212                 ; ====================================================
                      (           io.asm):00213                 ; Input:    X = String pointer
                      (           io.asm):00214                 ; Output:   A = Binary byte
                      (           io.asm):00215                 ;           X = Points to next character in string
                      (           io.asm):00216                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00217                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00218                 
E1E4                  (           io.asm):00219                 GetStrByte:
E1E4 3404             (           io.asm):00220 (4+1)   50          pshs    B
E1E6 1038             (           io.asm):00221 (6)     56          pshsw
E1E8 3410             (           io.asm):00222 (4+2)   62          pshs    X                   ; Save position
E1EA 5F               (           io.asm):00223 (1)     63          clrb                        ; Clear byte counter
E1EB 115F             (           io.asm):00224 (2)     65          clrf                        ; Clear byte storage
E1ED                  (           io.asm):00225                 GetStrByteCount:
E1ED A680             (           io.asm):00226 (4+1)   70          lda     ,X+                 ; Load a character
E1EF 2707             (           io.asm):00227 (3)     73          beq     GetStrByteParse     ; If it's the end of the string, parse byte
E1F1 8120             (           io.asm):00228 (2)     75          cmpa    #' '                ; Is it a space delimiter
E1F3 2703             (           io.asm):00229 (3)     78          beq     GetStrByteParse     ; Yes, then parse byte
E1F5 5C               (           io.asm):00230 (1)     79          incb                        ; Increment byte counter
E1F6 20F5             (           io.asm):00231 (3)     82          bra     GetStrByteCount     ; Loop till delimiter found
E1F8                  (           io.asm):00232                 GetStrByteParse:
E1F8 3510             (           io.asm):00233 (4+2)   88          puls    X                   ; Restore position
E1FA C100             (           io.asm):00234 (2)     90          cmpb    #0                  ; Is the counter = 0
E1FC 2732             (           io.asm):00235 (3)     93          beq     GetStrByteError     ; Yes, then set error flag
E1FE C101             (           io.asm):00236 (2)     95          cmpb    #1                  ; Is it 1 character long
E200 2607             (           io.asm):00237 (3)     98          bne     GetStrByteParse2    ; No, then check if it's 2
E202 BDE253           (           io.asm):00238 (7)     105         jsr     GetStrNibble        ; Get a nibble
E205 2429             (           io.asm):00239 (3)     108         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E207 2023             (           io.asm):00240 (3)     111         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E209                  (           io.asm):00241                 GetStrByteParse2:
E209 C102             (           io.asm):00242 (2)     113         cmpb    #2                  ; Is it 2 character long
E20B 2615             (           io.asm):00243 (3)     116         bne     GetStrByteParseMore ; No, then check if it's 3
E20D BDE253           (           io.asm):00244 (7)     123         jsr     GetStrNibble        ; Get a nibble
E210 241E             (           io.asm):00245 (3)     126         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E212 48               (           io.asm):00246 (1)     127         asla                        ; Push nibble to MSB
E213 48               (           io.asm):00247 (1)     128         asla                        ;
E214 48               (           io.asm):00248 (1)     129         asla                        ;
E215 48               (           io.asm):00249 (1)     130         asla                        ;
E216 1F89             (           io.asm):00250 (4)     134         tfr     A,B                 ; Store byte in LSB of W
E218 BDE253           (           io.asm):00251 (7)     141         jsr     GetStrNibble        ; Get a nibble
E21B 2413             (           io.asm):00252 (3)     144         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E21D 103598           (           io.asm):00253 (4)     148         orr     B,A                 ; Merge both nibbles as a byte
E220 200A             (           io.asm):00254 (3)     151         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E222                  (           io.asm):00255                 GetStrByteParseMore:
E222 B6EE57           (           io.asm):00256 (4)     155         lda     CmdErrorPtr         ; Load error pointer
E225 8B03             (           io.asm):00257 (2)     157         adda    #3                  ; Add 3 to it
E227 B7EE57           (           io.asm):00258 (4)     161         sta     CmdErrorPtr         ; Store it back
E22A 2004             (           io.asm):00259 (3)     164         bra     GetStrByteError     ; Set error flag
E22C                  (           io.asm):00260                 GetStrByteGood:
E22C 1A01             (           io.asm):00261 (2)     166         orcc    #%00000001          ; Set Carry: Indicates the byte is ok
E22E 2002             (           io.asm):00262 (3)     169         bra     GetStrByteEnd
E230                  (           io.asm):00263                 GetStrByteError:
E230 1CFE             (           io.asm):00264 (2)     171         andcc   #%11111110          ; Clear Carry: Indicates there an error
E232                  (           io.asm):00265                 GetStrByteEnd:
E232 1039             (           io.asm):00266 (6)     177         pulsw
E234 3584             (           io.asm):00267 (4+3)   184         puls    B,PC
                      (           io.asm):00268                 
E236                  (           io.asm):00269                 GetStrByteFixed:
E236 3404             (           io.asm):00270 (4+1)   189         pshs    B
E238 BDE253           (           io.asm):00271 (7)     196         jsr     GetStrNibble        ; Get a nibble
E23B 2412             (           io.asm):00272 (3)     199         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E23D 48               (           io.asm):00273 (1)     200         asla                        ; Push nibble to MSB
E23E 48               (           io.asm):00274 (1)     201         asla                        ;
E23F 48               (           io.asm):00275 (1)     202         asla                        ;
E240 48               (           io.asm):00276 (1)     203         asla                        ;
E241 1F89             (           io.asm):00277 (4)     207         tfr     A,B                 ; Store byte in B
E243 BDE253           (           io.asm):00278 (7)     214         jsr     GetStrNibble        ; Get a nibble
E246 2407             (           io.asm):00279 (3)     217         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E248 103598           (           io.asm):00280 (4)     221         orr     B,A                 ; Merge both nibbles as a byte
E24B 1A01             (           io.asm):00281 (2)     223         orcc    #%00000001          ; Set Carry: Indicates the nibble is ok
E24D 2002             (           io.asm):00282 (3)     226         bra     GetStrByteFixedEnd  ;
E24F                  (           io.asm):00283                 GetStrByteFixedErr:
E24F 1CFE             (           io.asm):00284 (2)     228         andcc   #%11111110          ; Clear Carry: Indicates there an error
E251                  (           io.asm):00285                 GetStrByteFixedEnd:
E251 3584             (           io.asm):00286 (4+3)   235         puls    B,PC
                      (           io.asm):00287                 
                      (           io.asm):00288                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00289                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00290                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00291                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00292                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00293                 ;
                      (           io.asm):00294                 ;
                      (           io.asm):00295                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00296                 ; ======================================================
                      (           io.asm):00297                 ; Input:    X = String pointer
                      (           io.asm):00298                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00299                 ;           X = Points to next character in string
                      (           io.asm):00300                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00301                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00302                 
E253                  (           io.asm):00303                 GetStrNibble:
E253 A684             (           io.asm):00304 (4+0)   239         lda     ,X                  ; Get a character from string
E255 2713             (           io.asm):00305 (3)     242         beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E257 BDE14E           (           io.asm):00306 (7)     249         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00307                     ; Is it a valid hex character?
E25A 8130             (           io.asm):00308 (2)     251         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E25C 2D0C             (           io.asm):00309 (3)     254         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E25E 8146             (           io.asm):00310 (2)     256         cmpa    #'F'                ; Filter anything above the ASCII F
E260 2E08             (           io.asm):00311 (3)     259         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E262 8139             (           io.asm):00312 (2)     261         cmpa    #'9'                ; Filter anything above ASCII '9'
E264 2F08             (           io.asm):00313 (3)     264         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E266 8141             (           io.asm):00314 (2)     266         cmpa    #'A'                ; Filter anything below ASCII 'A'
E268 2C04             (           io.asm):00315 (3)     269         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E26A                  (           io.asm):00316                 GetStrNibbleError:
E26A 1CFE             (           io.asm):00317 (2)     271         andcc   #$FE                ; Clear carry to indicate error
E26C 2005             (           io.asm):00318 (3)     274         bra     GetStrNibbleEnd
E26E                  (           io.asm):00319                 GetStrNibbleGood:
E26E BDE089           (           io.asm):00320 (7)     281         jsr     AscToBinNibble
E271 1A01             (           io.asm):00321 (2)     283         orcc    #$01                ; Set carry to indicate valid number in A
E273                  (           io.asm):00322                 GetStrNibbleEnd:
E273 3001             (           io.asm):00323 (4+1)   288         leax    1,X                 ; Increment string pointer
E275 7CEE57           (           io.asm):00324 (6)     294         inc     CmdErrorPtr         ; Advance error pointer
E278 39               (           io.asm):00325 (4)     298         rts
                      (           io.asm):00326                     
                      (           io.asm):00327                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00328                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00329                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00330                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00331                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00332                 ;
                      (           io.asm):00333                 ;
                      (           io.asm):00334                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00335                 ; ======================================================
                      (           io.asm):00336                 ; Input:    X = String pointer
                      (           io.asm):00337                 ; Output:   D = Binary word
                      (           io.asm):00338                 ;           X = Points to next character in string
                      (           io.asm):00339                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00340                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00341                 
E279                  (           io.asm):00342                 GetStrWord:
E279 1038             (           io.asm):00343 (6)     304         pshsw
E27B 3410             (           io.asm):00344 (4+2)   310         pshs    X                   ; Save position
E27D 5F               (           io.asm):00345 (1)     311         clrb                        ; Clear word counter
E27E 105F             (           io.asm):00346 (2)     313         clrw                        ; Clear word storage
E280                  (           io.asm):00347                 GetStrWordCount:
E280 A680             (           io.asm):00348 (4+1)   318         lda     ,X+                 ; Load a character
E282 2707             (           io.asm):00349 (3)     321         beq     GetStrWordParse     ; If it's the end of the string, parse word
E284 8120             (           io.asm):00350 (2)     323         cmpa    #' '                ; Is it a space delimiter
E286 2703             (           io.asm):00351 (3)     326         beq     GetStrWordParse     ; Yes, then parse word
E288 5C               (           io.asm):00352 (1)     327         incb                        ; Increment byte counter
E289 20F5             (           io.asm):00353 (3)     330         bra     GetStrWordCount     ; Loop till delimiter found
E28B                  (           io.asm):00354                 GetStrWordParse:
E28B 3510             (           io.asm):00355 (4+2)   336         puls    X                   ; Restore position
E28D C100             (           io.asm):00356 (2)     338         cmpb    #0                  ; Is the counter = 0
E28F 2752             (           io.asm):00357 (3)     341         beq     GetStrWordError     ; Yes, then set error flag
E291 C101             (           io.asm):00358 (2)     343         cmpb    #1                  ; Is it 1 character long
E293 2609             (           io.asm):00359 (3)     346         bne     GetStrWordParse2    ; No, then check if it's 2
E295 BDE253           (           io.asm):00360 (7)     353         jsr     GetStrNibble        ; Get a nibble
E298 2449             (           io.asm):00361 (3)     356         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E29A 1F8F             (           io.asm):00362 (4)     360         tfr     A,F                 ; Store nibble in LSB of W
E29C 203F             (           io.asm):00363 (3)     363         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E29E                  (           io.asm):00364                 GetStrWordParse2:
E29E C102             (           io.asm):00365 (2)     365         cmpb    #2                  ; Is it 2 character long
E2A0 2609             (           io.asm):00366 (3)     368         bne     GetStrWordParse3    ; No, then check if it's 3
E2A2 BDE236           (           io.asm):00367 (7)     375         jsr     GetStrByteFixed     ; Get a byte
E2A5 243C             (           io.asm):00368 (3)     378         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2A7 1F8F             (           io.asm):00369 (4)     382         tfr     A,F                 ; Store byte in LSB of W
E2A9 2032             (           io.asm):00370 (3)     385         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2AB                  (           io.asm):00371                 GetStrWordParse3:
E2AB C103             (           io.asm):00372 (2)     387         cmpb    #3                  ; Is it 3 character long
E2AD 2610             (           io.asm):00373 (3)     390         bne     GetStrWordParse4    ; No, then check if it's 4
E2AF BDE253           (           io.asm):00374 (7)     397         jsr     GetStrNibble        ; Get a nibble
E2B2 242F             (           io.asm):00375 (3)     400         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2B4 1F8E             (           io.asm):00376 (4)     404         tfr     A,E                 ; Store nibble in MSB of W
E2B6 BDE236           (           io.asm):00377 (7)     411         jsr     GetStrByteFixed     ; Get a byte
E2B9 2428             (           io.asm):00378 (3)     414         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2BB 1F8F             (           io.asm):00379 (4)     418         tfr     A,F                 ; Store byte in LSB of W
E2BD 201E             (           io.asm):00380 (3)     421         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2BF                  (           io.asm):00381                 GetStrWordParse4:
E2BF C104             (           io.asm):00382 (2)     423         cmpb    #4                  ; Is it 4 character long
E2C1 2610             (           io.asm):00383 (3)     426         bne     GetStrWordParseMore ; No, then check if it's longer
E2C3 BDE236           (           io.asm):00384 (7)     433         jsr     GetStrByteFixed     ; Get a byte
E2C6 241B             (           io.asm):00385 (3)     436         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C8 1F8E             (           io.asm):00386 (4)     440         tfr     A,E                 ; Store byte in MSB of W
E2CA BDE236           (           io.asm):00387 (7)     447         jsr     GetStrByteFixed     ; Get a byte
E2CD 2414             (           io.asm):00388 (3)     450         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2CF 1F8F             (           io.asm):00389 (4)     454         tfr     A,F                 ; Store byte in LSB of W
E2D1 200A             (           io.asm):00390 (3)     457         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2D3                  (           io.asm):00391                 GetStrWordParseMore:
E2D3 B6EE57           (           io.asm):00392 (4)     461         lda     CmdErrorPtr         ; Load error pointer
E2D6 8B05             (           io.asm):00393 (2)     463         adda    #5                  ; Add 5 to it
E2D8 B7EE57           (           io.asm):00394 (4)     467         sta     CmdErrorPtr         ; Store it back
E2DB 2006             (           io.asm):00395 (3)     470         bra     GetStrWordError     ; Set error flag
E2DD                  (           io.asm):00396                 GetStrWordGood:
E2DD 1F60             (           io.asm):00397 (4)     474         tfr     W,D
E2DF 1A01             (           io.asm):00398 (2)     476         orcc    #%00000001          ; Set Carry: Indicates the word is ok
E2E1 2002             (           io.asm):00399 (3)     479         bra     GetStrWordEnd
E2E3                  (           io.asm):00400                 GetStrWordError:
E2E3 1CFE             (           io.asm):00401 (2)     481         andcc   #%11111110          ; Clear Carry: Indicates there an error
E2E5                  (           io.asm):00402                 GetStrWordEnd:
E2E5 1039             (           io.asm):00403 (6)     487         pulsw
E2E7 39               (           io.asm):00404 (4)     491         rts
                      (           io.asm):00405                 
                      (           io.asm):00406                 ;  ___           ____            _          
                      (           io.asm):00407                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00408                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00409                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00410                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00411                 ;                        |___/              
                      (           io.asm):00412                 ;
                      (           io.asm):00413                 ; Read a hexadecimal byte
                      (           io.asm):00414                 ; =======================
                      (           io.asm):00415                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00416                 
                      (           io.asm):00417                     PRAGMA cc
                      (           io.asm):00418                 
E2E8                  (           io.asm):00419                 InByte:
E2E8 3405             (           io.asm):00420 (4+2)   6           pshs    B,CC
E2EA BDE1A5           (           io.asm):00421 (7)     13          jsr     InChar              ; Read first character in A
E2ED 1F89             (           io.asm):00422 (4)     17          tfr     A,B                 ; Save is in B temporarily
E2EF BDE1A5           (           io.asm):00423 (7)     24          jsr     InChar              ; Read second character in A
E2F2 1E89             (           io.asm):00424 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E2F4 BDE09C           (           io.asm):00425 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E2F7 3585             (           io.asm):00426 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00427                 
                      (           io.asm):00428                 ;  ___           ____    _
                      (           io.asm):00429                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00430                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00431                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00432                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00433                 ;
                      (           io.asm):00434                 ;
                      (           io.asm):00435                 ; Read string from from input device
                      (           io.asm):00436                 ; ==================================
                      (           io.asm):00437                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00438                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00439                 ;           Y = contains the original string pointer start
                      (           io.asm):00440                 ; Input:    B = max number of characters to read
                      (           io.asm):00441                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00442                 ; Output:   B = Actual number of characters read
                      (           io.asm):00443                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00444                 ;               Carry bit clear = no string recorded
                      (           io.asm):00445                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00446                 
                      (           io.asm):00447                     PRAGMA cc
                      (           io.asm):00448                 
E2F9                  (           io.asm):00449                 InStr:
E2F9 3432             (           io.asm):00450 (4+5)   9           pshs    A,X,Y
E2FB 1038             (           io.asm):00451 (6)     15          pshsw
E2FD 1F12             (           io.asm):00452 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E2FF 1F9F             (           io.asm):00453 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E301 114F             (           io.asm):00454 (2)     25          clre                        ; Clear the current byte count
E303                  (           io.asm):00455                 InStrReadChar:
E303 BDE1A5           (           io.asm):00456 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00457                     ;jsr        UpperCase   ; *** TEMPORARY
E306 810D             (           io.asm):00458 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E308 2748             (           io.asm):00459 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E30A 8108             (           io.asm):00460 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E30C 270B             (           io.asm):00461 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E30E 811B             (           io.asm):00462 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E310 271E             (           io.asm):00463 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E312 2BEF             (           io.asm):00464 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E314 10379E           (           io.asm):00465 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E317 2630             (           io.asm):00466 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E319                  (           io.asm):00467                 InStrBackspace:
E319 103712           (           io.asm):00468 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E31C 27E5             (           io.asm):00469 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E31E 301F             (           io.asm):00470 (4+1)   69          leax    -1,X                ; Decrement string index
E320 114A             (           io.asm):00471 (2)     71          dece                        ; Decrement the current byte counter
E322 7AEE57           (           io.asm):00472 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E325 3404             (           io.asm):00473 (4+1)   82          pshs    B                   ; Saves B
E327 C601             (           io.asm):00474 (2)     84          ldb     #1                  ; number of characters to delete
E329 BDE1CE           (           io.asm):00475 (7)     91          jsr     DelChar             ; Delete a character
E32C 3504             (           io.asm):00476 (4+1)   96          puls    B                   ; Restores B
E32E 20D3             (           io.asm):00477 (3)     99          bra     InStrReadChar       ; Go read next character
E330                  (           io.asm):00478                 InStrEscape:
E330 118100           (           io.asm):00479 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E333 27CE             (           io.asm):00480 (3)     105         beq     InStrReadChar       ; No, then read a character
E335 3404             (           io.asm):00481 (4+1)   110         pshs    B                   ; Else, erase everyting
E337 1FE9             (           io.asm):00482 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E339 BDE1CE           (           io.asm):00483 (7)     121         jsr     DelChar             ; Delete the whole line
E33C 3504             (           io.asm):00484 (4+1)   126         puls    B
E33E 1F21             (           io.asm):00485 (4)     130         tfr     Y,X                 ; Restores string pointer position
E340 114F             (           io.asm):00486 (2)     132         clre                        ; Clear the byte count
E342 9609             (           io.asm):00487 (3)     135         lda     PromptSize
E344 B7EE57           (           io.asm):00488 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E347 20BA             (           io.asm):00489 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E349                  (           io.asm):00490                 InStrStoreChar:
E349 BDE1BF           (           io.asm):00491 (7)     149         jsr     OutChar             ; Print character on terminal
E34C A780             (           io.asm):00492 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E34E 114C             (           io.asm):00493 (2)     156         ince                        ; Increment byte count
E350 20B1             (           io.asm):00494 (3)     159         bra     InStrReadChar       ; No? Read another character
E352                  (           io.asm):00495                 InStrPrintCR:
E352 BDE3A9           (           io.asm):00496 (7)     166         jsr     OutCRLF             ; Print carriage return
E355 6F84             (           io.asm):00497 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E357 1FE9             (           io.asm):00498 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E359 118100           (           io.asm):00499 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E35C 2704             (           io.asm):00500 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E35E 1A01             (           io.asm):00501 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E360 2002             (           io.asm):00502 (3)     187         bra     InStrEnd
E362                  (           io.asm):00503                 InStrClearCarry:
E362 1CFE             (           io.asm):00504 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E364                  (           io.asm):00505                 InStrEnd:
E364 1039             (           io.asm):00506 (6)     195         pulsw
E366 35B2             (           io.asm):00507 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00508                 
                      (           io.asm):00509                 ;  ___          __        __                     _ 
                      (           io.asm):00510                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00511                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00512                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00513                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00514                 ;
                      (           io.asm):00515                 ;
                      (           io.asm):00516                 ; Read a hexadecimal word
                      (           io.asm):00517                 ; =======================
                      (           io.asm):00518                 ; Output:   D = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00519                 ; 
                      (           io.asm):00520                     PRAGMA cc
                      (           io.asm):00521                 
E368                  (           io.asm):00522                 InWord:
E368 3401             (           io.asm):00523 (4+1)   5           pshs    CC
E36A 1038             (           io.asm):00524 (6)     11          pshsw
E36C BDE1A5           (           io.asm):00525 (7)     18          jsr     InChar
E36F 1F8F             (           io.asm):00526 (4)     22          tfr     A,F
E371 BDE1A5           (           io.asm):00527 (7)     29          jsr     InChar
E374 1F89             (           io.asm):00528 (4)     33          tfr     A,B
E376 BDE1A5           (           io.asm):00529 (7)     40          jsr     InChar
E379 1F8E             (           io.asm):00530 (4)     44          tfr     A,E
E37B BDE1A5           (           io.asm):00531 (7)     51          jsr     InChar
E37E 1E8F             (           io.asm):00532 (5)     56          exg     A,F
E380 BDE0B2           (           io.asm):00533 (7)     63          jsr     AscToBinWord
E383 1039             (           io.asm):00534 (6)     69          pulsw
E385 3581             (           io.asm):00535 (4+3)   76          puls    CC,PC
                      (           io.asm):00536                     
                      (           io.asm):00537                 ;   ___            _     ____            _          
                      (           io.asm):00538                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00539                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00540                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00541                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00542                 ;                                |___/
                      (           io.asm):00543                 ;
                      (           io.asm):00544                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00545                 ; ==================================
                      (           io.asm):00546                 ; Input:    A = Byte to output
                      (           io.asm):00547                 
                      (           io.asm):00548                     PRAGMA cc
                      (           io.asm):00549                 
E387                  (           io.asm):00550                 OutByte:
E387                  (           io.asm):00551                 OutByteLZ:
E387 3407             (           io.asm):00552 (4+3)   7           pshs    A,B,CC
E389 BDE0D4           (           io.asm):00553 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E38C BDE1BF           (           io.asm):00554 (7)     21          jsr     OutChar             ; Print MSB in A
E38F 1F98             (           io.asm):00555 (4)     25          tfr     B,A                 ; Transfer LSB in A
E391 BDE1BF           (           io.asm):00556 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E394 3587             (           io.asm):00557 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00558                 
                      (           io.asm):00559                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00560                 ; ==========================================================
                      (           io.asm):00561                 ; Input:    A = Byte to output
                      (           io.asm):00562                 
                      (           io.asm):00563                     PRAGMA cc
                      (           io.asm):00564                 
E396                  (           io.asm):00565                 OutByteNLZ:
E396 3407             (           io.asm):00566 (4+3)   7           pshs    A,B,CC
E398 BDE0D4           (           io.asm):00567 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E39B 8130             (           io.asm):00568 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E39D 2703             (           io.asm):00569 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E39F BDE1BF           (           io.asm):00570 (7)     26          jsr     OutChar             ; Print MSB in A
E3A2                  (           io.asm):00571                 OutByteDigit1NLZ:   
E3A2 1F98             (           io.asm):00572 (4)     30          tfr     B,A                 ; Transfer LSB in A
E3A4 BDE1BF           (           io.asm):00573 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E3A7 3587             (           io.asm):00574 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00575                 
                      (           io.asm):00576                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00577                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00578                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00579                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00580                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00581                 ;
                      (           io.asm):00582                 ; Print a carriage return and linefeed
                      (           io.asm):00583                 ; ====================================
                      (           io.asm):00584                 
                      (           io.asm):00585                     PRAGMA cc
                      (           io.asm):00586                 
E3A9                  (           io.asm):00587                 OutCRLF:
E3A9 3403             (           io.asm):00588 (4+2)   6           pshs    A,CC
E3AB 860D             (           io.asm):00589 (2)     8           lda     #CR
E3AD BDE1BF           (           io.asm):00590 (7)     15          jsr     OutChar
E3B0 860A             (           io.asm):00591 (2)     17          lda     #LF
E3B2 BDE1BF           (           io.asm):00592 (7)     24          jsr     OutChar
E3B5 3583             (           io.asm):00593 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00594                 
                      (           io.asm):00595                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00596                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00597                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00598                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00599                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00600                 ;
                      (           io.asm):00601                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00602                 ; ====================================
                      (           io.asm):00603                 ; Input:    A = Nibble to output
                      (           io.asm):00604                 
                      (           io.asm):00605                     PRAGMA cc
                      (           io.asm):00606                 
E3B7                  (           io.asm):00607                 OutNibble:
E3B7                  (           io.asm):00608                 OutNibbleLSB:
E3B7 3403             (           io.asm):00609 (4+2)   6           pshs    A,CC
E3B9 BDE0C4           (           io.asm):00610 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E3BC BDE1BF           (           io.asm):00611 (7)     20          jsr     OutChar
E3BF 3583             (           io.asm):00612 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00613                 
                      (           io.asm):00614                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00615                 ; ====================================
                      (           io.asm):00616                 ; Input:    A = Nibble to output
                      (           io.asm):00617                 
                      (           io.asm):00618                     PRAGMA cc
                      (           io.asm):00619                 
E3C1                  (           io.asm):00620                 OutNibbleMSB:
E3C1 3403             (           io.asm):00621 (4+2)   6           pshs    A,CC
E3C3 44               (           io.asm):00622 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E3C4 44               (           io.asm):00623 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E3C5 44               (           io.asm):00624 (1)     9           lsra                        ;
E3C6 44               (           io.asm):00625 (1)     10          lsra                        ;
E3C7 BDE0C4           (           io.asm):00626 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E3CA BDE1BF           (           io.asm):00627 (7)     24          jsr     OutChar
E3CD 3583             (           io.asm):00628 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00629                 
                      (           io.asm):00630                 ;   ___            _     ____    _
                      (           io.asm):00631                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00632                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00633                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00634                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00635                 ;
                      (           io.asm):00636                 ; Print a string to the screen
                      (           io.asm):00637                 ; ============================
                      (           io.asm):00638                 ; Input:    X = Address of string to print
                      (           io.asm):00639                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00640                 
                      (           io.asm):00641                     PRAGMA cc
                      (           io.asm):00642                 
E3CF                  (           io.asm):00643                 OutStr:
E3CF                  (           io.asm):00644                 OutStrLZ:
E3CF 3403             (           io.asm):00645 (4+2)   6           pshs    A,CC
E3D1                  (           io.asm):00646                 OutStrLoop:
E3D1 A680             (           io.asm):00647 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E3D3 2709             (           io.asm):00648 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E3D5 81FF             (           io.asm):00649 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E3D7 2705             (           io.asm):00650 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E3D9 17FDE3           (           io.asm):00651 (7)     26          lbsr    OutChar             ; Print character
E3DC 20F3             (           io.asm):00652 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E3DE                  (           io.asm):00653                 OutStrEnd:
E3DE 3583             (           io.asm):00654 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00655                 
                      (           io.asm):00656                 ; Print a string to the screen without leading zeros
                      (           io.asm):00657                 ; ==================================================
                      (           io.asm):00658                 ; Input:    X = Address of string to print
                      (           io.asm):00659                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00660                 
                      (           io.asm):00661                     PRAGMA cc
                      (           io.asm):00662                 
E3E0                  (           io.asm):00663                 OutStrNLZ:
E3E0 3407             (           io.asm):00664 (4+3)   7           pshs    A,B,CC
E3E2 5F               (           io.asm):00665 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E3E3                  (           io.asm):00666                 OutStrNLZLoop:
E3E3 A680             (           io.asm):00667 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E3E5 81FF             (           io.asm):00668 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E3E7 270F             (           io.asm):00669 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E3E9 8130             (           io.asm):00670 (2)     20          cmpa    #'0'                ; Is it a zero?
E3EB 2604             (           io.asm):00671 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E3ED 8100             (           io.asm):00672 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E3EF 27F2             (           io.asm):00673 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E3F1                  (           io.asm):00674                 OutStrNLZPrintChar:
E3F1 1F89             (           io.asm):00675 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E3F3 BDE1BF           (           io.asm):00676 (7)     39          jsr     OutChar             ; Print character
E3F6 20EB             (           io.asm):00677 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E3F8                  (           io.asm):00678                 OutStrNLZEnd:
E3F8 3587             (           io.asm):00679 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00680                 
                      (           io.asm):00681                 ;   ___            _    __        __                     _ 
                      (           io.asm):00682                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00683                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00684                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00685                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00686                 ;
                      (           io.asm):00687                 ; Print a word as 4 ASCII characters
                      (           io.asm):00688                 ; ==================================
                      (           io.asm):00689                 ; Input:    D = Word to output
                      (           io.asm):00690                 
                      (           io.asm):00691                     PRAGMA cc
                      (           io.asm):00692                 
E3FA                  (           io.asm):00693                 OutWord:
E3FA 3407             (           io.asm):00694 (4+3)   7           pshs    A,B,CC
E3FC 1038             (           io.asm):00695 (6)     13          pshsw
E3FE BDE0F0           (           io.asm):00696 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E401 BDE1BF           (           io.asm):00697 (7)     27          jsr     OutChar             ; Print 4th digit
E404 1F98             (           io.asm):00698 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E406 BDE1BF           (           io.asm):00699 (7)     38          jsr     OutChar             ; Print 3rd digit
E409 1FE8             (           io.asm):00700 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E40B BDE1BF           (           io.asm):00701 (7)     49          jsr     OutChar             ; Print 2nd digit
E40E 1FF8             (           io.asm):00702 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E410 BDE1BF           (           io.asm):00703 (7)     60          jsr     OutChar             ; Print 1st digit
E413 1039             (           io.asm):00704 (6)     66          pulsw
E415 3587             (           io.asm):00705 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00706                 
                      (           io.asm):00707                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00708                 ; =========================================================
                      (           io.asm):00709                 ; Input:    D = Byte to output
                      (           io.asm):00710                 
                      (           io.asm):00711                     PRAGMA cc
                      (           io.asm):00712                 
E417                  (           io.asm):00713                 OutWordNLZ:
E417 3416             (           io.asm):00714 (4+4)   8           pshs    A,B,X
E419 1038             (           io.asm):00715 (6)     14          pshsw
E41B 8E0000           (           io.asm):00716 (3)     17          ldx     #0                  ; Clear leading zero flag
E41E BDE0F0           (           io.asm):00717 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E421 8130             (           io.asm):00718 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E423 2705             (           io.asm):00719 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E425 3001             (           io.asm):00720 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E427 BDE1BF           (           io.asm):00721 (7)     41          jsr     OutChar             ; Print 1th digit
E42A                  (           io.asm):00722                 OutWordNLZ2:
E42A 1F98             (           io.asm):00723 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E42C 8130             (           io.asm):00724 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E42E 2605             (           io.asm):00725 (3)     50          bne     OutWordNLZp2        ; It's not zero
E430 8C0000           (           io.asm):00726 (3)     53          cmpx    #0                  ; Check leading zero flag
E433 2705             (           io.asm):00727 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E435                  (           io.asm):00728                 OutWordNLZp2:
E435 3001             (           io.asm):00729 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E437 BDE1BF           (           io.asm):00730 (7)     68          jsr     OutChar             ; Print 2rd digit
E43A                  (           io.asm):00731                 OutWordNLZ3:
E43A 1FE8             (           io.asm):00732 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E43C 8130             (           io.asm):00733 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E43E 2605             (           io.asm):00734 (3)     77          bne     OutWordNLZp3        ; It's not zero
E440 8C0000           (           io.asm):00735 (3)     80          cmpx    #0                  ; Check leading zero flag
E443 2705             (           io.asm):00736 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E445                  (           io.asm):00737                 OutWordNLZp3:
E445 3001             (           io.asm):00738 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E447 BDE1BF           (           io.asm):00739 (7)     95          jsr     OutChar             ; Print 3nd digit
E44A                  (           io.asm):00740                 OutWordNLZ4:
E44A 1FF8             (           io.asm):00741 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E44C BDE1BF           (           io.asm):00742 (7)     106         jsr     OutChar             ; Print 4st digit
E44F 1039             (           io.asm):00743 (6)     112         pulsw
E451 3596             (           io.asm):00744 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00183                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors
                      (      monitor.asm):00005                 ; *   ErrPointer
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00016                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00017                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00018                 ; ****************************************************************************************
                      (      monitor.asm):00019                 
                      (      monitor.asm):00020                 ;   ____                   _   _____                                    
                      (      monitor.asm):00021                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00022                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00023                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00024                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00025                 ;
                      (      monitor.asm):00026                 ; Various error messages pertaining to command line
                      (      monitor.asm):00027                 ; =================================================
                      (      monitor.asm):00028                 
                      (      monitor.asm):00029                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00030                 ; ------------------------------------------------------------
E453                  (      monitor.asm):00031                 ErrPointer:
E453 3407             (      monitor.asm):00032 (4+3)   129         pshs    A,B,CC
E455 F6EE57           (      monitor.asm):00033 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E458 CB09             (      monitor.asm):00034 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E45A                  (      monitor.asm):00035                 ErrorPointerLoop:
E45A 8620             (      monitor.asm):00036 (2)     137         lda     #' '                ; Move cursor one space
E45C BDE1BF           (      monitor.asm):00037 (7)     144         jsr     OutChar             ;
E45F 5A               (      monitor.asm):00038 (1)     145         decb                        ; Decrement position counter
E460 26F8             (      monitor.asm):00039 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E462 865E             (      monitor.asm):00040 (2)     150         lda     #'^'                ; Print the position pointer
E464 BDE1BF           (      monitor.asm):00041 (7)     157         jsr     OutChar             ;
E467 BDE3A9           (      monitor.asm):00042 (7)     164         jsr     OutCRLF             ;
E46A 3587             (      monitor.asm):00043 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00044                 
                      (      monitor.asm):00045                 ; Invalid address error message
                      (      monitor.asm):00046                 ; -----------------------------
E46C                  (      monitor.asm):00047                 ErrInvalidAddress:
E46C 3411             (      monitor.asm):00048 (4+3)   180         pshs    X,CC
E46E BDE453           (      monitor.asm):00049 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E471 8EEB46           (      monitor.asm):00050 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E474 BDE3CF           (      monitor.asm):00051 (7)     197         jsr     OutStr              ;
E477 3591             (      monitor.asm):00052 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00053                 
                      (      monitor.asm):00054                 ; Invalid byte error message
                      (      monitor.asm):00055                 ; --------------------------
E479                  (      monitor.asm):00056                 ErrInvalidByte:
E479 3411             (      monitor.asm):00057 (4+3)   213         pshs    X,CC
E47B BDE453           (      monitor.asm):00058 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E47E 8EEB59           (      monitor.asm):00059 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E481 BDE3CF           (      monitor.asm):00060 (7)     230         jsr     OutStr              ;
E484 3591             (      monitor.asm):00061 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00062                 
                      (      monitor.asm):00063                 ; Invalid command error message
                      (      monitor.asm):00064                 ; -----------------------------
E486                  (      monitor.asm):00065                 ErrInvalidCommand:
E486 3411             (      monitor.asm):00066 (4+3)   246         pshs    X,CC
E488 BDE453           (      monitor.asm):00067 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E48B 8EEB9C           (      monitor.asm):00068 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E48E BDE3CF           (      monitor.asm):00069 (7)     263         jsr     OutStr              ;
E491 3591             (      monitor.asm):00070 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00071                 
                      (      monitor.asm):00072                 ; Invalid parameter error message
                      (      monitor.asm):00073                 ; -------------------------------
E493                  (      monitor.asm):00074                 ErrInvalidParameter:
E493 3411             (      monitor.asm):00075 (4+3)   279         pshs    X,CC
E495 BDE453           (      monitor.asm):00076 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E498 8EEB69           (      monitor.asm):00077 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E49B BDE3CF           (      monitor.asm):00078 (7)     296         jsr     OutStr              ;
E49E 3591             (      monitor.asm):00079 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00080                 
                      (      monitor.asm):00081                 ; No parameter error message
                      (      monitor.asm):00082                 ; --------------------------
E4A0                  (      monitor.asm):00083                 ErrNoParameter:
E4A0 3411             (      monitor.asm):00084 (4+3)   312         pshs    X,CC
E4A2 BDE453           (      monitor.asm):00085 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E4A5 8EEB7E           (      monitor.asm):00086 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E4A8 BDE3CF           (      monitor.asm):00087 (7)     329         jsr     OutStr              ;
E4AB 3591             (      monitor.asm):00088 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00089                     
                      (      monitor.asm):00090                 ; Syntax error message
                      (      monitor.asm):00091                 ; --------------------
E4AD                  (      monitor.asm):00092                 ErrSyntaxError:
E4AD 3411             (      monitor.asm):00093 (4+3)   345         pshs    X,CC
E4AF BDE453           (      monitor.asm):00094 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E4B2 8EEBAF           (      monitor.asm):00095 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E4B5 BDE3CF           (      monitor.asm):00096 (7)     362         jsr     OutStr              ;
E4B8 3591             (      monitor.asm):00097 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00098                 
                      (      monitor.asm):00099                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00100                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00101                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00102                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00103                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00104                 ;                                                |_|
                      (      monitor.asm):00105                 ; Monitor help screen
                      (      monitor.asm):00106                 ; ===================
                      (      monitor.asm):00107                 
E4BA                  (      monitor.asm):00108                 CmdHelp:
E4BA 8EE9E3           (      monitor.asm):00109 (3)     374         ldx     #CmdHelpMsg
E4BD BDE3CF           (      monitor.asm):00110 (7)     381         jsr     OutStr
E4C0 39               (      monitor.asm):00111 (4)     385         rts
                      (      monitor.asm):00112                     
                      (      monitor.asm):00113                 ;   ____                   _   ____                              
                      (      monitor.asm):00114                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00115                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00116                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00117                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00118                 ;
                      (      monitor.asm):00119                 ; Command parser for the monitor
                      (      monitor.asm):00120                 ; ==============================
                      (      monitor.asm):00121                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00122                 
                      (      monitor.asm):00123                     PRAGMA cc
                      (      monitor.asm):00124                 
E4C1                  (      monitor.asm):00125                 CmdParse:
E4C1 3427             (      monitor.asm):00126 (4+5)   9           pshs    A,B,Y,CC
E4C3 BDE88C           (      monitor.asm):00127 (7)     16          jsr     SkipSpaces          ; Skip leading spaces
E4C6 BFEE6D           (      monitor.asm):00128 (5)     21          stx     TempWord            ; Store string pointer for command list cycling
E4C9 A684             (      monitor.asm):00129 (4+0)   25          lda     ,X                  ; Load first character from command string to see if it's empty
E4CB 2741             (      monitor.asm):00130 (3)     28          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E4CD 108EE99F         (      monitor.asm):00131 (4)     32          ldy     #CmdList            ; Load command list table location in Y
E4D1                  (      monitor.asm):00132                 CmdParseChar:
E4D1 A680             (      monitor.asm):00133 (4+1)   37          lda     ,X+                 ; Load first character from command prompt string
E4D3 BDE14E           (      monitor.asm):00134 (7)     44          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E4D6 E6A0             (      monitor.asm):00135 (4+1)   49          ldb     ,Y+                 ; Load a character from the command list
E4D8 2B1C             (      monitor.asm):00136 (3)     52          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E4DA 103789           (      monitor.asm):00137 (4)     56          cmpr    A,B                 ; Compare command string to command list character
E4DD 2605             (      monitor.asm):00138 (3)     59          bne     CmdParseSkip        ; Skip command list entry and point to next command
E4DF 7CEE57           (      monitor.asm):00139 (6)     65          inc     CmdErrorPtr         ; Increment command line error pointer
E4E2 20ED             (      monitor.asm):00140 (3)     68          bra     CmdParseChar        ; Go and compare the next character
E4E4                  (      monitor.asm):00141                 CmdParseSkip:
E4E4 BEEE6D           (      monitor.asm):00142 (5)     73          ldx     TempWord            ; Restore command prompt pointer to starting position
E4E7 7FEE57           (      monitor.asm):00143 (6)     79          clr     CmdErrorPtr         ; Restore command prompt error pointer
E4EA                  (      monitor.asm):00144                 CmdParseSkipLoop:
E4EA E6A0             (      monitor.asm):00145 (4+1)   84          ldb     ,Y+                 ; Read next character
E4EC 2AFC             (      monitor.asm):00146 (3)     87          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E4EE 3122             (      monitor.asm):00147 (4+1)   92          leay    2,Y                 ; Jump over command address
E4F0 E6A4             (      monitor.asm):00148 (4+0)   96          ldb     ,Y                  ; Is it the end of the command list
E4F2 2717             (      monitor.asm):00149 (3)     99          beq     CmdParseNone        ; Yes it is, print error and exit
E4F4 20DB             (      monitor.asm):00150 (3)     102         bra     CmdParseChar        ; Repeat process until command found
E4F6                  (      monitor.asm):00151                 CmdParseValid:
                      (      monitor.asm):00152                     ; Check for characters after valid command
E4F6 8120             (      monitor.asm):00153 (2)     104         cmpa    #' '                ; Check for a parameter separator (space)
E4F8 2704             (      monitor.asm):00154 (3)     107         beq     CmdParseExecute     ; Yes, then execute command
E4FA 8100             (      monitor.asm):00155 (2)     109         cmpa    #$00                ; Check for an end of line in string (null)
E4FC 260D             (      monitor.asm):00156 (3)     112         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E4FE                  (      monitor.asm):00157                 CmdParseExecute:
E4FE 7AEE57           (      monitor.asm):00158 (6)     118         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E501 ECA4             (      monitor.asm):00159 (5+0)   123         ldd     ,Y                  ; Load address of command from table
E503 EDC3             (      monitor.asm):00160 (5+2)   130         std     ,--U                ; Save address to user stack
E505 301F             (      monitor.asm):00161 (4+1)   135         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E507 3527             (      monitor.asm):00162 (4+5)   144         puls    A,B,Y,CC            ; Restore registers
E509 6ED1             (      monitor.asm):00163 (3+6)   153         jmp     [,U++]              ; Execute command
E50B                  (      monitor.asm):00164                 CmdParseNone:
E50B BDE486           (      monitor.asm):00165 (7)     160         jsr     ErrInvalidCommand   ;
E50E                  (      monitor.asm):00166                 CmdParseEnd:
E50E 35A7             (      monitor.asm):00167 (4+7)   171         puls    A,B,Y,CC,PC
                      (      monitor.asm):00168                 
                      (      monitor.asm):00169                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00170                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00171                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00172                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00173                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00174                 ;                                                                |_|
                      (      monitor.asm):00175                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00176                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                     PRAGMA cc
                      (      monitor.asm):00179                 
E510                  (      monitor.asm):00180                 CmdPrompt:
E510 3406             (      monitor.asm):00181 (4+2)   6           pshs    D
E512 B6EE5A           (      monitor.asm):00182 (4)     10          lda     CurrBank            ;
E515 BDE387           (      monitor.asm):00183 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E518 863A             (      monitor.asm):00184 (2)     19          lda     #':'                ;
E51A BDE1BF           (      monitor.asm):00185 (7)     26          jsr     OutChar             ; Print separator
E51D FCEE58           (      monitor.asm):00186 (5)     31          ldd     CurrAddress         ;
E520 BDE3FA           (      monitor.asm):00187 (7)     38          jsr     OutWord             ; Print current address
E523 863E             (      monitor.asm):00188 (2)     40          lda     #'>'                ;
E525 BDE1BF           (      monitor.asm):00189 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E528 8620             (      monitor.asm):00190 (2)     49          lda     #' '                ;
E52A BDE1BF           (      monitor.asm):00191 (7)     56          jsr     OutChar             ; Print space
E52D 7FEE57           (      monitor.asm):00192 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E530 3586             (      monitor.asm):00193 (4+4)   70          puls    D,PC
                      (      monitor.asm):00194                 
                      (      monitor.asm):00195                 ;  ____                              
                      (      monitor.asm):00196                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00197                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00198                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00199                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00200                 ;                             |_|    
                      (      monitor.asm):00201                 ;
                      (      monitor.asm):00202                 ; Memory dump
                      (      monitor.asm):00203                 ; ===========
                      (      monitor.asm):00204                 
E532                  (      monitor.asm):00205                 Dump:
E532 BDE88C           (      monitor.asm):00206 (7)     77          jsr     SkipSpaces          ; Remove leading white spaces
E535 A684             (      monitor.asm):00207 (4+0)   81          lda     ,X                  ; Read a character from string
E537 2708             (      monitor.asm):00208 (3)     84          beq     DumpDisplay         ; If empty, assume Current Address, and display
E539 BDE279           (      monitor.asm):00209 (7)     91          jsr     GetStrWord          ; Read address from string
E53C 2454             (      monitor.asm):00210 (3)     94          bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E53E FDEE58           (      monitor.asm):00211 (5)     99          std     CurrAddress         ; Save inputed address in Current Address
E541                  (      monitor.asm):00212                 DumpDisplay:
E541 BEEE58           (      monitor.asm):00213 (5)     104         ldx     CurrAddress         ; Retrieve Current Address
E544 1F12             (      monitor.asm):00214 (4)     108         tfr     X,Y
E546 118614           (      monitor.asm):00215 (3)     111         lde     #ScrVertRes-4       ; Number of lines to print
E549                  (      monitor.asm):00216                 DumpAddr:
E549 1F10             (      monitor.asm):00217 (4)     115         tfr     X,D                 ; Put Current address in D
E54B BDE3FA           (      monitor.asm):00218 (7)     122         jsr     OutWord             ;
E54E 863A             (      monitor.asm):00219 (2)     124         lda     #':'                ; Print address separator
E550 BDE1BF           (      monitor.asm):00220 (7)     131         jsr     OutChar             ;
E553 8620             (      monitor.asm):00221 (2)     133         lda     #' '                ; Print space separator
E555 BDE1BF           (      monitor.asm):00222 (7)     140         jsr     OutChar             ;
E558 C610             (      monitor.asm):00223 (2)     142         ldb     #BytePerLine        ; Get the number of bytes to print per line
E55A                  (      monitor.asm):00224                 DumpByte:
E55A A680             (      monitor.asm):00225 (4+1)   147         lda     ,X+                 ; Print byte from Current Address
E55C BDE387           (      monitor.asm):00226 (7)     154         jsr     OutByte             ;
E55F 8620             (      monitor.asm):00227 (2)     156         lda     #' '                ; Print space separator
E561 BDE1BF           (      monitor.asm):00228 (7)     163         jsr     OutChar             ;
E564 5A               (      monitor.asm):00229 (1)     164         decb                        ; Decrement byte counter
E565 26F3             (      monitor.asm):00230 (3)     167         bne     DumpByte            ; If not finished, loop and output next byte
E567 867C             (      monitor.asm):00231 (2)     169         lda     #'|'                ; Print space separator
E569 BDE1BF           (      monitor.asm):00232 (7)     176         jsr     OutChar             ;
E56C 8620             (      monitor.asm):00233 (2)     178         lda     #' '                ; Print space separator
E56E BDE1BF           (      monitor.asm):00234 (7)     185         jsr     OutChar             ;
E571 C610             (      monitor.asm):00235 (2)     187         ldb     #BytePerLine        ; Get the number of bytes to print per line
E573                  (      monitor.asm):00236                 DumpChar:
E573 A6A0             (      monitor.asm):00237 (4+1)   192         lda     ,Y+                 ; Print character from Current Address
E575 8120             (      monitor.asm):00238 (2)     194         cmpa    #' '                ; Compare character to space character
E577 2D05             (      monitor.asm):00239 (3)     197         blt     DumpCharDot         ; If lower, then print dot
E579 4D               (      monitor.asm):00240 (1)     198         tsta                        ; Is the characther in the extended ASCII range
E57A 2B02             (      monitor.asm):00241 (3)     201         bmi     DumpCharDot         ; If it is, the print dot
E57C 2002             (      monitor.asm):00242 (3)     204         bra     DumpCharPrint       ; Else, print character
E57E                  (      monitor.asm):00243                 DumpCharDot:
E57E 862E             (      monitor.asm):00244 (2)     206         lda     #'.'                ; Replace character to dot
E580                  (      monitor.asm):00245                 DumpCharPrint:
E580 BDE1BF           (      monitor.asm):00246 (7)     213         jsr     OutChar             ; Output actual or replaced character
E583 5A               (      monitor.asm):00247 (1)     214         decb                        ; Decrement byte counter
E584 26ED             (      monitor.asm):00248 (3)     217         bne     DumpChar            ; If not finished, loop and output next character
E586 BDE3A9           (      monitor.asm):00249 (7)     224         jsr     OutCRLF             ; Change line
E589 114A             (      monitor.asm):00250 (2)     226         dece                        ; Decrement the lines to print
E58B 26BC             (      monitor.asm):00251 (3)     229         bne     DumpAddr
E58D BFEE58           (      monitor.asm):00252 (5)     234         stx     CurrAddress         ; Store new Current Address in memory
E590 2003             (      monitor.asm):00253 (3)     237         bra     DumpEnd
E592                  (      monitor.asm):00254                 DumpInvalidAddress:
E592 BDE46C           (      monitor.asm):00255 (7)     244         jsr     ErrInvalidAddress   ; Display address error
E595                  (      monitor.asm):00256                 DumpEnd:
E595 39               (      monitor.asm):00257 (4)     248         rts
                      (      monitor.asm):00258                     
                      (      monitor.asm):00259                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00260                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00261                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00262                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00263                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00264                 ;
                      (      monitor.asm):00265                 ; Load Intel Hex file to memory
                      (      monitor.asm):00266                 ; =============================
                      (      monitor.asm):00267                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00268                 ;           E = Checksum accumulator
                      (      monitor.asm):00269                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00270                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00271                 ;           Y = Byte count in current record
                      (      monitor.asm):00272                 ; Vars:     TempWord
                      (      monitor.asm):00273                 
E596                  (      monitor.asm):00274                 LoadIntelHex:
E596 3437             (      monitor.asm):00275 (4+7)   259         pshs    A,B,X,Y,CC
E598 1038             (      monitor.asm):00276 (6)     265         pshsw
E59A 105F             (      monitor.asm):00277 (2)     267         clrw                        ; Clear the flags and checksum accumulator
E59C 8EEBBF           (      monitor.asm):00278 (3)     270         ldx     #LoadStartMsg       ; Print message that loading will commence
E59F BDE3CF           (      monitor.asm):00279 (7)     277         jsr     OutStr              ; 
E5A2                  (      monitor.asm):00280                 LoadRecord:
E5A2 BDE1A5           (      monitor.asm):00281 (7)     284         jsr     InChar              ; Read a character
E5A5 811B             (      monitor.asm):00282 (2)     286         cmpa    #ESC                ; Is it the ESC key?
E5A7 2609             (      monitor.asm):00283 (3)     289         bne     LoadStart           ; No, check for record marker
E5A9 8EEBFA           (      monitor.asm):00284 (3)     292         ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E5AC BDE3CF           (      monitor.asm):00285 (7)     299         jsr     OutStr              ; 
E5AF 1600AF           (      monitor.asm):00286 (4)     303         lbra    LoadEnd             ; Exit
E5B2                  (      monitor.asm):00287                 LoadStart:
E5B2 813A             (      monitor.asm):00288 (2)     305         cmpa    #':'                ; Start of record marker
E5B4 26EC             (      monitor.asm):00289 (3)     308         bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E5B6 114F             (      monitor.asm):00290 (2)     310         clre                        ; Clear checksum accumulator
                      (      monitor.asm):00291                     ; Read the record length
E5B8 BDE2E8           (      monitor.asm):00292 (7)     317         jsr     InByte              ; Get record length
E5BB 1F89             (      monitor.asm):00293 (4)     321         tfr     A,B                 ; Transfer value to LSB of D
E5BD 4F               (      monitor.asm):00294 (1)     322         clra                        ; Clear MSB of D
E5BE 1F02             (      monitor.asm):00295 (4)     326         tfr     D,Y                 ; Transfer byte count D to Y
E5C0 1F9E             (      monitor.asm):00296 (4)     330         tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00297                     ; Read the destination address
E5C2 BDE368           (      monitor.asm):00298 (7)     337         jsr     InWord              ; Read the address
E5C5 BFEE6D           (      monitor.asm):00299 (5)     342         stx     TempWord            ; Save last address pointed by X, as last record is $0000
E5C8 1F01             (      monitor.asm):00300 (4)     346         tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00301                     ; Add checksum of both bytes
E5CA 10308E           (      monitor.asm):00302 (4)     350         addr    A,E                 ; Add MSB of address to checksum accumulator
E5CD 10309E           (      monitor.asm):00303 (4)     354         addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00304                     ;Set origin address flag and store address in CurrAddress
E5D0 115D             (      monitor.asm):00305 (2)     356         tstf                        ; Test the flags register
E5D2 2B09             (      monitor.asm):00306 (3)     359         bmi     LoadRecordType      ; If it's not the first line of code read record type
E5D4 BFEE58           (      monitor.asm):00307 (5)     364         stx     CurrAddress         ; Save start address
E5D7 BFEE6A           (      monitor.asm):00308 (5)     369         stx     RegPC               ; Save the user PC 
E5DA 11C680           (      monitor.asm):00309 (3)     372         ldf     #$80                ; Sets the origin flag
E5DD                  (      monitor.asm):00310                 LoadRecordType:
E5DD BDE2E8           (      monitor.asm):00311 (7)     379         jsr     InByte              ; Get the record type
                      (      monitor.asm):00312                     ; Add checksum
E5E0 10308E           (      monitor.asm):00313 (4)     383         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00314                     ; Which record type is it?
E5E3 8100             (      monitor.asm):00315 (2)     385         cmpa    #0                  ; Is it the Data record type?
E5E5 2713             (      monitor.asm):00316 (3)     388         beq     LoadData            ; Get Data
E5E7 8101             (      monitor.asm):00317 (2)     390         cmpa    #1                  ; Is it the End of File record type?
E5E9 273E             (      monitor.asm):00318 (3)     393         beq     LoadEOF             ; Load last line
E5EB 8EEC15           (      monitor.asm):00319 (3)     396         ldx     #LoadRecordErr      ; 
E5EE BDE3CF           (      monitor.asm):00320 (7)     403         jsr     OutStr              ; Print Unknown Record Type message
E5F1 BDE387           (      monitor.asm):00321 (7)     410         jsr     OutByte             ; Print the actual record number
E5F4 BDE3A9           (      monitor.asm):00322 (7)     417         jsr     OutCRLF             ; Change line
E5F7 160067           (      monitor.asm):00323 (4)     421         lbra    LoadEnd
E5FA                  (      monitor.asm):00324                 LoadData:
                      (      monitor.asm):00325                     ; Get record type 00 (Data)
E5FA BDE2E8           (      monitor.asm):00326 (7)     428         jsr     InByte              ; Read data
E5FD A780             (      monitor.asm):00327 (4+1)   433         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00328                     ; Add checksum
E5FF 10308E           (      monitor.asm):00329 (4)     437         addr    A,E                 ; Add byte data to checksum accumulator
E602 313F             (      monitor.asm):00330 (4+1)   442         leay    -1,Y                ; Decrement byte counter
E604 108C0000         (      monitor.asm):00331 (4)     446         cmpy    #0
E608 26F0             (      monitor.asm):00332 (3)     449         bne     LoadData
E60A                  (      monitor.asm):00333                 LoadChecksum:
                      (      monitor.asm):00334                     ; Process accumulated checksum
E60A 1143             (      monitor.asm):00335 (2)     451         come                        ; Complement F
E60C 114C             (      monitor.asm):00336 (2)     453         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00337                     ; Get record checksum
E60E BDE2E8           (      monitor.asm):00338 (7)     460         jsr     InByte              ; Read checksum
E611 10378E           (      monitor.asm):00339 (4)     464         cmpr    A,E                 ; Do the checksums match
E614 2608             (      monitor.asm):00340 (3)     467         bne     LoadFailure         ; If inconsistent, display message
E616 862E             (      monitor.asm):00341 (2)     469         lda     #'.'                ; Character indicating line is ok
E618 BDE1BF           (      monitor.asm):00342 (7)     476         jsr     OutChar             ; Print the period character
E61B 16FF84           (      monitor.asm):00343 (4)     480         lbra    LoadRecord          ; Fetch next record
E61E                  (      monitor.asm):00344                 LoadFailure:
                      (      monitor.asm):00345                     ; Indicate record failed checksum
E61E 11C681           (      monitor.asm):00346 (3)     483         ldf     #$81                ; Sets the checksum failure flag
E621 8678             (      monitor.asm):00347 (2)     485         lda     #'x'                ; Load the failed checksum character
E623 BDE1BF           (      monitor.asm):00348 (7)     492         jsr     OutChar             ; Print it
E626 16FF79           (      monitor.asm):00349 (4)     496         lbra    LoadRecord          ; Get next record
E629                  (      monitor.asm):00350                 LoadEOF:
                      (      monitor.asm):00351                     ; Process accumulated checksum
E629 1143             (      monitor.asm):00352 (2)     498         come                        ; Complement E
E62B 114C             (      monitor.asm):00353 (2)     500         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00354                     ; Get end record (01) checksum
E62D BDE2E8           (      monitor.asm):00355 (7)     507         jsr     InByte              ; Get the checksum byte
E630 10378E           (      monitor.asm):00356 (4)     511         cmpr    A,E                 ; Do the checksums match
E633 2708             (      monitor.asm):00357 (3)     514         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E635 11C681           (      monitor.asm):00358 (3)     517         ldf     #$81                ; Sets the checksum failure flag
E638 8658             (      monitor.asm):00359 (2)     519         lda     #'X'                ; Load the failed checksum character
E63A BDE1BF           (      monitor.asm):00360 (7)     526         jsr     OutChar             ; Print it Exit routine
E63D                  (      monitor.asm):00361                 LoadCheckFlag:
E63D 11C180           (      monitor.asm):00362 (3)     529         cmpf    #$80                ; Was there any checksum errors?
E640 2708             (      monitor.asm):00363 (3)     532         beq     LoadSuccess         ; If no errors, then print success
E642 8EEC2B           (      monitor.asm):00364 (3)     535         ldx     #LoadFailedErr      ; Print download failed
E645 BDE3CF           (      monitor.asm):00365 (7)     542         jsr     OutStr              ;
E648 2017             (      monitor.asm):00366 (3)     545         bra     LoadEnd             ;
E64A                  (      monitor.asm):00367                 LoadSuccess:
E64A BEEE6D           (      monitor.asm):00368 (5)     550         ldx     TempWord            ; Restore last position of X
E64D CC36FF           (      monitor.asm):00369 (3)     553         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E650 ED81             (      monitor.asm):00370 (5+2)   560         std     ,X++                ; Store it at the end of code
E652 CC103A           (      monitor.asm):00371 (3)     563         ldd     #$103A              ; Save opcode "pshuw"
E655 ED81             (      monitor.asm):00372 (5+2)   570         std     ,X++                ; Store it at the end of code
E657 8639             (      monitor.asm):00373 (2)     572         lda     #$39                ; Save opcode "rts"
E659 A784             (      monitor.asm):00374 (4+0)   576         sta     ,X                  ; Store it at the end of code to return to prompt
E65B 8EEC53           (      monitor.asm):00375 (3)     579         ldx     #LoadSuccessMsg     ; Print success message
E65E BDE3CF           (      monitor.asm):00376 (7)     586         jsr     OutStr
E661                  (      monitor.asm):00377                 LoadEnd:
E661 1039             (      monitor.asm):00378 (6)     592         pulsw
E663 35B7             (      monitor.asm):00379 (4+9)   605         puls    A,B,X,Y,CC,PC
                      (      monitor.asm):00380                 
                      (      monitor.asm):00381                 ;  __  __                                             __  __                 
                      (      monitor.asm):00382                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00383                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00384                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00385                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00386                 ;                                             |___/                   |_|
                      (      monitor.asm):00387                 ;
                      (      monitor.asm):00388                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00389                 ; ===========================================
                      (      monitor.asm):00390                 
E665                  (      monitor.asm):00391                 MemoryMap:
E665 3406             (      monitor.asm):00392 (4+2)   611         pshs    A,B
E667 8EEC69           (      monitor.asm):00393 (3)     614         ldx     #MemoryMapMsg
E66A BDE3CF           (      monitor.asm):00394 (7)     621         jsr     OutStr              ; Print up to end of RAM
E66D CCDFFF           (      monitor.asm):00395 (3)     624         ldd     #RomStart-1
E670 BDE3FA           (      monitor.asm):00396 (7)     631         jsr     OutWord             ; Print RAM end
E673 BDE3CF           (      monitor.asm):00397 (7)     638         jsr     OutStr              ; Print up to begining of ROM
E676 104C             (      monitor.asm):00398 (2)     640         incd
E678 BDE3FA           (      monitor.asm):00399 (7)     647         jsr     OutWord             ; Print ROM start
E67B BDE3CF           (      monitor.asm):00400 (7)     654         jsr     OutStr              ; Print till the end of mapping
E67E 3586             (      monitor.asm):00401 (4+4)   662         puls    A,B,PC
                      (      monitor.asm):00402                 
                      (      monitor.asm):00403                 ;  ____                  _    
                      (      monitor.asm):00404                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00405                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00406                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00407                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00408                 ;
                      (      monitor.asm):00409                 ;
                      (      monitor.asm):00410                 ; Read a byte from a specific or current address
                      (      monitor.asm):00411                 ; ==============================================
                      (      monitor.asm):00412                 
E680                  (      monitor.asm):00413                 Peek:
E680 BDE88C           (      monitor.asm):00414 (7)     669         jsr     SkipSpaces
E683 A684             (      monitor.asm):00415 (4+0)   673         lda     ,X
E685 2708             (      monitor.asm):00416 (3)     676         beq     PeekDisplay
E687 BDE279           (      monitor.asm):00417 (7)     683         jsr     GetStrWord
E68A 241A             (      monitor.asm):00418 (3)     686         bcc     PeekInvalidAddr
E68C FDEE58           (      monitor.asm):00419 (5)     691         std     CurrAddress
E68F                  (      monitor.asm):00420                 PeekDisplay:
E68F FCEE58           (      monitor.asm):00421 (5)     696         ldd     CurrAddress
E692 BDE3FA           (      monitor.asm):00422 (7)     703         jsr     OutWord
E695 863D             (      monitor.asm):00423 (2)     705         lda     #'='
E697 BDE1BF           (      monitor.asm):00424 (7)     712         jsr     OutChar
E69A A69FEE58         (      monitor.asm):00425 (4+5)   721         lda     [CurrAddress]
E69E BDE387           (      monitor.asm):00426 (7)     728         jsr     OutByte
E6A1 BDE3A9           (      monitor.asm):00427 (7)     735         jsr     OutCRLF
E6A4 2003             (      monitor.asm):00428 (3)     738         bra     PeekEnd
E6A6                  (      monitor.asm):00429                 PeekInvalidAddr:
E6A6 BDE46C           (      monitor.asm):00430 (7)     745         jsr     ErrInvalidAddress
E6A9                  (      monitor.asm):00431                 PeekEnd:
E6A9 39               (      monitor.asm):00432 (4)     749         rts
                      (      monitor.asm):00433                 
                      (      monitor.asm):00434                 ;  ____            _           
                      (      monitor.asm):00435                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00436                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00437                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00438                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00439                 ;
                      (      monitor.asm):00440                 ;
                      (      monitor.asm):00441                 ; Writes a byte at a specific address
                      (      monitor.asm):00442                 ; ===================================
                      (      monitor.asm):00443                 
E6AA                  (      monitor.asm):00444                 Poke:
E6AA BDE88C           (      monitor.asm):00445 (7)     756         jsr     SkipSpaces          ; Remove excessive leading spaces
E6AD A684             (      monitor.asm):00446 (4+0)   760         lda     ,X                  ; Load character
E6AF 2735             (      monitor.asm):00447 (3)     763         beq     PokeNoParameters    ; If no parameters, print no parameter error
E6B1 BDE279           (      monitor.asm):00448 (7)     770         jsr     GetStrWord          ; Get an address
E6B4 242B             (      monitor.asm):00449 (3)     773         bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E6B6 FDEE58           (      monitor.asm):00450 (5)     778         std     CurrAddress         ; Save address
E6B9 BDE88C           (      monitor.asm):00451 (7)     785         jsr     SkipSpaces          ; Remove unecessary spaces
E6BC BDE1E4           (      monitor.asm):00452 (7)     792         jsr     GetStrByte          ; Get byte
E6BF 241B             (      monitor.asm):00453 (3)     795         bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
E6C1 A79FEE58         (      monitor.asm):00454 (4+5)   804         sta     [CurrAddress]       ; Poke value at address
E6C5 FCEE58           (      monitor.asm):00455 (5)     809         ldd     CurrAddress         ; Print address
E6C8 BDE3FA           (      monitor.asm):00456 (7)     816         jsr     OutWord             ;
E6CB 863D             (      monitor.asm):00457 (2)     818         lda     #'='                ; Print a colon
E6CD BDE1BF           (      monitor.asm):00458 (7)     825         jsr     OutChar             ;
E6D0 A69FEE58         (      monitor.asm):00459 (4+5)   834         lda     [CurrAddress]       ; Load A from Current Address
E6D4 BDE387           (      monitor.asm):00460 (7)     841         jsr     OutByte             ; Print byte value
E6D7 BDE3A9           (      monitor.asm):00461 (7)     848         jsr     OutCRLF             ; New line
E6DA 200D             (      monitor.asm):00462 (3)     851         bra     PokeEnd
E6DC                  (      monitor.asm):00463                 PokeInvalidByte:
E6DC BDE479           (      monitor.asm):00464 (7)     858         jsr     ErrInvalidByte      ; Print invalid byte
E6DF 2008             (      monitor.asm):00465 (3)     861         bra     PokeEnd
E6E1                  (      monitor.asm):00466                 PokeInvalidAddress:
E6E1 BDE46C           (      monitor.asm):00467 (7)     868         jsr     ErrInvalidAddress   ; Print invalid address error
E6E4 2003             (      monitor.asm):00468 (3)     871         bra     PokeEnd
E6E6                  (      monitor.asm):00469                 PokeNoParameters:
E6E6 BDE4A0           (      monitor.asm):00470 (7)     878         jsr     ErrNoParameter      ; Print no parameter error
E6E9                  (      monitor.asm):00471                 PokeEnd:
E6E9 39               (      monitor.asm):00472 (4)     882         rts
                      (      monitor.asm):00473                 
                      (      monitor.asm):00474                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00475                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00476                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00477                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00478                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00479                 ;                                                  |___/                                     
                      (      monitor.asm):00480                 ;
                      (      monitor.asm):00481                 ; Print Registers
                      (      monitor.asm):00482                 ; ===============
E6EA                  (      monitor.asm):00483                 PrintRegisters:
                      (      monitor.asm):00484                     ; Print Register A
E6EA 8641             (      monitor.asm):00485 (2)     884         lda     #'A'
E6EC BDE1BF           (      monitor.asm):00486 (7)     891         jsr     OutChar
E6EF 863A             (      monitor.asm):00487 (2)     893         lda     #':'
E6F1 BDE1BF           (      monitor.asm):00488 (7)     900         jsr     OutChar
E6F4 B6EE5E           (      monitor.asm):00489 (4)     904         lda     RegA
E6F7 BDE387           (      monitor.asm):00490 (7)     911         jsr     OutByte
E6FA 8620             (      monitor.asm):00491 (2)     913         lda     #' '
E6FC BDE1BF           (      monitor.asm):00492 (7)     920         jsr     OutChar
                      (      monitor.asm):00493                     ; Print Register B
E6FF 8642             (      monitor.asm):00494 (2)     922         lda     #'B'
E701 BDE1BF           (      monitor.asm):00495 (7)     929         jsr     OutChar
E704 863A             (      monitor.asm):00496 (2)     931         lda     #':'
E706 BDE1BF           (      monitor.asm):00497 (7)     938         jsr     OutChar
E709 B6EE5F           (      monitor.asm):00498 (4)     942         lda     RegB
E70C BDE387           (      monitor.asm):00499 (7)     949         jsr     OutByte
E70F 8620             (      monitor.asm):00500 (2)     951         lda     #' '
E711 BDE1BF           (      monitor.asm):00501 (7)     958         jsr     OutChar
                      (      monitor.asm):00502                     ; Print Register E
E714 8645             (      monitor.asm):00503 (2)     960         lda     #'E'
E716 BDE1BF           (      monitor.asm):00504 (7)     967         jsr     OutChar
E719 863A             (      monitor.asm):00505 (2)     969         lda     #':'
E71B BDE1BF           (      monitor.asm):00506 (7)     976         jsr     OutChar
E71E B6EE60           (      monitor.asm):00507 (4)     980         lda     RegE
E721 BDE387           (      monitor.asm):00508 (7)     987         jsr     OutByte
E724 8620             (      monitor.asm):00509 (2)     989         lda     #' '
E726 BDE1BF           (      monitor.asm):00510 (7)     996         jsr     OutChar
                      (      monitor.asm):00511                     ; Print Register F
E729 8646             (      monitor.asm):00512 (2)     998         lda     #'F'
E72B BDE1BF           (      monitor.asm):00513 (7)     1005        jsr     OutChar
E72E 863A             (      monitor.asm):00514 (2)     1007        lda     #':'
E730 BDE1BF           (      monitor.asm):00515 (7)     1014        jsr     OutChar
E733 B6EE61           (      monitor.asm):00516 (4)     1018        lda     RegF
E736 BDE387           (      monitor.asm):00517 (7)     1025        jsr     OutByte
E739 8620             (      monitor.asm):00518 (2)     1027        lda     #' '
E73B BDE1BF           (      monitor.asm):00519 (7)     1034        jsr     OutChar
                      (      monitor.asm):00520                     ; Print Register X
E73E 8658             (      monitor.asm):00521 (2)     1036        lda     #'X'
E740 BDE1BF           (      monitor.asm):00522 (7)     1043        jsr     OutChar
E743 863A             (      monitor.asm):00523 (2)     1045        lda     #':'
E745 BDE1BF           (      monitor.asm):00524 (7)     1052        jsr     OutChar
E748 FCEE62           (      monitor.asm):00525 (5)     1057        ldd     RegX
E74B BDE3FA           (      monitor.asm):00526 (7)     1064        jsr     OutWord
E74E 8620             (      monitor.asm):00527 (2)     1066        lda     #' '
E750 BDE1BF           (      monitor.asm):00528 (7)     1073        jsr     OutChar
                      (      monitor.asm):00529                     ; Print Register Y
E753 8659             (      monitor.asm):00530 (2)     1075        lda     #'Y'
E755 BDE1BF           (      monitor.asm):00531 (7)     1082        jsr     OutChar
E758 863A             (      monitor.asm):00532 (2)     1084        lda     #':'
E75A BDE1BF           (      monitor.asm):00533 (7)     1091        jsr     OutChar
E75D FCEE64           (      monitor.asm):00534 (5)     1096        ldd     RegY
E760 BDE3FA           (      monitor.asm):00535 (7)     1103        jsr     OutWord
E763 8620             (      monitor.asm):00536 (2)     1105        lda     #' '
E765 BDE1BF           (      monitor.asm):00537 (7)     1112        jsr     OutChar
                      (      monitor.asm):00538                     ; Print Register U
E768 8655             (      monitor.asm):00539 (2)     1114        lda     #'U'
E76A BDE1BF           (      monitor.asm):00540 (7)     1121        jsr     OutChar
E76D 863A             (      monitor.asm):00541 (2)     1123        lda     #':'
E76F BDE1BF           (      monitor.asm):00542 (7)     1130        jsr     OutChar
E772 FCEE66           (      monitor.asm):00543 (5)     1135        ldd     RegU
E775 BDE3FA           (      monitor.asm):00544 (7)     1142        jsr     OutWord
E778 8620             (      monitor.asm):00545 (2)     1144        lda     #' '
E77A BDE1BF           (      monitor.asm):00546 (7)     1151        jsr     OutChar
                      (      monitor.asm):00547                     ; Print Register S
E77D 8653             (      monitor.asm):00548 (2)     1153        lda     #'S'
E77F BDE1BF           (      monitor.asm):00549 (7)     1160        jsr     OutChar
E782 863A             (      monitor.asm):00550 (2)     1162        lda     #':'
E784 BDE1BF           (      monitor.asm):00551 (7)     1169        jsr     OutChar
E787 FCEE68           (      monitor.asm):00552 (5)     1174        ldd     RegS
E78A BDE3FA           (      monitor.asm):00553 (7)     1181        jsr     OutWord
E78D 8620             (      monitor.asm):00554 (2)     1183        lda     #' '
E78F BDE1BF           (      monitor.asm):00555 (7)     1190        jsr     OutChar
                      (      monitor.asm):00556                     ; Print Register CC
E792 8643             (      monitor.asm):00557 (2)     1192        lda     #'C'
E794 BDE1BF           (      monitor.asm):00558 (7)     1199        jsr     OutChar
E797 BDE1BF           (      monitor.asm):00559 (7)     1206        jsr     OutChar
E79A 863A             (      monitor.asm):00560 (2)     1208        lda     #':'
E79C BDE1BF           (      monitor.asm):00561 (7)     1215        jsr     OutChar
E79F B6EE5C           (      monitor.asm):00562 (4)     1219        lda     RegCC
E7A2 BDE387           (      monitor.asm):00563 (7)     1226        jsr     OutByte
E7A5 8620             (      monitor.asm):00564 (2)     1228        lda     #' '
E7A7 BDE1BF           (      monitor.asm):00565 (7)     1235        jsr     OutChar
                      (      monitor.asm):00566                     ; Print Register DP
E7AA 8644             (      monitor.asm):00567 (2)     1237        lda     #'D'
E7AC BDE1BF           (      monitor.asm):00568 (7)     1244        jsr     OutChar
E7AF 8650             (      monitor.asm):00569 (2)     1246        lda     #'P'
E7B1 BDE1BF           (      monitor.asm):00570 (7)     1253        jsr     OutChar
E7B4 863A             (      monitor.asm):00571 (2)     1255        lda     #':'
E7B6 BDE1BF           (      monitor.asm):00572 (7)     1262        jsr     OutChar
E7B9 B6EE5D           (      monitor.asm):00573 (4)     1266        lda     RegDP
E7BC BDE387           (      monitor.asm):00574 (7)     1273        jsr     OutByte
E7BF 8620             (      monitor.asm):00575 (2)     1275        lda     #' '
E7C1 BDE1BF           (      monitor.asm):00576 (7)     1282        jsr     OutChar
                      (      monitor.asm):00577                     ; Print Program Counter
E7C4 8650             (      monitor.asm):00578 (2)     1284        lda     #'P'
E7C6 BDE1BF           (      monitor.asm):00579 (7)     1291        jsr     OutChar
E7C9 8643             (      monitor.asm):00580 (2)     1293        lda     #'C'
E7CB BDE1BF           (      monitor.asm):00581 (7)     1300        jsr     OutChar
E7CE 863A             (      monitor.asm):00582 (2)     1302        lda     #':'
E7D0 BDE1BF           (      monitor.asm):00583 (7)     1309        jsr     OutChar
E7D3 FCEE6A           (      monitor.asm):00584 (5)     1314        ldd     RegPC
E7D6 BDE3FA           (      monitor.asm):00585 (7)     1321        jsr     OutWord
E7D9 BDE3A9           (      monitor.asm):00586 (7)     1328        jsr     OutCRLF
E7DC 39               (      monitor.asm):00587 (4)     1332        rts
                      (      monitor.asm):00588                 
                      (      monitor.asm):00589                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):00590                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00591                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00592                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00593                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00594                 ;                                               |___/                                     
                      (      monitor.asm):00595                 ;
                      (      monitor.asm):00596                 ; Push Registers
                      (      monitor.asm):00597                 ; ==============
                      (      monitor.asm):00598                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):00599                 
E7DD                  (      monitor.asm):00600                 PushRegisters:  
                      (      monitor.asm):00601                     ; Recover register values from last run command
E7DD 103B             (      monitor.asm):00602 (6)     1338        puluw
E7DF 377F             (      monitor.asm):00603 (4+10)  1352        pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):00604                     ; Save registers in variables
E7E1 3401             (      monitor.asm):00605 (4+1)   1357        pshs    CC                  ; Store CC so it's not altered
E7E3 B7EE5E           (      monitor.asm):00606 (4)     1361        sta     RegA                ; Save the A register
E7E6 3502             (      monitor.asm):00607 (4+1)   1366        puls    A                   ; Restore CC so it can be saved
E7E8 B7EE5C           (      monitor.asm):00608 (4)     1370        sta     RegCC               ; Save the condition code register
E7EB F7EE5F           (      monitor.asm):00609 (4)     1374        stb     RegB                ; Save the B register
E7EE 11B7EE60         (      monitor.asm):00610 (5)     1379        ste     RegE                ; Save the E register
E7F2 11F7EE61         (      monitor.asm):00611 (5)     1384        stf     RegF                ; Save the F register
E7F6 BFEE62           (      monitor.asm):00612 (5)     1389        stx     RegX                ; Save the X register
E7F9 10BFEE64         (      monitor.asm):00613 (6)     1395        sty     RegY                ; Save the Y register
E7FD 10FFEE68         (      monitor.asm):00614 (6)     1401        sts     RegS                ; Save the systemp stack
E801 3706             (      monitor.asm):00615 (4+2)   1407        pulu    D                   ; Restore PC in D
E803 830002           (      monitor.asm):00616 (3)     1410        subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
E806 FDEE6A           (      monitor.asm):00617 (5)     1415        std     RegPC               ; Save the program counter that was in D
E809 FFEE66           (      monitor.asm):00618 (5)     1420        stu     RegU                ; Save the user stack
E80C 39               (      monitor.asm):00619 (4)     1424        rts
                      (      monitor.asm):00620                 
                      (      monitor.asm):00621                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):00622                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00623                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00624                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00625                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00626                 ;                                         |___/                                     
                      (      monitor.asm):00627                 ;
                      (      monitor.asm):00628                 ; Pull Registers
                      (      monitor.asm):00629                 ; --------------
E80D                  (      monitor.asm):00630                 PullRegisters:  
E80D B6EE5C           (      monitor.asm):00631 (4)     1428        lda     RegCC               ; Load CC register
E810 3402             (      monitor.asm):00632 (4+1)   1433        pshs    A                   ; Store it so it can be restored
E812 B6EE5E           (      monitor.asm):00633 (4)     1437        lda     RegA                ; Load the A register
E815 F6EE5F           (      monitor.asm):00634 (4)     1441        ldb     RegB                ; Load the B register
E818 11B6EE60         (      monitor.asm):00635 (5)     1446        lde     RegE                ; Load the E register
E81C 11F6EE61         (      monitor.asm):00636 (5)     1451        ldf     RegF                ; Load the F register
E820 BEEE62           (      monitor.asm):00637 (5)     1456        ldx     RegX                ; Load the X register
E823 10BEEE64         (      monitor.asm):00638 (6)     1462        ldy     RegY                ; Load the Y register
E827 FEEE66           (      monitor.asm):00639 (5)     1467        ldu     RegU                ; Load the user stack
E82A 3581             (      monitor.asm):00640 (4+3)   1474        puls    CC,PC
                      (      monitor.asm):00641                 
                      (      monitor.asm):00642                 ;  ____                  
                      (      monitor.asm):00643                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):00644                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):00645                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):00646                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):00647                 ;
                      (      monitor.asm):00648                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):00649                 ; -------------------------------------------------
                      (      monitor.asm):00650                 ; Input:    X = Command line string
                      (      monitor.asm):00651                 
E82C                  (      monitor.asm):00652                 Run:
E82C BDE88C           (      monitor.asm):00653 (7)     1481        jsr     SkipSpaces          ; Removes possible leading spaces
E82F A684             (      monitor.asm):00654 (4+0)   1485        lda     ,X                  ; Read character from command line
E831 2708             (      monitor.asm):00655 (3)     1488        beq     RunValidate         ; Use current address
E833                  (      monitor.asm):00656                 RunGetAddress:
E833 BDE279           (      monitor.asm):00657 (7)     1495        jsr     GetStrWord          ; Get address from the input buffer
E836 2413             (      monitor.asm):00658 (3)     1498        bcc     RunError            ; Invalid address, then print error
E838 FDEE58           (      monitor.asm):00659 (5)     1503        std     CurrAddress         ; Save address to memory
E83B                  (      monitor.asm):00660                 RunValidate:
E83B A69FEE58         (      monitor.asm):00661 (4+5)   1512        lda     [CurrAddress]       ; Load byte at specified address
E83F 270D             (      monitor.asm):00662 (3)     1515        beq     RunEnd              ; If it's zero, then don't try to execute code
E841                  (      monitor.asm):00663                 RunExecute:
E841 7CEE5B           (      monitor.asm):00664 (6)     1521        inc     RunFlag             ; Make run flag non zero
E844 BDE80D           (      monitor.asm):00665 (7)     1528        jsr     PullRegisters       ; Restore registers from previous command
E847 6E9FEE58         (      monitor.asm):00666 (3+5)   1536        jmp     [CurrAddress]       ; Execute code at specified address
E84B                  (      monitor.asm):00667                 RunError:
E84B BDE46C           (      monitor.asm):00668 (7)     1543        jsr     ErrInvalidAddress   ; If there's an error in the address, print it
E84E                  (      monitor.asm):00669                 RunEnd:
E84E 39               (      monitor.asm):00670 (4)     1547        rts
                      (      monitor.asm):00671                 
                      (      monitor.asm):00672                 ;  ____           _        _          _       _                           
                      (      monitor.asm):00673                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):00674                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):00675                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):00676                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):00677                 ;
                      (      monitor.asm):00678                 ; Sets the current address
                      (      monitor.asm):00679                 ; ========================
                      (      monitor.asm):00680                 ; Input:    X = Command line string
                      (      monitor.asm):00681                 
E84F                  (      monitor.asm):00682                 SetAddress:
E84F 3407             (      monitor.asm):00683 (4+3)   1554        pshs    A,B,CC
E851 BDE88C           (      monitor.asm):00684 (7)     1561        jsr     SkipSpaces          ; Remove leading spaces
E854 A684             (      monitor.asm):00685 (4+0)   1565        lda     ,X                  ; Load first character
E856 270F             (      monitor.asm):00686 (3)     1568        beq     SetAddressDefault   ; Is it the end of the string?
E858 BDE279           (      monitor.asm):00687 (7)     1575        jsr     GetStrWord          ; Get address from the input buffer
E85B 2405             (      monitor.asm):00688 (3)     1578        bcc     SetAddressError     ; Error in address
E85D FDEE58           (      monitor.asm):00689 (5)     1583        std     CurrAddress         ; Save the address
E860 200B             (      monitor.asm):00690 (3)     1586        bra     SetAddressEnd
E862                  (      monitor.asm):00691                 SetAddressError:
E862 BDE46C           (      monitor.asm):00692 (7)     1593        jsr     ErrInvalidAddress   ; Display address error
E865 2006             (      monitor.asm):00693 (3)     1596        bra     SetAddressEnd
E867                  (      monitor.asm):00694                 SetAddressDefault:
E867 CC0000           (      monitor.asm):00695 (3)     1599        ldd     #$0000
E86A FDEE58           (      monitor.asm):00696 (5)     1604        std     CurrAddress         ; Set default address to $0000
E86D                  (      monitor.asm):00697                 SetAddressEnd:
E86D 3587             (      monitor.asm):00698 (4+5)   1613        puls    A,B,CC,PC
                      (      monitor.asm):00699                 
                      (      monitor.asm):00700                 ;  ____           _     ____                    _    
                      (      monitor.asm):00701                 ; / ___|    ___  | |_  | __ )    __ _   _ __   | | __
                      (      monitor.asm):00702                 ; \___ \   / _ \ | __| |  _ \   / _` | | '_ \  | |/ /
                      (      monitor.asm):00703                 ;  ___) | |  __/ | |_  | |_) | | (_| | | | | | |   < 
                      (      monitor.asm):00704                 ; |____/   \___|  \__| |____/   \__,_| |_| |_| |_|\_\
                      (      monitor.asm):00705                 ;
                      (      monitor.asm):00706                 ; Sets the current bank
                      (      monitor.asm):00707                 ; =====================
                      (      monitor.asm):00708                 ; Input:    X = Command line string
                      (      monitor.asm):00709                 
E86F                  (      monitor.asm):00710                 SetBank:
E86F 3403             (      monitor.asm):00711 (4+2)   1619        pshs    A,CC
E871 BDE88C           (      monitor.asm):00712 (7)     1626        jsr     SkipSpaces          ; Remove leading spaces
E874 A684             (      monitor.asm):00713 (4+0)   1630        lda     ,X                  ; Load first character
E876 270F             (      monitor.asm):00714 (3)     1633        beq     SetBankDefault      ; Is it the end of the string?
E878 BDE1E4           (      monitor.asm):00715 (7)     1640        jsr     GetStrByte          ; Get bank from the input buffer
E87B 2405             (      monitor.asm):00716 (3)     1643        bcc     SetBankError        ; Error in byte
E87D B7EE5A           (      monitor.asm):00717 (4)     1647        sta     CurrBank            ; Save the bank
E880 2008             (      monitor.asm):00718 (3)     1650        bra     SetBankEnd
E882                  (      monitor.asm):00719                 SetBankError:
E882 BDE479           (      monitor.asm):00720 (7)     1657        jsr     ErrInvalidByte      ; Display byte error
E885 2003             (      monitor.asm):00721 (3)     1660        bra     SetBankEnd
E887                  (      monitor.asm):00722                 SetBankDefault:
E887 7FEE5A           (      monitor.asm):00723 (6)     1666        clr     CurrBank            ; Set default bank to $00
E88A                  (      monitor.asm):00724                 SetBankEnd:
E88A 3583             (      monitor.asm):00725 (4+4)   1674        puls    A,CC,PC
                      (      monitor.asm):00726                 
                      (      monitor.asm):00727                 ;  ____    _      _           ____                                      
                      (      monitor.asm):00728                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):00729                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):00730                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):00731                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):00732                 ;                    |_|             |_|
                      (      monitor.asm):00733                 ;
                      (      monitor.asm):00734                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):00735                 ; ================================================================================
                      (      monitor.asm):00736                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):00737                 ; Output:   X = New position of pointer
                      (      monitor.asm):00738                 
                      (      monitor.asm):00739                     PRAGMA cc
                      (      monitor.asm):00740                 
E88C                  (      monitor.asm):00741                 SkipSpaces:
E88C 3403             (      monitor.asm):00742 (4+2)   6           pshs    A,CC
E88E                  (      monitor.asm):00743                 SkipSpacesLoop:
E88E A684             (      monitor.asm):00744 (4+0)   10          lda     ,X                  ; Load character from string
E890 270B             (      monitor.asm):00745 (3)     13          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
E892 8120             (      monitor.asm):00746 (2)     15          cmpa    #' '                ; Is it a space?
E894 2607             (      monitor.asm):00747 (3)     18          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
E896 3001             (      monitor.asm):00748 (4+1)   23          leax    1,X                 ; Increment index for next character
E898 7CEE57           (      monitor.asm):00749 (6)     29          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
E89B 20F1             (      monitor.asm):00750 (3)     32          bra     SkipSpacesLoop      ; Go and read another character
E89D                  (      monitor.asm):00751                 SkipSpacesEnd:
E89D 3583             (      monitor.asm):00752 (4+4)   40          puls    A,CC,PC
                      (         main.asm):00184                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
E89F                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
E89F 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E8C7 0D0A             (         data.asm):00009                     .db     CR,LF
E8C9 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
E8F1 0D0A             (         data.asm):00011                     .db     CR,LF
E8F3 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
E916 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
E919 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
E93C 0D0A0A2400       (         data.asm):00015                     .db     CR,LF,LF,'$',NULL
E941 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
E94D 0D0A2400         (         data.asm):00017                     .db     CR,LF,'$',NULL
E951 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
E971 0D0A             (         data.asm):00019                     .db     CR,LF
E973 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E99B 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
E99F                  (         data.asm):00023                 CmdList:
E99F 41444452         (         data.asm):00024                     .str    "ADDR"
E9A3 FF               (         data.asm):00025                     .db     EOD
E9A4 E84F             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
E9A6 42414E4B         (         data.asm):00027                     .str    "BANK"
E9AA FF               (         data.asm):00028                     .db     EOD
E9AB E86F             (         data.asm):00029                     .dw     SetBank             ; Run code at current or specified address
E9AD 44554D50         (         data.asm):00030                     .str    "DUMP"
E9B1 FF               (         data.asm):00031                     .db     EOD
E9B2 E532             (         data.asm):00032                     .dw     Dump                ; Display content of memory
E9B4 48454C50         (         data.asm):00033                     .str    "HELP"
E9B8 FF               (         data.asm):00034                     .db     EOD
E9B9 E4BA             (         data.asm):00035                     .dw     CmdHelp             ; Help for various commands
E9BB 4C4F4144         (         data.asm):00036                     .str    "LOAD"
E9BF FF               (         data.asm):00037                     .db     EOD
E9C0 E596             (         data.asm):00038                     .dw     LoadIntelHex        ; Upload Intel Hex code
E9C2 4D4150           (         data.asm):00039                     .str    "MAP"
E9C5 FF               (         data.asm):00040                     .db     EOD
E9C6 E665             (         data.asm):00041                     .dw     MemoryMap           ; Memory map of LogicSpark-09
E9C8 5045454B         (         data.asm):00042                     .str    "PEEK"
E9CC FF               (         data.asm):00043                     .db     EOD
E9CD E680             (         data.asm):00044                     .dw     Peek                ; Read a byte of memory
E9CF 504F4B45         (         data.asm):00045                     .str    "POKE"
E9D3 FF               (         data.asm):00046                     .db     EOD
E9D4 E6AA             (         data.asm):00047                     .dw     Poke                ; Write a byte of memory
E9D6 524547           (         data.asm):00048                     .str    "REG"
E9D9 FF               (         data.asm):00049                     .db     EOD
E9DA E6EA             (         data.asm):00050                     .dw     PrintRegisters      ; Print registers
E9DC 52554E           (         data.asm):00051                     .str    "RUN"
E9DF FF               (         data.asm):00052                     .db     EOD
E9E0 E82C             (         data.asm):00053                     .dw     Run                 ; Run code at current or specified address
E9E2 00               (         data.asm):00054                     .db     NULL
                      (         data.asm):00055                 
E9E3                  (         data.asm):00056                 CmdHelpMsg: ;                                        *                       *               *
E9E3 4C697374206F6620 (         data.asm):00057                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
E9FA 0D0A             (         data.asm):00058                     .db     CR,LF
E9FC 20202D2041444452 (         data.asm):00059                     .str    "  - ADDR: Set current address"
     3A20536574206375
     7272656E74206164
     6472657373
EA19 0D0A             (         data.asm):00060                     .db     CR,LF
EA1B 20202D2042414E4B (         data.asm):00061                     .str    "  - BANK: Set current bank"
     3A20536574206375
     7272656E74206261
     6E6B
EA35 0D0A             (         data.asm):00062                     .db     CR,LF
EA37 20202D2044554D50 (         data.asm):00063                     .str    "  - DUMP: Display memory content"
     3A20446973706C61
     79206D656D6F7279
     20636F6E74656E74
EA57 0D0A             (         data.asm):00064                     .db     CR,LF
EA59 20202D2048454C50 (         data.asm):00065                     .str    "  - HELP: This help screen"
     3A20546869732068
     656C702073637265
     656E
EA73 0D0A             (         data.asm):00066                     .db     CR,LF
EA75 20202D204C4F4144 (         data.asm):00067                     .str    "  - LOAD: Load Intel Hex from console"
     3A204C6F61642049
     6E74656C20486578
     2066726F6D20636F
     6E736F6C65
EA9A 0D0A             (         data.asm):00068                     .db     CR,LF
EA9C 20202D204D41503A (         data.asm):00069                     .str    "  - MAP: Memory and I/O map of system"
     204D656D6F727920
     616E6420492F4F20
     6D6170206F662073
     797374656D
EAC1 0D0A             (         data.asm):00070                     .db     CR,LF
EAC3 20202D205045454B (         data.asm):00071                     .str    "  - PEEK: Read a byte of memory"
     3A20526561642061
     2062797465206F66
     206D656D6F7279
EAE2 0D0A             (         data.asm):00072                     .db     CR,LF
EAE4 20202D20504F4B45 (         data.asm):00073                     .str    "  - POKE: Write a byte into memory"
     3A20577269746520
     6120627974652069
     6E746F206D656D6F
     7279
EB06 0D0A             (         data.asm):00074                     .db     CR,LF
EB08 20202D205245473A (         data.asm):00075                     .str    "  - REG: Print the registers content"
     205072696E742074
     6865207265676973
     7465727320636F6E
     74656E74
EB2C 0D0A             (         data.asm):00076                     .db     CR,LF
EB2E 20202D2052554E3A (         data.asm):00077                     .str    "  - RUN: Execute code"
     2045786563757465
     20636F6465
EB43 0D0A00           (         data.asm):00078                     .db     CR,LF,NULL
                      (         data.asm):00079                 
EB46                  (         data.asm):00080                 ErrInvalidAddrMsg:
EB46 496E76616C696420 (         data.asm):00081                     .str    "Invalid address!"
     6164647265737321
EB56 0D0A00           (         data.asm):00082                     .db     CR,LF,NULL
                      (         data.asm):00083                 
EB59                  (         data.asm):00084                 ErrInvalidByteMsg:
EB59 496E76616C696420 (         data.asm):00085                     .str    "Invalid byte!"
     6279746521
EB66 0D0A00           (         data.asm):00086                     .db     CR,LF,NULL
                      (         data.asm):00087                 
EB69                  (         data.asm):00088                 ErrInvalidParamMsg:
EB69 496E76616C696420 (         data.asm):00089                     .str    "Invalid parameter!"
     706172616D657465
     7221
EB7B 0D0A00           (         data.asm):00090                     .db     CR,LF,NULL
                      (         data.asm):00091                 
EB7E                  (         data.asm):00092                 ErrNoParameterMsg:
EB7E 4E6F20706172616D (         data.asm):00093                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
EB99 0D0A00           (         data.asm):00094                     .db     CR,LF,NULL
                      (         data.asm):00095                 
EB9C                  (         data.asm):00096                 ErrInvalidCmdMsg:
EB9C 496E76616C696420 (         data.asm):00097                     .str    "Invalid command!"
     636F6D6D616E6421
EBAC 0D0A00           (         data.asm):00098                     .db     CR,LF,NULL
                      (         data.asm):00099                 
EBAF                  (         data.asm):00100                 ErrSyntaxErrorMsg:
EBAF 53796E7461782065 (         data.asm):00101                     .str    "Syntax error!"
     72726F7221
EBBC 0D0A00           (         data.asm):00102                     .db     CR,LF,NULL
                      (         data.asm):00103                     
EBBF                  (         data.asm):00104                 LoadStartMsg:
EBBF 4C6F616420363330 (         data.asm):00105                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
EBE1 0D0A             (         data.asm):00106                     .db     CR,LF
EBE3 5072657373204553 (         data.asm):00107                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
EBF7 0D0A00           (         data.asm):00108                     .db     CR,LF,NULL
                      (         data.asm):00109                 
EBFA                  (         data.asm):00110                 LoadUserAbortErr:
EBFA 5472616E73666572 (         data.asm):00111                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
EC12 0D0A00           (         data.asm):00112                     .db     CR,LF,NULL
                      (         data.asm):00113                 
EC15                  (         data.asm):00114                 LoadRecordErr:
EC15 556E6B6E6F776E20 (         data.asm):00115                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
EC2A 00               (         data.asm):00116                     .db     NULL
                      (         data.asm):00117                 
EC2B                  (         data.asm):00118                 LoadFailedErr:
EC2B 446F776E6C6F6164 (         data.asm):00119                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
EC50 0D0A00           (         data.asm):00120                     .db     CR,LF,NULL
                      (         data.asm):00121                 
EC53                  (         data.asm):00122                 LoadSuccessMsg:
EC53 446F776E6C6F6164 (         data.asm):00123                     .str    "Download Successful"
     2053756363657373
     66756C
EC66 0D0A00           (         data.asm):00124                     .db     CR,LF,NULL
                      (         data.asm):00125                 
EC69                  (         data.asm):00126                 MemoryMapMsg:
                      (         data.asm):00127                     ; Memory Map:
EC69 4D656D6F7279204D (         data.asm):00128                     .str    "Memory Map:"
     61703A
EC74 0D0A             (         data.asm):00129                     .db     CR,LF
EC76 202052414D3A2020 (         data.asm):00130                     .str    "  RAM:       $0000-$"
     2020202020243030
     30302D24
EC8A 000D0A           (         data.asm):00131                     .db     NULL,CR,LF
EC8D 2020524F4D3A2020 (         data.asm):00132                     .str    "  ROM:       $"
     202020202024
EC9B 00               (         data.asm):00133                     .db     NULL
EC9C 2D2446444646     (         data.asm):00134                     .str    "-$FDFF"
ECA2 0D0A             (         data.asm):00135                     .db     CR,LF
ECA4 2020436F6E737420 (         data.asm):00136                     .str    "  Const RAM: $FE00-$FEFF"
     52414D3A20244645
     30302D2446454646
ECBC 0D0A             (         data.asm):00137                     .db     CR,LF
ECBE 2020492F4F207261 (         data.asm):00138                     .str    "  I/O range: $FF00-$FFEF"
     6E67653A20244646
     30302D2446464546
ECD6 0D0A             (         data.asm):00139                     .db     CR,LF
ECD8 2020566563746F72 (         data.asm):00140                     .str    "  Vectors:   $FFF0-$FFFF"
     733A202020244646
     46302D2446464646
ECF0 0D0A             (         data.asm):00141                     .db     CR,LF
ECF2 492F4F204D61703A (         data.asm):00142                     .str    "I/O Map:"
ECFA 0D0A             (         data.asm):00143                     .db     CR,LF
ECFC 2020524F4D204469 (         data.asm):00144                     .str    "  ROM Dissable: $FF08 (W)"
     737361626C653A20
     2446463038202857
     29
ED15 0D0A             (         data.asm):00145                     .db     CR,LF
ED17 2020496E742E2056 (         data.asm):00146                     .str    "  Int. Vector:  $FF09 (R)"
     6563746F723A2020
     2446463039202852
     29
ED30 0D0A             (         data.asm):00147                     .db     CR,LF
ED32 2020414349413120 (         data.asm):00148                     .str    "  ACIA1 (USB):  $FF68-$FF6B"
     28555342293A2020
     24464636382D2446
     463642
ED4D 0D0A00           (         data.asm):00149                     .db     CR,LF,NULL
                      (         main.asm):00185                 
                      (         main.asm):00186                 ;  ___           _                                          _         
                      (         main.asm):00187                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00188                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00189                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00190                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00191                 ;                                                  |_|
                      (         main.asm):00192                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00193                 
                      (         main.asm):00194                     PRAGMA cc
                      (         main.asm):00195                     
ED50                  (         main.asm):00196                 IllegalDiv0:
ED50 3B               (         main.asm):00197 (17+?)  17          rti
                      (         main.asm):00198                     
                      (         main.asm):00199                     PRAGMA cc
                      (         main.asm):00200                 
ED51                  (         main.asm):00201                 SoftInt3:
ED51 3B               (         main.asm):00202 (17+?)  17          rti
                      (         main.asm):00203                     
                      (         main.asm):00204                     PRAGMA cc
                      (         main.asm):00205                 
ED52                  (         main.asm):00206                 SoftInt2:
ED52 3B               (         main.asm):00207 (17+?)  17          rti
                      (         main.asm):00208                     
                      (         main.asm):00209                     PRAGMA cc
                      (         main.asm):00210                 
ED53                  (         main.asm):00211                 SoftInt1:
ED53 3B               (         main.asm):00212 (17+?)  17          rti
                      (         main.asm):00213                     
                      (         main.asm):00214                     PRAGMA cc
                      (         main.asm):00215                 
ED54                  (         main.asm):00216                 FIRQInt:
ED54 3B               (         main.asm):00217 (17+?)  17          rti
                      (         main.asm):00218                 
                      (         main.asm):00219                     PRAGMA cc
                      (         main.asm):00220                 
ED55                  (         main.asm):00221                 IRQInt:
ED55 3B               (         main.asm):00222 (17+?)  17          rti
                      (         main.asm):00223                 
                      (         main.asm):00224                     PRAGMA cc
                      (         main.asm):00225                 
ED56                  (         main.asm):00226                 NMIInt:
ED56 3B               (         main.asm):00227 (17+?)  17          rti
                      (         main.asm):00228                 
                      (         main.asm):00229                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00230                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00231                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00232                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00233                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00234                 ;          |___/
                      (         main.asm):00235                 ;
                      (         main.asm):00236                 ; System variables used by monitor subroutines
                      (         main.asm):00237                 ; ============================================
                      (         main.asm):00238                 
ED57                  (         main.asm):00239                 InStrBuffer:    .DS     $100    ; String input for console input
EE57                  (         main.asm):00240                 CmdErrorPtr:    .DS     1       ; Command prompt error pointer
EE58                  (         main.asm):00241                 CurrAddress:    .DS     2       ; Current address, useful for monitor actions
EE5A                  (         main.asm):00242                 CurrBank:       .DS     1       ; Current bank number, relative to current address
EE5B                  (         main.asm):00243                 RunFlag         .DS     1       ; Run flag to indicate registers should be saved or not
EE5C                  (         main.asm):00244                 RegCC:          .DS     1       ; Register CC
EE5D                  (         main.asm):00245                 RegDP:          .DS     1       ; Register DP
EE5E                  (         main.asm):00246                 RegA:           .DS     1       ; Register A
EE5F                  (         main.asm):00247                 RegB:           .DS     1       ; Register B
EE60                  (         main.asm):00248                 RegE:           .DS     1       ; Register E
EE61                  (         main.asm):00249                 RegF:           .DS     1       ; Register F
EE62                  (         main.asm):00250                 RegX:           .DS     2       ; Register X
EE64                  (         main.asm):00251                 RegY:           .DS     2       ; Register Y
EE66                  (         main.asm):00252                 RegU:           .DS     2       ; User stack
EE68                  (         main.asm):00253                 RegS:           .DS     2       ; System stack
EE6A                  (         main.asm):00254                 RegPC:          .DS     2       ; Register PC
EE6C                  (         main.asm):00255                 TempByte:       .DS     1       ; Temporary storage byte (8-bit)
EE6D                  (         main.asm):00256                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
EE6D                  (         main.asm):00257                 TempW1:         .DS     1       ; Word MSB
EE6E                  (         main.asm):00258                 TempW2:         .DS     1       ; Word LSB
EE6F                  (         main.asm):00259                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
EE6F                  (         main.asm):00260                 TempQ1:         .DS     1       ; Quad High MSB
EE70                  (         main.asm):00261                 TempQ2:         .DS     1       ; Quad Low MSB
EE71                  (         main.asm):00262                 TempQ3:         .DS     1       ; Quad High LSB
EE72                  (         main.asm):00263                 TempQ4:         .DS     1       ; Quad Low LSB
EE73                  (         main.asm):00264                 VarEnd:
                      (         main.asm):00265                 
EE73 5353535353535353 (         main.asm):00266                     FILL 'S',JmpStart-VarEnd    ; Clear area with $00
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353
                      (         main.asm):00267                 
                      (         main.asm):00268                 ;      _                             
                      (         main.asm):00269                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00270                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00271                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00272                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00273                 ;                             |_|    
                      (         main.asm):00274                 ;
                      (         main.asm):00275                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00276                 ; =======================================================
                      (         main.asm):00277                 
                      (         main.asm):00278                     ORG $FD00
                      (         main.asm):00279                 
FD00                  (         main.asm):00280                 JmpStart:
FD00 E15C             (         main.asm):00281                 JmpCls:             .DW     Cls
FD02 E1CE             (         main.asm):00282                 JmpDelChar:         .DW     DelChar
FD04 E1E4             (         main.asm):00283                 JmpGetStrByte:      .DW     GetStrByte
FD06 E253             (         main.asm):00284                 JmpGetStrNibble:    .DW     GetStrNibble
FD08 E279             (         main.asm):00285                 JmpGetStrWord:      .DW     GetStrWord
FD0A E2E8             (         main.asm):00286                 JmpInByte:          .DW     InByte
FD0C E1A5             (         main.asm):00287                 JmpInChar:          .DW     InChar
FD0E E1B0             (         main.asm):00288                 JmpInCharNW:        .DW     InCharNW
FD10 E2F9             (         main.asm):00289                 JmpInStr:           .DW     InStr
FD12 E368             (         main.asm):00290                 JmpInWord:          .DW     InWord
FD14 E1BF             (         main.asm):00291                 JmpOutChar:         .DW     OutChar
FD16 E387             (         main.asm):00292                 JmpOutByte:         .DW     OutByte
FD18 E3A9             (         main.asm):00293                 JmpOutCRLF:         .DW     OutCRLF
FD1A E3B7             (         main.asm):00294                 JmpOutNibble:       .DW     OutNibble
FD1C E3CF             (         main.asm):00295                 JmpOutStr:          .DW     OutStr
FD1E E3FA             (         main.asm):00296                 JmpOutWord:         .DW     OutWord
FD20 E089             (         main.asm):00297                 JmpAscToBinNibble:  .DW     AscToBinNibble
FD22 E09C             (         main.asm):00298                 JmpAscToBinByte:    .DW     AscToBinByte
FD24 E0B2             (         main.asm):00299                 JmpAscToBinWord:    .DW     AscToBinWord
FD26 E0C4             (         main.asm):00300                 JmpBinToAscNibble:  .DW     BinToAscNibble
FD28 E0D4             (         main.asm):00301                 JmpBinToAscByte:    .DW     BinToAscByte
FD2A E0F0             (         main.asm):00302                 JmpBinToAscWord:    .DW     BinToAscWord
FD2C E101             (         main.asm):00303                 JmpBinToBcd:        .DW     BinToBcd
FD2E E14E             (         main.asm):00304                 JmpUpperCase:       .DW     UpperCase
FD30                  (         main.asm):00305                 JmpTableEnd:
                      (         main.asm):00306                 
FD30 4A4A4A4A4A4A4A4A (         main.asm):00307                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
                      (         main.asm):00308                 
                      (         main.asm):00309                 ;   ____                         _                     _   
                      (         main.asm):00310                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00311                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00312                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00313                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00314                 ;
                      (         main.asm):00315                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00316                 ; =====================================================================
                      (         main.asm):00317                 
                      (         main.asm):00318                     PRAGMA cc
                      (         main.asm):00319                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00320                     
FE00                  (         main.asm):00321                 ConstRAM:
FE00                  (         main.asm):00322                     .DS     256                 
                      (         main.asm):00323                 
                      (         main.asm):00324                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00325                 
FF00                  (         main.asm):00326                 InputOutputRange:
FF00                  (         main.asm):00327                     .DS     240
                      (         main.asm):00328                 
                      (         main.asm):00329                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00330                 
FFF0                  (         main.asm):00331                 Vectors:
FFF0 ED50             (         main.asm):00332                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 ED51             (         main.asm):00333                     .DW     SoftInt3            ; SWI3
FFF4 ED52             (         main.asm):00334                     .DW     SoftInt2            ; SWI2
FFF6 ED53             (         main.asm):00335                     .DW     SoftInt1            ; SWI
FFF8 ED54             (         main.asm):00336                     .DW     FIRQInt             ; FIRQ
FFFA ED55             (         main.asm):00337                     .DW     IRQInt              ; IRQ
FFFC ED56             (         main.asm):00338                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00339                     .DW     Reset               ; RESET
                      (         main.asm):00340                 
                      (         main.asm):00341                     END

Symbol Table:
[ G] AscToBinByte                     E09C
[ G] AscToBinNibble                   E089
[ G] AscToBinNibbleAlpha              E096
[ G] AscToBinNibbleEnd                E098
[ G] AscToBinWord                     E0B2
[ G] BinToAscByte                     E0D4
[ G] BinToAscNibble                   E0C4
[ G] BinToAscNibbleAlpha              E0D0
[ G] BinToAscNibbleEnd                E0D2
[ G] BinToAscWord                     E0F0
[ G] BinToBcd                         E101
[ G] BootMsg                          E89F
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E15C
[ G] CmdErrorPtr                      EE57
[ G] CmdHelp                          E4BA
[ G] CmdHelpMsg                       E9E3
[ G] CmdList                          E99F
[ G] CmdParse                         E4C1
[ G] CmdParseChar                     E4D1
[ G] CmdParseEnd                      E50E
[ G] CmdParseExecute                  E4FE
[ G] CmdParseNone                     E50B
[ G] CmdParseSkip                     E4E4
[ G] CmdParseSkipLoop                 E4EA
[ G] CmdParseValid                    E4F6
[ G] CmdPrompt                        E510
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E192
[ G] Com1RxNoWait                     E1B0
[ G] Com1RxNoWaitEnd                  E1BE
[ G] Com1RxWait                       E1A5
[ G] Com1Tx                           E1BF
[ G] Com1TxNotReady                   E1C1
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      EE58
[ G] CurrBank                         EE5A
[ G] DelChar                          E1CE
[ G] DelCharLoop                      E1D2
[ G] Dump                             E532
[ G] DumpAddr                         E549
[ G] DumpByte                         E55A
[ G] DumpChar                         E573
[ G] DumpCharDot                      E57E
[ G] DumpCharPrint                    E580
[ G] DumpDisplay                      E541
[ G] DumpEnd                          E595
[ G] DumpInvalidAddress               E592
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E46C
[ G] ErrInvalidAddrMsg                EB46
[ G] ErrInvalidByte                   E479
[ G] ErrInvalidByteMsg                EB59
[ G] ErrInvalidCmdMsg                 EB9C
[ G] ErrInvalidCommand                E486
[ G] ErrInvalidParameter              E493
[ G] ErrInvalidParamMsg               EB69
[ G] ErrNoParameter                   E4A0
[ G] ErrNoParameterMsg                EB7E
[ G] ErrorPointerLoop                 E45A
[ G] ErrPointer                       E453
[ G] ErrSyntaxError                   E4AD
[ G] ErrSyntaxErrorMsg                EBAF
[ G] ESC                              001B
[ G] FIRQInt                          ED54
[ G] GetStrByte                       E1E4
[ G] GetStrByteCount                  E1ED
[ G] GetStrByteEnd                    E232
[ G] GetStrByteError                  E230
[ G] GetStrByteFixed                  E236
[ G] GetStrByteFixedEnd               E251
[ G] GetStrByteFixedErr               E24F
[ G] GetStrByteGood                   E22C
[ G] GetStrByteParse                  E1F8
[ G] GetStrByteParse2                 E209
[ G] GetStrByteParseMore              E222
[ G] GetStrNibble                     E253
[ G] GetStrNibbleEnd                  E273
[ G] GetStrNibbleError                E26A
[ G] GetStrNibbleGood                 E26E
[ G] GetStrWord                       E279
[ G] GetStrWordCount                  E280
[ G] GetStrWordEnd                    E2E5
[ G] GetStrWordError                  E2E3
[ G] GetStrWordGood                   E2DD
[ G] GetStrWordParse                  E28B
[ G] GetStrWordParse2                 E29E
[ G] GetStrWordParse3                 E2AB
[ G] GetStrWordParse4                 E2BF
[ G] GetStrWordParseMore              E2D3
[ G] IllegalDiv0                      ED50
[ G] InByte                           E2E8
[ G] InChar                           E1A5
[ G] InCharNW                         E1B0
[ G] Init                             E000
[ G] InputOutputRange                 FF00
[ G] InStr                            E2F9
[ G] InStrBackspace                   E319
[ G] InStrBuffer                      ED57
[ G] InStrClearCarry                  E362
[ G] InStrEnd                         E364
[ G] InStrEscape                      E330
[ G] InStrPrintCR                     E352
[ G] InStrReadChar                    E303
[ G] InStrStoreChar                   E349
[ G] IntVector                        FF09
[ G] InWord                           E368
[ G] IRQInt                           ED55
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD30
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E63D
[ G] LoadChecksum                     E60A
[ G] LoadData                         E5FA
[ G] LoadEnd                          E661
[ G] LoadEOF                          E629
[ G] LoadFailedErr                    EC2B
[ G] LoadFailure                      E61E
[ G] LoadIntelHex                     E596
[ G] LoadRecord                       E5A2
[ G] LoadRecordErr                    EC15
[ G] LoadRecordType                   E5DD
[ G] LoadStart                        E5B2
[ G] LoadStartMsg                     EBBF
[ G] LoadSuccess                      E64A
[ G] LoadSuccessMsg                   EC53
[ G] LoadUserAbortErr                 EBFA
[ G] Main                             E064
[ G] MainRunExec                      E07F
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E665
[ G] MemoryMapMsg                     EC69
[ G] NMIInt                           ED56
[ G] NULL                             0000
[ G] OutByte                          E387
[ G] OutByteDigit1NLZ                 E3A2
[ G] OutByteLZ                        E387
[ G] OutByteNLZ                       E396
[ G] OutChar                          E1BF
[ G] OutCRLF                          E3A9
[ G] OutNibble                        E3B7
[ G] OutNibbleLSB                     E3B7
[ G] OutNibbleMSB                     E3C1
[ G] OutStr                           E3CF
[ G] OutStrEnd                        E3DE
[ G] OutStrLoop                       E3D1
[ G] OutStrLZ                         E3CF
[ G] OutStrNLZ                        E3E0
[ G] OutStrNLZEnd                     E3F8
[ G] OutStrNLZLoop                    E3E3
[ G] OutStrNLZPrintChar               E3F1
[ G] OutWord                          E3FA
[ G] OutWordNLZ                       E417
[ G] OutWordNLZ2                      E42A
[ G] OutWordNLZ3                      E43A
[ G] OutWordNLZ4                      E44A
[ G] OutWordNLZp2                     E435
[ G] OutWordNLZp3                     E445
[ G] Peek                             E680
[ G] PeekDisplay                      E68F
[ G] PeekEnd                          E6A9
[ G] PeekInvalidAddr                  E6A6
[ G] Poke                             E6AA
[ G] PokeEnd                          E6E9
[ G] PokeInvalidAddress               E6E1
[ G] PokeInvalidByte                  E6DC
[ G] PokeNoParameters                 E6E6
[ G] PrintRegisters                   E6EA
[ G] PromptSize                       0009
[ G] PullRegisters                    E80D
[ G] PushRegisters                    E7DD
[ G] RegA                             EE5E
[ G] RegB                             EE5F
[ G] RegCC                            EE5C
[ G] RegDP                            EE5D
[ G] RegE                             EE60
[ G] RegF                             EE61
[ G] RegPC                            EE6A
[ G] RegS                             EE68
[ G] RegU                             EE66
[ G] RegX                             EE62
[ G] RegY                             EE64
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0004
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              E82C
[ G] RunEnd                           E84E
[ G] RunError                         E84B
[ G] RunExecute                       E841
[ G] RunFlag                          EE5B
[ G] RunGetAddress                    E833
[ G] RunValidate                      E83B
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       E84F
[ G] SetAddressDefault                E867
[ G] SetAddressEnd                    E86D
[ G] SetAddressError                  E862
[ G] SetBank                          E86F
[ G] SetBankDefault                   E887
[ G] SetBankEnd                       E88A
[ G] SetBankError                     E882
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       E88C
[ G] SkipSpacesEnd                    E89D
[ G] SkipSpacesLoop                   E88E
[ G] SoftInt1                         ED53
[ G] SoftInt2                         ED52
[ G] SoftInt3                         ED51
[ G] SPACE                            0020
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TempByte                         EE6C
[ G] TempQ1                           EE6F
[ G] TempQ2                           EE70
[ G] TempQ3                           EE71
[ G] TempQ4                           EE72
[ G] TempQuad                         EE6F
[ G] TempW1                           EE6D
[ G] TempW2                           EE6E
[ G] TempWord                         EE6D
[ G] UpperCase                        E14E
[ G] UpperCaseEnd                     E15A
[ G] UsrStack                         FA00
[ G] VarEnd                           EE73
[ G] Vectors                          FFF0
