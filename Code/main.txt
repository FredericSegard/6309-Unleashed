                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; ****************************************************************************************
                      (         main.asm):00029         
                      (         main.asm):00030         ; Revision
                      (         main.asm):00031         ; --------
     0000             (         main.asm):00032         RevMajor    EQU $00             ; Major revision number: 0 = Breadboard, 1+ = PCB revision
     0004             (         main.asm):00033         RevMinor    EQU $0004           ; Minor revision number
                      (         main.asm):00034         
                      (         main.asm):00035         ; Keystrokes and delimiters
                      (         main.asm):00036         ; -------------------------
     0000             (         main.asm):00037         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00038         BS          EQU $08             ; Backspace
     0009             (         main.asm):00039         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00040         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00041         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00042         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00043         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00044         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00045         
                      (         main.asm):00046         ; Misc
                      (         main.asm):00047         ; ----
     E000             (         main.asm):00048         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00049         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     FC00             (         main.asm):00050         SysStack    EQU $FC00           ; Position system stack before Constant RAM space
     FA00             (         main.asm):00051         UsrStack    EQU $FA00           ; Position user stack before system stack
     0050             (         main.asm):00052         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00053         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00054         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00055         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00056         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00057         
                      (         main.asm):00058         ; I/O addresses
                      (         main.asm):00059         ; -------------
     FF08             (         main.asm):00060         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00061         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
                      (         main.asm):00062         
                      (         main.asm):00063         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00064         
                      (         main.asm):00065             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00066             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00067                 
                      (         main.asm):00068                     ORG $0000                   ; Start of code
                      (         main.asm):00069                 
0000                  (         main.asm):00070                 Reset:
                      (         main.asm):00071                 
0000 1A50             (         main.asm):00072 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00073 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00074                 
                      (         main.asm):00075                 ; -------------------
                      (         main.asm):00076                 ; *** SHADOW COPY ***
                      (         main.asm):00077                 ; -------------------
                      (         main.asm):00078                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00079                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00080                 
0005                  (         main.asm):00081                 ShadowCopy:
                      (         main.asm):00082                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00083 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00084 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00085 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00086 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00087                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00088                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00089 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00090 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00091 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00092 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00093 (3)     44          jmp     Init
                      (         main.asm):00094                 
0024                  (         main.asm):00095                 ShadowEnd:
0024 0000000000000000 (         main.asm):00096                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00097                 
                      (         main.asm):00098                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00099                 
                      (         main.asm):00100                     PRAGMA cc
                      (         main.asm):00101                     
                      (         main.asm):00102                     ORG RomStart
                      (         main.asm):00103                 
E000                  (         main.asm):00104                 Init:
E000 B7FF08           (         main.asm):00105 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00106                 
                      (         main.asm):00107                     ; Clear the shadow copy code
E003 8E0100           (         main.asm):00108 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00109 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00110 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00111 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00112                 
                      (         main.asm):00113                     ; Configure the stacks
E011 CEFA00           (         main.asm):00114 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFEF5E           (         main.asm):00115 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00116 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFEF60         (         main.asm):00117 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00118                     
                      (         main.asm):00119                     ; Initialize peripherals
E01F BDE197           (         main.asm):00120 (7)     46          jsr     Com1Init            ; Initialize ACIA1
                      (         main.asm):00121                     
                      (         main.asm):00122                     ; Print boot message
E022 BDE161           (         main.asm):00123 (7)     53          jsr     Cls                 ; Clears the screen
E025 8EE940           (         main.asm):00124 (3)     56          ldx     #BootMsg            ; Print title
E028 BDE404           (         main.asm):00125 (7)     63          jsr     OutStr              ;
E02B 8600             (         main.asm):00126 (2)     65          lda     #RevMajor           ; Print major version
E02D BDE3CB           (         main.asm):00127 (7)     72          jsr     OutByteNLZ          ;
E030 862E             (         main.asm):00128 (2)     74          lda     #'.'                ; Print dot
E032 BDE1C4           (         main.asm):00129 (7)     81          jsr     OutChar             ;
E035 CC0004           (         main.asm):00130 (3)     84          ldd     #RevMinor           ; Print minor version
E038 BDE44C           (         main.asm):00131 (7)     91          jsr     OutWordNLZ          ;
E03B BDE404           (         main.asm):00132 (7)     98          jsr     OutStr              ;
E03E CCE000           (         main.asm):00133 (3)     101         ldd     #RomStart           ; Free RAM available
E041 BDE107           (         main.asm):00134 (7)     108         jsr     BinToBcd            ; Convert to BCD
E044 BDE38C           (         main.asm):00135 (7)     115         jsr     OutBcd
E047 BDE404           (         main.asm):00136 (7)     122         jsr     OutStr
E04A CC0D95           (         main.asm):00137 (3)     125         ldd     #JmpStart-VarEnd    ; Free shadow RAM left
E04D BDE107           (         main.asm):00138 (7)     132         jsr     BinToBcd            ; Convert to BCD
E050 BDE38C           (         main.asm):00139 (7)     139         jsr     OutBcd
E053 BDE404           (         main.asm):00140 (7)     146         jsr     OutStr
                      (         main.asm):00141                 
                      (         main.asm):00142                     ; Clear the registers
E056 104F             (         main.asm):00143 (2)     148         clrd                        ; Clear the D register (A & B)
E058 105F             (         main.asm):00144 (2)     150         clrw                        ; Clear the W register (E & F)
E05A 8E0000           (         main.asm):00145 (3)     153         ldx     #$0000              ; Clear X register
E05D 108E0000         (         main.asm):00146 (4)     157         ldy     #$0000              ; Clear Y register
                      (         main.asm):00147                 
                      (         main.asm):00148                     ; Clears some variables
E061 FDEF50           (         main.asm):00149 (5)     162         std     CurrAddress
E064 7FEF52           (         main.asm):00150 (6)     168         clr     CurrBank
E067 7FEF53           (         main.asm):00151 (6)     174         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00152                     
                      (         main.asm):00153                     PRAGMA cc
                      (         main.asm):00154                 
E06A                  (         main.asm):00155                 Main:
E06A BDE545           (         main.asm):00156 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E06D C646             (         main.asm):00157 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E06F 8EEE4F           (         main.asm):00158 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E072 BDE2FE           (         main.asm):00159 (7)     19          jsr     InStr               ; Read the a string
E075 24F3             (         main.asm):00160 (3)     22          bcc     Main                ; If no data in string then bypass parser
E077 BDE4F6           (         main.asm):00161 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00162                     ; Save registers after execution of a run command
E07A 3401             (         main.asm):00163 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E07C 7DEF53           (         main.asm):00164 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E07F 2604             (         main.asm):00165 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E081 3501             (         main.asm):00166 (4+1)   47          puls    CC                  ; Restore CC
E083 20E5             (         main.asm):00167 (3)     50          bra     Main                ; Loop back, without recording the resistors
E085                  (         main.asm):00168                 MainRunExec:
E085 3501             (         main.asm):00169 (4+1)   55          puls    CC                  ; Restore CC
E087 BDE87E           (         main.asm):00170 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E08A 7FEF53           (         main.asm):00171 (6)     68          clr     RunFlag             ; Reset run flag
E08D 20DB             (         main.asm):00172 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00173                 
                      (         main.asm):00174                 ;  ___                  _               _              
                      (         main.asm):00175                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00176                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00177                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00178                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00179                 ;
                      (         main.asm):00180                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00181                 ; ---------------------------------------------------------------
                      (         main.asm):00182                 
                      (         main.asm):00183                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E08F                  (      convert.asm):00029                 AscToBinNibble:
E08F 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E091 BDE153           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E094 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E096 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E098 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E09A 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E09C                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E09C 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E09E                  (      convert.asm):00038                 AscToBinNibbleEnd
E09E 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E0A0 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E0A2                  (      convert.asm):00050                 AscToBinByte:
E0A2 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E0A4 BDE08F           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E0A7 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A8 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A9 48               (      convert.asm):00055 (1)     15          asla                        ;
E0AA 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0AB 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0AD 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0AF BDE08F           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0B2 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0B5 5F               (      convert.asm):00061 (1)     35          clrb
E0B6 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B8                  (      convert.asm):00072                 AscToBinWord:
E0B8 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0BA BDE0A2           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BD 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0BF BDE0A2           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0C2 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0C4 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0C6 105F             (      convert.asm):00079 (2)     34          clrw
E0C8 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0CA                  (      convert.asm):00098                 BinToAscNibble:
E0CA 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0CC 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0CE 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0D0 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0D2 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0D4 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0D6                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0D6 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D8                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D8 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0DA                  (      convert.asm):00117                 BinToAscByte:
E0DA 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0DC 1038             (      convert.asm):00119 (6)     11          pshsw
E0DE 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0E0 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0E1 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0E2 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0E3 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0E4 BDE0CA           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0E7 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E9 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0EB BDE0CA           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0EE 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0F0 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0F2 1039             (      convert.asm):00131 (6)     57          pulsw
E0F4 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0F6                  (      convert.asm):00141                 BinToAscWord:
E0F6 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F8 BDE0DA           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0FB 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0FD 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0FF 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E101 BDE0DA           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E104 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E106 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E107                  (      convert.asm):00167                 BinToBcd:
E107 3401             (      convert.asm):00168 (4+1)   5           pshs    CC
E109 7FEF67           (      convert.asm):00169 (6)     11          clr     TempQ1              ; Clear Q's High MSB byte
                      (      convert.asm):00170                     ; Calculate 10,000's digit
E10C 1F06             (      convert.asm):00171 (4)     15          tfr     D,W                 ; Q = DW
E10E 104F             (      convert.asm):00172 (2)     17          clrd                        ; Clear Q's MSB
E110 118E2710         (      convert.asm):00173 (34)    51          divq    #10000              ; Divide Q by 10,000: Quotient in W, Remainder in D
E114 11F7EF68         (      convert.asm):00174 (5)     56          stf     TempQ2              ; Save 10,000's digit to variable
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E118 1F06             (      convert.asm):00176 (4)     60          tfr     D,W                 ; Transfer Remainder to LSB
E11A 104F             (      convert.asm):00177 (2)     62          clrd                        ; Clear MSB
E11C 118E03E8         (      convert.asm):00178 (34)    96          divq    #1000               ; Divide Q by 1,000: Quotient in W, Remainder in D
E120 1E06             (      convert.asm):00179 (5)     101         exg     D,W                 ; Exchange registers: Quotien is now in D, and remainder in W
E122 1048             (      convert.asm):00180 (2)     103         lsld                        ; Move 1,000's digit to high nibble
E124 1048             (      convert.asm):00181 (2)     105         lsld                        ;   Had to exchange D <-> W
E126 1048             (      convert.asm):00182 (2)     107         lsld                        ;   in order for lsld to work
E128 1048             (      convert.asm):00183 (2)     109         lsld                        ;
E12A F7EF69           (      convert.asm):00184 (4)     113         stb     TempQ3              ; Save 1,000's digit for later or'ing with the 100's
                      (      convert.asm):00185                     ; Calculate 100's digit
E12D 1F60             (      convert.asm):00186 (4)     117         tfr     W,D                 ; Transfer remainder to D
E12F 118D64           (      convert.asm):00187 (25)    142         divd    #100                ; Divide D by 100: Quotient in B, Remainder in A
E132 3402             (      convert.asm):00188 (4+1)   147         pshs    A                   ; Save for 10's and 1's 
E134 B6EF69           (      convert.asm):00189 (4)     151         lda     TempQ3              ; Load quotien from the 1000's
E137 103598           (      convert.asm):00190 (4)     155         orr     B,A                 ; Merge 1000's and 100's digits together
E13A B7EF69           (      convert.asm):00191 (4)     159         sta     TempQ3              ; Save result to variable
                      (      convert.asm):00192                     ; Calculate the 10's and 1's digit
E13D 3504             (      convert.asm):00193 (4+1)   164         puls    B                   ; Place remainder in LSB of D
E13F 4F               (      convert.asm):00194 (1)     165         clra                        ; Clear MSB of D
E140 118D0A           (      convert.asm):00195 (25)    190         divd    #10                 ; Divide D by 10: Quotient in B, Remainder in A
E143 58               (      convert.asm):00196 (1)     191         lslb                        ; Move 10's digit to high nibble
E144 58               (      convert.asm):00197 (1)     192         lslb                        ;
E145 58               (      convert.asm):00198 (1)     193         lslb                        ;
E146 58               (      convert.asm):00199 (1)     194         lslb                        ;
E147 103598           (      convert.asm):00200 (4)     198         orr     B,A                 ; Merge 10's and 1's digits together
E14A B7EF6A           (      convert.asm):00201 (4)     202         sta     TempQ4              ; Save result to Variable
E14D 10FCEF67         (      convert.asm):00202 (8)     210         ldq     TempQuad            ; Load Quad result
E151 3581             (      convert.asm):00203 (4+3)   217         puls    CC,PC
                      (      convert.asm):00204                 
                      (      convert.asm):00205                 ;  _   _                                  ____                      
                      (      convert.asm):00206                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00207                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00208                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00209                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00210                 ;         |_|     |_|                                               
                      (      convert.asm):00211                 ;
                      (      convert.asm):00212                 ; Convert character in A to uppercase
                      (      convert.asm):00213                 ; ===================================
                      (      convert.asm):00214                 ; Input:    A = anycase
                      (      convert.asm):00215                 ; Output:   A = UPPERCASE
                      (      convert.asm):00216                 
                      (      convert.asm):00217                     PRAGMA cc
                      (      convert.asm):00218                 
E153                  (      convert.asm):00219                 UpperCase:
E153 3401             (      convert.asm):00220 (4+1)   5           pshs    CC
E155 8161             (      convert.asm):00221 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E157 2D06             (      convert.asm):00222 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E159 817A             (      convert.asm):00223 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E15B 2E02             (      convert.asm):00224 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E15D 8020             (      convert.asm):00225 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E15F                  (      convert.asm):00226                 UpperCaseEnd:
E15F 3581             (      convert.asm):00227 (4+3)   24          puls    CC,PC
                      (      convert.asm):00228                     
                      (         main.asm):00184                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E161                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E161 3406             (           io.asm):00058 (4+2)   6           pshs    D
E163 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E165 BDE1C4           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E168 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E16A BDE1C4           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E16D 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E16F BDE1C4           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E172 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E174 BDE1C4           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E177 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E179 BDE1C4           (           io.asm):00069 (7)     51          jsr     OutChar
E17C 865B             (           io.asm):00070 (2)     53          lda     #'['
E17E BDE1C4           (           io.asm):00071 (7)     60          jsr     OutChar
E181 8631             (           io.asm):00072 (2)     62          lda     #'1'
E183 BDE1C4           (           io.asm):00073 (7)     69          jsr     OutChar
E186 863B             (           io.asm):00074 (2)     71          lda     #';'
E188 BDE1C4           (           io.asm):00075 (7)     78          jsr     OutChar
E18B 8631             (           io.asm):00076 (2)     80          lda     #'1'
E18D BDE1C4           (           io.asm):00077 (7)     87          jsr     OutChar
E190 8648             (           io.asm):00078 (2)     89          lda     #'H'
E192 BDE1C4           (           io.asm):00079 (7)     96          jsr     OutChar
E195 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E197                  (           io.asm):00094                 Com1Init:
E197 3402             (           io.asm):00095 (4+1)   5           pshs    A
E199 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E19B B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E19E 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E1A0 B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E1A3 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E1A5 B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A8 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1AA                  (           io.asm):00122                 InChar:
E1AA                  (           io.asm):00123                 Com1RxWait:
E1AA B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1AD 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1AF 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1B1 B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1B4 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1B5                  (           io.asm):00137                 InCharNW:
E1B5                  (           io.asm):00138                 Com1RxNoWait:
E1B5 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1B7 B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1BA 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1BC 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1BE B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1C1 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1C3                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1C3 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1C4                  (           io.asm):00168                 OutChar:
E1C4                  (           io.asm):00169                 Com1Tx:
E1C4 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1C6                  (           io.asm):00171                 Com1TxNotReady:
E1C6 B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C9 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1CB 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1CD 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1CF B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1D2 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _    ____   _                    
                      (           io.asm):00180                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00181                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00182                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00183                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00184                 ;
                      (           io.asm):00185                 ; Delete a number of characters
                      (           io.asm):00186                 ; =============================
                      (           io.asm):00187                 ; Input:    B = Number of characters to delete
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1D3                  (           io.asm):00191                 DelChar:
E1D3 3406             (           io.asm):00192 (4+2)   6           pshs    D
E1D5 8608             (           io.asm):00193 (2)     8           lda     #BS                 ; Load the backspace character
E1D7                  (           io.asm):00194                 DelCharLoop:
E1D7 BDE1C4           (           io.asm):00195 (7)     15          jsr     OutChar             ; Print the backspace character
E1DA 8620             (           io.asm):00196 (2)     17          lda     #' '                ; Load the space character
E1DC BDE1C4           (           io.asm):00197 (7)     24          jsr     OutChar             ; Print it the space character
E1DF 8608             (           io.asm):00198 (2)     26          lda     #BS                 ; Load the backspace character
E1E1 BDE1C4           (           io.asm):00199 (7)     33          jsr     OutChar             ; Print it the backspace character
E1E4 5A               (           io.asm):00200 (1)     34          decb                        ; Decrement the character count
E1E5 26F0             (           io.asm):00201 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1E7 3586             (           io.asm):00202 (4+4)   45          puls    D,PC
                      (           io.asm):00203                 
                      (           io.asm):00204                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00205                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00206                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00207                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00208                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00209                 ;                                                    |___/
                      (           io.asm):00210                 ;
                      (           io.asm):00211                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00212                 ; ====================================================
                      (           io.asm):00213                 ; Input:    X = String pointer
                      (           io.asm):00214                 ; Output:   A = Binary byte
                      (           io.asm):00215                 ;           X = Points to next character in string
                      (           io.asm):00216                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00217                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00218                 
E1E9                  (           io.asm):00219                 GetStrByte:
E1E9 3404             (           io.asm):00220 (4+1)   50          pshs    B
E1EB 1038             (           io.asm):00221 (6)     56          pshsw
E1ED 3410             (           io.asm):00222 (4+2)   62          pshs    X                   ; Save position
E1EF 5F               (           io.asm):00223 (1)     63          clrb                        ; Clear byte counter
E1F0 115F             (           io.asm):00224 (2)     65          clrf                        ; Clear byte storage
E1F2                  (           io.asm):00225                 GetStrByteCount:
E1F2 A680             (           io.asm):00226 (4+1)   70          lda     ,X+                 ; Load a character
E1F4 2707             (           io.asm):00227 (3)     73          beq     GetStrByteParse     ; If it's the end of the string, parse byte
E1F6 8120             (           io.asm):00228 (2)     75          cmpa    #' '                ; Is it a space delimiter
E1F8 2703             (           io.asm):00229 (3)     78          beq     GetStrByteParse     ; Yes, then parse byte
E1FA 5C               (           io.asm):00230 (1)     79          incb                        ; Increment byte counter
E1FB 20F5             (           io.asm):00231 (3)     82          bra     GetStrByteCount     ; Loop till delimiter found
E1FD                  (           io.asm):00232                 GetStrByteParse:
E1FD 3510             (           io.asm):00233 (4+2)   88          puls    X                   ; Restore position
E1FF C100             (           io.asm):00234 (2)     90          cmpb    #0                  ; Is the counter = 0
E201 2732             (           io.asm):00235 (3)     93          beq     GetStrByteError     ; Yes, then set error flag
E203 C101             (           io.asm):00236 (2)     95          cmpb    #1                  ; Is it 1 character long
E205 2607             (           io.asm):00237 (3)     98          bne     GetStrByteParse2    ; No, then check if it's 2
E207 BDE258           (           io.asm):00238 (7)     105         jsr     GetStrNibble        ; Get a nibble
E20A 2429             (           io.asm):00239 (3)     108         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E20C 2023             (           io.asm):00240 (3)     111         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E20E                  (           io.asm):00241                 GetStrByteParse2:
E20E C102             (           io.asm):00242 (2)     113         cmpb    #2                  ; Is it 2 character long
E210 2615             (           io.asm):00243 (3)     116         bne     GetStrByteParseMore ; No, then check if it's 3
E212 BDE258           (           io.asm):00244 (7)     123         jsr     GetStrNibble        ; Get a nibble
E215 241E             (           io.asm):00245 (3)     126         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E217 48               (           io.asm):00246 (1)     127         asla                        ; Push nibble to MSB
E218 48               (           io.asm):00247 (1)     128         asla                        ;
E219 48               (           io.asm):00248 (1)     129         asla                        ;
E21A 48               (           io.asm):00249 (1)     130         asla                        ;
E21B 1F89             (           io.asm):00250 (4)     134         tfr     A,B                 ; Store byte in LSB of W
E21D BDE258           (           io.asm):00251 (7)     141         jsr     GetStrNibble        ; Get a nibble
E220 2413             (           io.asm):00252 (3)     144         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E222 103598           (           io.asm):00253 (4)     148         orr     B,A                 ; Merge both nibbles as a byte
E225 200A             (           io.asm):00254 (3)     151         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E227                  (           io.asm):00255                 GetStrByteParseMore:
E227 B6EF4F           (           io.asm):00256 (4)     155         lda     CmdErrorPtr         ; Load error pointer
E22A 8B03             (           io.asm):00257 (2)     157         adda    #3                  ; Add 3 to it
E22C B7EF4F           (           io.asm):00258 (4)     161         sta     CmdErrorPtr         ; Store it back
E22F 2004             (           io.asm):00259 (3)     164         bra     GetStrByteError     ; Set error flag
E231                  (           io.asm):00260                 GetStrByteGood:
E231 1A01             (           io.asm):00261 (2)     166         orcc    #%00000001          ; Set Carry: Indicates the byte is ok
E233 2002             (           io.asm):00262 (3)     169         bra     GetStrByteEnd
E235                  (           io.asm):00263                 GetStrByteError:
E235 1CFE             (           io.asm):00264 (2)     171         andcc   #%11111110          ; Clear Carry: Indicates there an error
E237                  (           io.asm):00265                 GetStrByteEnd:
E237 1039             (           io.asm):00266 (6)     177         pulsw
E239 3584             (           io.asm):00267 (4+3)   184         puls    B,PC
                      (           io.asm):00268                 
E23B                  (           io.asm):00269                 GetStrByteFixed:
E23B 3404             (           io.asm):00270 (4+1)   189         pshs    B
E23D BDE258           (           io.asm):00271 (7)     196         jsr     GetStrNibble        ; Get a nibble
E240 2412             (           io.asm):00272 (3)     199         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E242 48               (           io.asm):00273 (1)     200         asla                        ; Push nibble to MSB
E243 48               (           io.asm):00274 (1)     201         asla                        ;
E244 48               (           io.asm):00275 (1)     202         asla                        ;
E245 48               (           io.asm):00276 (1)     203         asla                        ;
E246 1F89             (           io.asm):00277 (4)     207         tfr     A,B                 ; Store byte in B
E248 BDE258           (           io.asm):00278 (7)     214         jsr     GetStrNibble        ; Get a nibble
E24B 2407             (           io.asm):00279 (3)     217         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E24D 103598           (           io.asm):00280 (4)     221         orr     B,A                 ; Merge both nibbles as a byte
E250 1A01             (           io.asm):00281 (2)     223         orcc    #%00000001          ; Set Carry: Indicates the nibble is ok
E252 2002             (           io.asm):00282 (3)     226         bra     GetStrByteFixedEnd  ;
E254                  (           io.asm):00283                 GetStrByteFixedErr:
E254 1CFE             (           io.asm):00284 (2)     228         andcc   #%11111110          ; Clear Carry: Indicates there an error
E256                  (           io.asm):00285                 GetStrByteFixedEnd:
E256 3584             (           io.asm):00286 (4+3)   235         puls    B,PC
                      (           io.asm):00287                 
                      (           io.asm):00288                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00289                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00290                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00291                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00292                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00293                 ;
                      (           io.asm):00294                 ;
                      (           io.asm):00295                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00296                 ; ======================================================
                      (           io.asm):00297                 ; Input:    X = String pointer
                      (           io.asm):00298                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00299                 ;           X = Points to next character in string
                      (           io.asm):00300                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00301                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00302                 
E258                  (           io.asm):00303                 GetStrNibble:
E258 A684             (           io.asm):00304 (4+0)   239         lda     ,X                  ; Get a character from string
E25A 2713             (           io.asm):00305 (3)     242         beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E25C BDE153           (           io.asm):00306 (7)     249         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00307                     ; Is it a valid hex character?
E25F 8130             (           io.asm):00308 (2)     251         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E261 2D0C             (           io.asm):00309 (3)     254         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E263 8146             (           io.asm):00310 (2)     256         cmpa    #'F'                ; Filter anything above the ASCII F
E265 2E08             (           io.asm):00311 (3)     259         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E267 8139             (           io.asm):00312 (2)     261         cmpa    #'9'                ; Filter anything above ASCII '9'
E269 2F08             (           io.asm):00313 (3)     264         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E26B 8141             (           io.asm):00314 (2)     266         cmpa    #'A'                ; Filter anything below ASCII 'A'
E26D 2C04             (           io.asm):00315 (3)     269         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E26F                  (           io.asm):00316                 GetStrNibbleError:
E26F 1CFE             (           io.asm):00317 (2)     271         andcc   #$FE                ; Clear carry to indicate error
E271 2005             (           io.asm):00318 (3)     274         bra     GetStrNibbleEnd
E273                  (           io.asm):00319                 GetStrNibbleGood:
E273 BDE08F           (           io.asm):00320 (7)     281         jsr     AscToBinNibble
E276 1A01             (           io.asm):00321 (2)     283         orcc    #$01                ; Set carry to indicate valid number in A
E278                  (           io.asm):00322                 GetStrNibbleEnd:
E278 3001             (           io.asm):00323 (4+1)   288         leax    1,X                 ; Increment string pointer
E27A 7CEF4F           (           io.asm):00324 (6)     294         inc     CmdErrorPtr         ; Advance error pointer
E27D 39               (           io.asm):00325 (4)     298         rts
                      (           io.asm):00326                     
                      (           io.asm):00327                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00328                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00329                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00330                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00331                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00332                 ;
                      (           io.asm):00333                 ;
                      (           io.asm):00334                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00335                 ; ======================================================
                      (           io.asm):00336                 ; Input:    X = String pointer
                      (           io.asm):00337                 ; Output:   D = Binary word
                      (           io.asm):00338                 ;           X = Points to next character in string
                      (           io.asm):00339                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00340                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00341                 
E27E                  (           io.asm):00342                 GetStrWord:
E27E 1038             (           io.asm):00343 (6)     304         pshsw
E280 3410             (           io.asm):00344 (4+2)   310         pshs    X                   ; Save position
E282 5F               (           io.asm):00345 (1)     311         clrb                        ; Clear word counter
E283 105F             (           io.asm):00346 (2)     313         clrw                        ; Clear word storage
E285                  (           io.asm):00347                 GetStrWordCount:
E285 A680             (           io.asm):00348 (4+1)   318         lda     ,X+                 ; Load a character
E287 2707             (           io.asm):00349 (3)     321         beq     GetStrWordParse     ; If it's the end of the string, parse word
E289 8120             (           io.asm):00350 (2)     323         cmpa    #' '                ; Is it a space delimiter
E28B 2703             (           io.asm):00351 (3)     326         beq     GetStrWordParse     ; Yes, then parse word
E28D 5C               (           io.asm):00352 (1)     327         incb                        ; Increment byte counter
E28E 20F5             (           io.asm):00353 (3)     330         bra     GetStrWordCount     ; Loop till delimiter found
E290                  (           io.asm):00354                 GetStrWordParse:
E290 3510             (           io.asm):00355 (4+2)   336         puls    X                   ; Restore position
E292 C100             (           io.asm):00356 (2)     338         cmpb    #0                  ; Is the counter = 0
E294 2752             (           io.asm):00357 (3)     341         beq     GetStrWordError     ; Yes, then set error flag
E296 C101             (           io.asm):00358 (2)     343         cmpb    #1                  ; Is it 1 character long
E298 2609             (           io.asm):00359 (3)     346         bne     GetStrWordParse2    ; No, then check if it's 2
E29A BDE258           (           io.asm):00360 (7)     353         jsr     GetStrNibble        ; Get a nibble
E29D 2449             (           io.asm):00361 (3)     356         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E29F 1F8F             (           io.asm):00362 (4)     360         tfr     A,F                 ; Store nibble in LSB of W
E2A1 203F             (           io.asm):00363 (3)     363         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2A3                  (           io.asm):00364                 GetStrWordParse2:
E2A3 C102             (           io.asm):00365 (2)     365         cmpb    #2                  ; Is it 2 character long
E2A5 2609             (           io.asm):00366 (3)     368         bne     GetStrWordParse3    ; No, then check if it's 3
E2A7 BDE23B           (           io.asm):00367 (7)     375         jsr     GetStrByteFixed     ; Get a byte
E2AA 243C             (           io.asm):00368 (3)     378         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2AC 1F8F             (           io.asm):00369 (4)     382         tfr     A,F                 ; Store byte in LSB of W
E2AE 2032             (           io.asm):00370 (3)     385         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2B0                  (           io.asm):00371                 GetStrWordParse3:
E2B0 C103             (           io.asm):00372 (2)     387         cmpb    #3                  ; Is it 3 character long
E2B2 2610             (           io.asm):00373 (3)     390         bne     GetStrWordParse4    ; No, then check if it's 4
E2B4 BDE258           (           io.asm):00374 (7)     397         jsr     GetStrNibble        ; Get a nibble
E2B7 242F             (           io.asm):00375 (3)     400         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2B9 1F8E             (           io.asm):00376 (4)     404         tfr     A,E                 ; Store nibble in MSB of W
E2BB BDE23B           (           io.asm):00377 (7)     411         jsr     GetStrByteFixed     ; Get a byte
E2BE 2428             (           io.asm):00378 (3)     414         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C0 1F8F             (           io.asm):00379 (4)     418         tfr     A,F                 ; Store byte in LSB of W
E2C2 201E             (           io.asm):00380 (3)     421         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2C4                  (           io.asm):00381                 GetStrWordParse4:
E2C4 C104             (           io.asm):00382 (2)     423         cmpb    #4                  ; Is it 4 character long
E2C6 2610             (           io.asm):00383 (3)     426         bne     GetStrWordParseMore ; No, then check if it's longer
E2C8 BDE23B           (           io.asm):00384 (7)     433         jsr     GetStrByteFixed     ; Get a byte
E2CB 241B             (           io.asm):00385 (3)     436         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2CD 1F8E             (           io.asm):00386 (4)     440         tfr     A,E                 ; Store byte in MSB of W
E2CF BDE23B           (           io.asm):00387 (7)     447         jsr     GetStrByteFixed     ; Get a byte
E2D2 2414             (           io.asm):00388 (3)     450         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2D4 1F8F             (           io.asm):00389 (4)     454         tfr     A,F                 ; Store byte in LSB of W
E2D6 200A             (           io.asm):00390 (3)     457         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2D8                  (           io.asm):00391                 GetStrWordParseMore:
E2D8 B6EF4F           (           io.asm):00392 (4)     461         lda     CmdErrorPtr         ; Load error pointer
E2DB 8B05             (           io.asm):00393 (2)     463         adda    #5                  ; Add 5 to it
E2DD B7EF4F           (           io.asm):00394 (4)     467         sta     CmdErrorPtr         ; Store it back
E2E0 2006             (           io.asm):00395 (3)     470         bra     GetStrWordError     ; Set error flag
E2E2                  (           io.asm):00396                 GetStrWordGood:
E2E2 1F60             (           io.asm):00397 (4)     474         tfr     W,D
E2E4 1A01             (           io.asm):00398 (2)     476         orcc    #%00000001          ; Set Carry: Indicates the word is ok
E2E6 2002             (           io.asm):00399 (3)     479         bra     GetStrWordEnd
E2E8                  (           io.asm):00400                 GetStrWordError:
E2E8 1CFE             (           io.asm):00401 (2)     481         andcc   #%11111110          ; Clear Carry: Indicates there an error
E2EA                  (           io.asm):00402                 GetStrWordEnd:
E2EA 1039             (           io.asm):00403 (6)     487         pulsw
E2EC 39               (           io.asm):00404 (4)     491         rts
                      (           io.asm):00405                 
                      (           io.asm):00406                 ;  ___           ____            _          
                      (           io.asm):00407                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00408                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00409                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00410                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00411                 ;                        |___/              
                      (           io.asm):00412                 ;
                      (           io.asm):00413                 ; Read a hexadecimal byte
                      (           io.asm):00414                 ; =======================
                      (           io.asm):00415                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00416                 
                      (           io.asm):00417                     PRAGMA cc
                      (           io.asm):00418                 
E2ED                  (           io.asm):00419                 InByte:
E2ED 3405             (           io.asm):00420 (4+2)   6           pshs    B,CC
E2EF BDE1AA           (           io.asm):00421 (7)     13          jsr     InChar              ; Read first character in A
E2F2 1F89             (           io.asm):00422 (4)     17          tfr     A,B                 ; Save is in B temporarily
E2F4 BDE1AA           (           io.asm):00423 (7)     24          jsr     InChar              ; Read second character in A
E2F7 1E89             (           io.asm):00424 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E2F9 BDE0A2           (           io.asm):00425 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E2FC 3585             (           io.asm):00426 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00427                 
                      (           io.asm):00428                 ;  ___           ____    _
                      (           io.asm):00429                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00430                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00431                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00432                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00433                 ;
                      (           io.asm):00434                 ;
                      (           io.asm):00435                 ; Read string from from stdin
                      (           io.asm):00436                 ; ===========================
                      (           io.asm):00437                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00438                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00439                 ;           Y = contains the original string pointer start
                      (           io.asm):00440                 ; Input:    B = max number of characters to read
                      (           io.asm):00441                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00442                 ; Output:   B = Actual number of characters read
                      (           io.asm):00443                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00444                 ;               Carry bit clear = no string recorded
                      (           io.asm):00445                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00446                 
                      (           io.asm):00447                     PRAGMA cc
                      (           io.asm):00448                 
E2FE                  (           io.asm):00449                 InStr:
E2FE 3432             (           io.asm):00450 (4+5)   9           pshs    A,X,Y
E300 1038             (           io.asm):00451 (6)     15          pshsw
E302 1F12             (           io.asm):00452 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E304 1F9F             (           io.asm):00453 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E306 114F             (           io.asm):00454 (2)     25          clre                        ; Clear the current byte count
E308                  (           io.asm):00455                 InStrReadChar:
E308 BDE1AA           (           io.asm):00456 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00457                     ;jsr        UpperCase   ; *** TEMPORARY
E30B 810D             (           io.asm):00458 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E30D 2748             (           io.asm):00459 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E30F 8108             (           io.asm):00460 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E311 270B             (           io.asm):00461 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E313 811B             (           io.asm):00462 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E315 271E             (           io.asm):00463 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E317 2BEF             (           io.asm):00464 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E319 10379E           (           io.asm):00465 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E31C 2630             (           io.asm):00466 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E31E                  (           io.asm):00467                 InStrBackspace:
E31E 103712           (           io.asm):00468 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E321 27E5             (           io.asm):00469 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E323 301F             (           io.asm):00470 (4+1)   69          leax    -1,X                ; Decrement string index
E325 114A             (           io.asm):00471 (2)     71          dece                        ; Decrement the current byte counter
E327 7AEF4F           (           io.asm):00472 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E32A 3404             (           io.asm):00473 (4+1)   82          pshs    B                   ; Saves B
E32C C601             (           io.asm):00474 (2)     84          ldb     #1                  ; number of characters to delete
E32E BDE1D3           (           io.asm):00475 (7)     91          jsr     DelChar             ; Delete a character
E331 3504             (           io.asm):00476 (4+1)   96          puls    B                   ; Restores B
E333 20D3             (           io.asm):00477 (3)     99          bra     InStrReadChar       ; Go read next character
E335                  (           io.asm):00478                 InStrEscape:
E335 118100           (           io.asm):00479 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E338 27CE             (           io.asm):00480 (3)     105         beq     InStrReadChar       ; No, then read a character
E33A 3404             (           io.asm):00481 (4+1)   110         pshs    B                   ; Else, erase everyting
E33C 1FE9             (           io.asm):00482 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E33E BDE1D3           (           io.asm):00483 (7)     121         jsr     DelChar             ; Delete the whole line
E341 3504             (           io.asm):00484 (4+1)   126         puls    B
E343 1F21             (           io.asm):00485 (4)     130         tfr     Y,X                 ; Restores string pointer position
E345 114F             (           io.asm):00486 (2)     132         clre                        ; Clear the byte count
E347 9609             (           io.asm):00487 (3)     135         lda     PromptSize
E349 B7EF4F           (           io.asm):00488 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E34C 20BA             (           io.asm):00489 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E34E                  (           io.asm):00490                 InStrStoreChar:
E34E BDE1C4           (           io.asm):00491 (7)     149         jsr     OutChar             ; Print character on terminal
E351 A780             (           io.asm):00492 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E353 114C             (           io.asm):00493 (2)     156         ince                        ; Increment byte count
E355 20B1             (           io.asm):00494 (3)     159         bra     InStrReadChar       ; No? Read another character
E357                  (           io.asm):00495                 InStrPrintCR:
E357 BDE3DE           (           io.asm):00496 (7)     166         jsr     OutCRLF             ; Print carriage return
E35A 6F84             (           io.asm):00497 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E35C 1FE9             (           io.asm):00498 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E35E 118100           (           io.asm):00499 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E361 2704             (           io.asm):00500 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E363 1A01             (           io.asm):00501 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E365 2002             (           io.asm):00502 (3)     187         bra     InStrEnd
E367                  (           io.asm):00503                 InStrClearCarry:
E367 1CFE             (           io.asm):00504 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E369                  (           io.asm):00505                 InStrEnd:
E369 1039             (           io.asm):00506 (6)     195         pulsw
E36B 35B2             (           io.asm):00507 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00508                 
                      (           io.asm):00509                 ;  ___          __        __                     _ 
                      (           io.asm):00510                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00511                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00512                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00513                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00514                 ;
                      (           io.asm):00515                 ;
                      (           io.asm):00516                 ; Read a hexadecimal word
                      (           io.asm):00517                 ; =======================
                      (           io.asm):00518                 ; Output:   D = Binary number converted from four ASCII characters read from stdin
                      (           io.asm):00519                 ; 
                      (           io.asm):00520                     PRAGMA cc
                      (           io.asm):00521                 
E36D                  (           io.asm):00522                 InWord:
E36D 3401             (           io.asm):00523 (4+1)   5           pshs    CC
E36F 1038             (           io.asm):00524 (6)     11          pshsw
E371 BDE1AA           (           io.asm):00525 (7)     18          jsr     InChar
E374 1F8F             (           io.asm):00526 (4)     22          tfr     A,F
E376 BDE1AA           (           io.asm):00527 (7)     29          jsr     InChar
E379 1F89             (           io.asm):00528 (4)     33          tfr     A,B
E37B BDE1AA           (           io.asm):00529 (7)     40          jsr     InChar
E37E 1F8E             (           io.asm):00530 (4)     44          tfr     A,E
E380 BDE1AA           (           io.asm):00531 (7)     51          jsr     InChar
E383 1E8F             (           io.asm):00532 (5)     56          exg     A,F
E385 BDE0B8           (           io.asm):00533 (7)     63          jsr     AscToBinWord
E388 1039             (           io.asm):00534 (6)     69          pulsw
E38A 3581             (           io.asm):00535 (4+3)   76          puls    CC,PC
                      (           io.asm):00536                 
                      (           io.asm):00537                 ;   ___            _     ____               _ 
                      (           io.asm):00538                 ;  / _ \   _   _  | |_  | __ )    ___    __| |
                      (           io.asm):00539                 ; | | | | | | | | | __| |  _ \   / __|  / _` |
                      (           io.asm):00540                 ; | |_| | | |_| | | |_  | |_) | | (__  | (_| |
                      (           io.asm):00541                 ;  \___/   \__,_|  \__| |____/   \___|  \__,_|
                      (           io.asm):00542                 ;
                      (           io.asm):00543                 ;
                      (           io.asm):00544                 ; Output BCD data, removing leading zeros
                      (           io.asm):00545                 ; =======================================
                      (           io.asm):00546                 ; Input:    Q = Data to print (ABEF)
                      (           io.asm):00547                 
E38C                  (           io.asm):00548                 OutBcd:
E38C 5F               (           io.asm):00549 (1)     77          clrb                        ; B = 0 indicates to skip leading LSB 0
E38D BDE3A2           (           io.asm):00550 (7)     84          jsr     OutBcdSub           ; Process A
E390 1F98             (           io.asm):00551 (4)     88          tfr     B,A
E392 BDE3A2           (           io.asm):00552 (7)     95          jsr     OutBcdSub           ; Process B
E395 1FE8             (           io.asm):00553 (4)     99          tfr     E,A
E397 BDE3A2           (           io.asm):00554 (7)     106         jsr     OutBcdSub           ; Process E
E39A 1FF8             (           io.asm):00555 (4)     110         tfr     F,A
E39C C601             (           io.asm):00556 (2)     112         ldb     #$01                ; B = 1 indicates to keep the last 0 in LSB
E39E BDE3A2           (           io.asm):00557 (7)     119         jsr     OutBcdSub           ; Process F
E3A1 39               (           io.asm):00558 (4)     123         rts
                      (           io.asm):00559                 
E3A2                  (           io.asm):00560                 OutBcdSub:
E3A2 3402             (           io.asm):00561 (4+1)   128         pshs    A                   ; Save A for LSB
E3A4 44               (           io.asm):00562 (1)     129         lsra                        ; Shift MSB to LSB
E3A5 44               (           io.asm):00563 (1)     130         lsra                        ;
E3A6 44               (           io.asm):00564 (1)     131         lsra                        ;
E3A7 44               (           io.asm):00565 (1)     132         lsra                        ;
E3A8 4D               (           io.asm):00566 (1)     133         tsta                        ; Check A
E3A9 2703             (           io.asm):00567 (3)     136         beq     OutBcdSubLSB        ; If it's 0, skip printing, and check LSB
E3AB BDE3EC           (           io.asm):00568 (7)     143         jsr     OutNibble
E3AE                  (           io.asm):00569                 OutBcdSubLSB:
E3AE 3502             (           io.asm):00570 (4+1)   148         puls    A
E3B0 840F             (           io.asm):00571 (2)     150         anda    #$0F
E3B2 5D               (           io.asm):00572 (1)     151         tstb                        ; Check if LSB 0 is to be printed
E3B3 2603             (           io.asm):00573 (3)     154         bne     OutBcdSubLSB2
E3B5 4D               (           io.asm):00574 (1)     155         tsta
E3B6 2703             (           io.asm):00575 (3)     158         beq     OutBcdSubEnd
E3B8                  (           io.asm):00576                 OutBcdSubLSB2:
E3B8 BDE3EC           (           io.asm):00577 (7)     165         jsr     OutNibble
E3BB                  (           io.asm):00578                 OutBcdSubEnd:
E3BB 39               (           io.asm):00579 (4)     169         rts
                      (           io.asm):00580                 
                      (           io.asm):00581                 ;   ___            _     ____            _          
                      (           io.asm):00582                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00583                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00584                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00585                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00586                 ;                                |___/
                      (           io.asm):00587                 ;
                      (           io.asm):00588                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00589                 ; ==================================
                      (           io.asm):00590                 ; Input:    A = Byte to output
                      (           io.asm):00591                 
                      (           io.asm):00592                     PRAGMA cc
                      (           io.asm):00593                 
E3BC                  (           io.asm):00594                 OutByte:
E3BC                  (           io.asm):00595                 OutByteLZ:
E3BC 3407             (           io.asm):00596 (4+3)   7           pshs    A,B,CC
E3BE BDE0DA           (           io.asm):00597 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3C1 BDE1C4           (           io.asm):00598 (7)     21          jsr     OutChar             ; Print MSB in A
E3C4 1F98             (           io.asm):00599 (4)     25          tfr     B,A                 ; Transfer LSB in A
E3C6 BDE1C4           (           io.asm):00600 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E3C9 3587             (           io.asm):00601 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00602                 
                      (           io.asm):00603                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00604                 ; ==========================================================
                      (           io.asm):00605                 ; Input:    A = Byte to output
                      (           io.asm):00606                 
                      (           io.asm):00607                     PRAGMA cc
                      (           io.asm):00608                 
E3CB                  (           io.asm):00609                 OutByteNLZ:
E3CB 3407             (           io.asm):00610 (4+3)   7           pshs    A,B,CC
E3CD BDE0DA           (           io.asm):00611 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3D0 8130             (           io.asm):00612 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E3D2 2703             (           io.asm):00613 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E3D4 BDE1C4           (           io.asm):00614 (7)     26          jsr     OutChar             ; Print MSB in A
E3D7                  (           io.asm):00615                 OutByteDigit1NLZ:   
E3D7 1F98             (           io.asm):00616 (4)     30          tfr     B,A                 ; Transfer LSB in A
E3D9 BDE1C4           (           io.asm):00617 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E3DC 3587             (           io.asm):00618 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00619                 
                      (           io.asm):00620                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00621                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00622                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00623                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00624                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00625                 ;
                      (           io.asm):00626                 ; Print a carriage return and linefeed
                      (           io.asm):00627                 ; ====================================
                      (           io.asm):00628                 
                      (           io.asm):00629                     PRAGMA cc
                      (           io.asm):00630                 
E3DE                  (           io.asm):00631                 OutCRLF:
E3DE 3403             (           io.asm):00632 (4+2)   6           pshs    A,CC
E3E0 860D             (           io.asm):00633 (2)     8           lda     #CR
E3E2 BDE1C4           (           io.asm):00634 (7)     15          jsr     OutChar
E3E5 860A             (           io.asm):00635 (2)     17          lda     #LF
E3E7 BDE1C4           (           io.asm):00636 (7)     24          jsr     OutChar
E3EA 3583             (           io.asm):00637 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00638                 
                      (           io.asm):00639                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00640                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00641                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00642                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00643                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00644                 ;
                      (           io.asm):00645                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00646                 ; ====================================
                      (           io.asm):00647                 ; Input:    A = Nibble to output
                      (           io.asm):00648                 
                      (           io.asm):00649                     PRAGMA cc
                      (           io.asm):00650                 
E3EC                  (           io.asm):00651                 OutNibble:
E3EC                  (           io.asm):00652                 OutNibbleLSB:
E3EC 3403             (           io.asm):00653 (4+2)   6           pshs    A,CC
E3EE BDE0CA           (           io.asm):00654 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E3F1 BDE1C4           (           io.asm):00655 (7)     20          jsr     OutChar
E3F4 3583             (           io.asm):00656 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00657                 
                      (           io.asm):00658                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00659                 ; ====================================
                      (           io.asm):00660                 ; Input:    A = Nibble to output
                      (           io.asm):00661                 
                      (           io.asm):00662                     PRAGMA cc
                      (           io.asm):00663                 
E3F6                  (           io.asm):00664                 OutNibbleMSB:
E3F6 3403             (           io.asm):00665 (4+2)   6           pshs    A,CC
E3F8 44               (           io.asm):00666 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E3F9 44               (           io.asm):00667 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E3FA 44               (           io.asm):00668 (1)     9           lsra                        ;
E3FB 44               (           io.asm):00669 (1)     10          lsra                        ;
E3FC BDE0CA           (           io.asm):00670 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E3FF BDE1C4           (           io.asm):00671 (7)     24          jsr     OutChar
E402 3583             (           io.asm):00672 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00673                 
                      (           io.asm):00674                 ;   ___            _     ____    _
                      (           io.asm):00675                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00676                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00677                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00678                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00679                 ;
                      (           io.asm):00680                 ; Print a string to the screen
                      (           io.asm):00681                 ; ============================
                      (           io.asm):00682                 ; Input:    X = Address of string to print
                      (           io.asm):00683                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00684                 
                      (           io.asm):00685                     PRAGMA cc
                      (           io.asm):00686                 
E404                  (           io.asm):00687                 OutStr:
E404                  (           io.asm):00688                 OutStrLZ:
E404 3403             (           io.asm):00689 (4+2)   6           pshs    A,CC
E406                  (           io.asm):00690                 OutStrLoop:
E406 A680             (           io.asm):00691 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E408 2709             (           io.asm):00692 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E40A 81FF             (           io.asm):00693 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E40C 2705             (           io.asm):00694 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E40E 17FDB3           (           io.asm):00695 (7)     26          lbsr    OutChar             ; Print character
E411 20F3             (           io.asm):00696 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E413                  (           io.asm):00697                 OutStrEnd:
E413 3583             (           io.asm):00698 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00699                 
                      (           io.asm):00700                 ; Print a string to the screen without leading zeros
                      (           io.asm):00701                 ; ==================================================
                      (           io.asm):00702                 ; Input:    X = Address of string to print
                      (           io.asm):00703                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00704                 
                      (           io.asm):00705                     PRAGMA cc
                      (           io.asm):00706                 
E415                  (           io.asm):00707                 OutStrNLZ:
E415 3407             (           io.asm):00708 (4+3)   7           pshs    A,B,CC
E417 5F               (           io.asm):00709 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E418                  (           io.asm):00710                 OutStrNLZLoop:
E418 A680             (           io.asm):00711 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E41A 81FF             (           io.asm):00712 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E41C 270F             (           io.asm):00713 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E41E 8130             (           io.asm):00714 (2)     20          cmpa    #'0'                ; Is it a zero?
E420 2604             (           io.asm):00715 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E422 8100             (           io.asm):00716 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E424 27F2             (           io.asm):00717 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E426                  (           io.asm):00718                 OutStrNLZPrintChar:
E426 1F89             (           io.asm):00719 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E428 BDE1C4           (           io.asm):00720 (7)     39          jsr     OutChar             ; Print character
E42B 20EB             (           io.asm):00721 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E42D                  (           io.asm):00722                 OutStrNLZEnd:
E42D 3587             (           io.asm):00723 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00724                 
                      (           io.asm):00725                 ;   ___            _    __        __                     _ 
                      (           io.asm):00726                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00727                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00728                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00729                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00730                 ;
                      (           io.asm):00731                 ; Print a word as 4 ASCII characters
                      (           io.asm):00732                 ; ==================================
                      (           io.asm):00733                 ; Input:    D = Word to output
                      (           io.asm):00734                 
                      (           io.asm):00735                     PRAGMA cc
                      (           io.asm):00736                 
E42F                  (           io.asm):00737                 OutWord:
E42F 3407             (           io.asm):00738 (4+3)   7           pshs    A,B,CC
E431 1038             (           io.asm):00739 (6)     13          pshsw
E433 BDE0F6           (           io.asm):00740 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E436 BDE1C4           (           io.asm):00741 (7)     27          jsr     OutChar             ; Print 4th digit
E439 1F98             (           io.asm):00742 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E43B BDE1C4           (           io.asm):00743 (7)     38          jsr     OutChar             ; Print 3rd digit
E43E 1FE8             (           io.asm):00744 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E440 BDE1C4           (           io.asm):00745 (7)     49          jsr     OutChar             ; Print 2nd digit
E443 1FF8             (           io.asm):00746 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E445 BDE1C4           (           io.asm):00747 (7)     60          jsr     OutChar             ; Print 1st digit
E448 1039             (           io.asm):00748 (6)     66          pulsw
E44A 3587             (           io.asm):00749 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00750                 
                      (           io.asm):00751                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00752                 ; =========================================================
                      (           io.asm):00753                 ; Input:    D = Byte to output
                      (           io.asm):00754                 
                      (           io.asm):00755                     PRAGMA cc
                      (           io.asm):00756                 
E44C                  (           io.asm):00757                 OutWordNLZ:
E44C 3416             (           io.asm):00758 (4+4)   8           pshs    A,B,X
E44E 1038             (           io.asm):00759 (6)     14          pshsw
E450 8E0000           (           io.asm):00760 (3)     17          ldx     #0                  ; Clear leading zero flag
E453 BDE0F6           (           io.asm):00761 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E456 8130             (           io.asm):00762 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E458 2705             (           io.asm):00763 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E45A 3001             (           io.asm):00764 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E45C BDE1C4           (           io.asm):00765 (7)     41          jsr     OutChar             ; Print 1th digit
E45F                  (           io.asm):00766                 OutWordNLZ2:
E45F 1F98             (           io.asm):00767 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E461 8130             (           io.asm):00768 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E463 2605             (           io.asm):00769 (3)     50          bne     OutWordNLZp2        ; It's not zero
E465 8C0000           (           io.asm):00770 (3)     53          cmpx    #0                  ; Check leading zero flag
E468 2705             (           io.asm):00771 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E46A                  (           io.asm):00772                 OutWordNLZp2:
E46A 3001             (           io.asm):00773 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E46C BDE1C4           (           io.asm):00774 (7)     68          jsr     OutChar             ; Print 2rd digit
E46F                  (           io.asm):00775                 OutWordNLZ3:
E46F 1FE8             (           io.asm):00776 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E471 8130             (           io.asm):00777 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E473 2605             (           io.asm):00778 (3)     77          bne     OutWordNLZp3        ; It's not zero
E475 8C0000           (           io.asm):00779 (3)     80          cmpx    #0                  ; Check leading zero flag
E478 2705             (           io.asm):00780 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E47A                  (           io.asm):00781                 OutWordNLZp3:
E47A 3001             (           io.asm):00782 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E47C BDE1C4           (           io.asm):00783 (7)     95          jsr     OutChar             ; Print 3nd digit
E47F                  (           io.asm):00784                 OutWordNLZ4:
E47F 1FF8             (           io.asm):00785 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E481 BDE1C4           (           io.asm):00786 (7)     106         jsr     OutChar             ; Print 4st digit
E484 1039             (           io.asm):00787 (6)     112         pulsw
E486 3596             (           io.asm):00788 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00185                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors           .           .           
                      (      monitor.asm):00005                 ; *   ErrPointer                                Print the error location
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * Dump                X           .           Dumps the contents of memory
                      (      monitor.asm):00016                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00017                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00018                 ; * Peek                X           .           Read a byte from a memory location
                      (      monitor.asm):00019                 ; * Poke                X           .           Write a byte at a memory location
                      (      monitor.asm):00020                 ; * PrintRegisters      .           .           Print the contents of the registers
                      (      monitor.asm):00021                 ; * PushRegisters       .           .           Push the contents of the registers to RAM
                      (      monitor.asm):00022                 ; * PullRegisters       .           .           Pull the contents of the registers from RAM
                      (      monitor.asm):00023                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00024                 ; * SetAddress          X           .           Sets the current address for commands
                      (      monitor.asm):00025                 ; * SetBank             X           .           Sets the current bank
                      (      monitor.asm):00026                 ; * SkipSpaces          X           X           Skip spaces in the command line
                      (      monitor.asm):00027                 ; ****************************************************************************************
                      (      monitor.asm):00028                 
                      (      monitor.asm):00029                 ;   ____                   _   _____                                    
                      (      monitor.asm):00030                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00031                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00032                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00033                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00034                 ;
                      (      monitor.asm):00035                 ; Various error messages pertaining to command line
                      (      monitor.asm):00036                 ; =================================================
                      (      monitor.asm):00037                 
                      (      monitor.asm):00038                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00039                 ; ------------------------------------------------------------
E488                  (      monitor.asm):00040                 ErrPointer:
E488 3407             (      monitor.asm):00041 (4+3)   129         pshs    A,B,CC
E48A F6EF4F           (      monitor.asm):00042 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E48D CB09             (      monitor.asm):00043 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E48F                  (      monitor.asm):00044                 ErrorPointerLoop:
E48F 8620             (      monitor.asm):00045 (2)     137         lda     #' '                ; Move cursor one space
E491 BDE1C4           (      monitor.asm):00046 (7)     144         jsr     OutChar             ;
E494 5A               (      monitor.asm):00047 (1)     145         decb                        ; Decrement position counter
E495 26F8             (      monitor.asm):00048 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E497 865E             (      monitor.asm):00049 (2)     150         lda     #'^'                ; Print the position pointer
E499 BDE1C4           (      monitor.asm):00050 (7)     157         jsr     OutChar             ;
E49C BDE3DE           (      monitor.asm):00051 (7)     164         jsr     OutCRLF             ;
E49F 3587             (      monitor.asm):00052 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00053                 
                      (      monitor.asm):00054                 ; Invalid address error message
                      (      monitor.asm):00055                 ; -----------------------------
E4A1                  (      monitor.asm):00056                 ErrInvalidAddress:
E4A1 3411             (      monitor.asm):00057 (4+3)   180         pshs    X,CC
E4A3 BDE488           (      monitor.asm):00058 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E4A6 8EEC3E           (      monitor.asm):00059 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E4A9 BDE404           (      monitor.asm):00060 (7)     197         jsr     OutStr              ;
E4AC 3591             (      monitor.asm):00061 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00062                 
                      (      monitor.asm):00063                 ; Invalid byte error message
                      (      monitor.asm):00064                 ; --------------------------
E4AE                  (      monitor.asm):00065                 ErrInvalidByte:
E4AE 3411             (      monitor.asm):00066 (4+3)   213         pshs    X,CC
E4B0 BDE488           (      monitor.asm):00067 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E4B3 8EEC51           (      monitor.asm):00068 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E4B6 BDE404           (      monitor.asm):00069 (7)     230         jsr     OutStr              ;
E4B9 3591             (      monitor.asm):00070 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00071                 
                      (      monitor.asm):00072                 ; Invalid command error message
                      (      monitor.asm):00073                 ; -----------------------------
E4BB                  (      monitor.asm):00074                 ErrInvalidCommand:
E4BB 3411             (      monitor.asm):00075 (4+3)   246         pshs    X,CC
E4BD BDE488           (      monitor.asm):00076 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E4C0 8EEC94           (      monitor.asm):00077 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E4C3 BDE404           (      monitor.asm):00078 (7)     263         jsr     OutStr              ;
E4C6 3591             (      monitor.asm):00079 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00080                 
                      (      monitor.asm):00081                 ; Invalid parameter error message
                      (      monitor.asm):00082                 ; -------------------------------
E4C8                  (      monitor.asm):00083                 ErrInvalidParameter:
E4C8 3411             (      monitor.asm):00084 (4+3)   279         pshs    X,CC
E4CA BDE488           (      monitor.asm):00085 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E4CD 8EEC61           (      monitor.asm):00086 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E4D0 BDE404           (      monitor.asm):00087 (7)     296         jsr     OutStr              ;
E4D3 3591             (      monitor.asm):00088 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00089                 
                      (      monitor.asm):00090                 ; No parameter error message
                      (      monitor.asm):00091                 ; --------------------------
E4D5                  (      monitor.asm):00092                 ErrNoParameter:
E4D5 3411             (      monitor.asm):00093 (4+3)   312         pshs    X,CC
E4D7 BDE488           (      monitor.asm):00094 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E4DA 8EEC76           (      monitor.asm):00095 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E4DD BDE404           (      monitor.asm):00096 (7)     329         jsr     OutStr              ;
E4E0 3591             (      monitor.asm):00097 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00098                     
                      (      monitor.asm):00099                 ; Syntax error message
                      (      monitor.asm):00100                 ; --------------------
E4E2                  (      monitor.asm):00101                 ErrSyntaxError:
E4E2 3411             (      monitor.asm):00102 (4+3)   345         pshs    X,CC
E4E4 BDE488           (      monitor.asm):00103 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E4E7 8EECA7           (      monitor.asm):00104 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E4EA BDE404           (      monitor.asm):00105 (7)     362         jsr     OutStr              ;
E4ED 3591             (      monitor.asm):00106 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00107                 
                      (      monitor.asm):00108                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00109                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00110                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00111                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00112                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00113                 ;                                                |_|
                      (      monitor.asm):00114                 ; Monitor help screen
                      (      monitor.asm):00115                 ; ===================
                      (      monitor.asm):00116                 
E4EF                  (      monitor.asm):00117                 CmdHelp:
E4EF 8EEA89           (      monitor.asm):00118 (3)     374         ldx     #CmdHelpMsg
E4F2 BDE404           (      monitor.asm):00119 (7)     381         jsr     OutStr
E4F5 39               (      monitor.asm):00120 (4)     385         rts
                      (      monitor.asm):00121                     
                      (      monitor.asm):00122                 ;   ____                   _   ____                              
                      (      monitor.asm):00123                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00124                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00125                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00126                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00127                 ;
                      (      monitor.asm):00128                 ; Command parser for the monitor
                      (      monitor.asm):00129                 ; ==============================
                      (      monitor.asm):00130                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00131                 
                      (      monitor.asm):00132                     PRAGMA cc
                      (      monitor.asm):00133                 
E4F6                  (      monitor.asm):00134                 CmdParse:
E4F6 3427             (      monitor.asm):00135 (4+5)   9           pshs    A,B,Y,CC
E4F8 BDE92D           (      monitor.asm):00136 (7)     16          jsr     SkipSpaces          ; Skip leading spaces
E4FB BFEF65           (      monitor.asm):00137 (5)     21          stx     TempWord            ; Store string pointer for command list cycling
E4FE A684             (      monitor.asm):00138 (4+0)   25          lda     ,X                  ; Load first character from command string to see if it's empty
E500 2741             (      monitor.asm):00139 (3)     28          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E502 108EEA3E         (      monitor.asm):00140 (4)     32          ldy     #CmdList            ; Load command list table location in Y
E506                  (      monitor.asm):00141                 CmdParseChar:
E506 A680             (      monitor.asm):00142 (4+1)   37          lda     ,X+                 ; Load first character from command prompt string
E508 BDE153           (      monitor.asm):00143 (7)     44          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E50B E6A0             (      monitor.asm):00144 (4+1)   49          ldb     ,Y+                 ; Load a character from the command list
E50D 2B1C             (      monitor.asm):00145 (3)     52          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E50F 103789           (      monitor.asm):00146 (4)     56          cmpr    A,B                 ; Compare command string to command list character
E512 2605             (      monitor.asm):00147 (3)     59          bne     CmdParseSkip        ; Skip command list entry and point to next command
E514 7CEF4F           (      monitor.asm):00148 (6)     65          inc     CmdErrorPtr         ; Increment command line error pointer
E517 20ED             (      monitor.asm):00149 (3)     68          bra     CmdParseChar        ; Go and compare the next character
E519                  (      monitor.asm):00150                 CmdParseSkip:
E519 BEEF65           (      monitor.asm):00151 (5)     73          ldx     TempWord            ; Restore command prompt pointer to starting position
E51C 7FEF4F           (      monitor.asm):00152 (6)     79          clr     CmdErrorPtr         ; Restore command prompt error pointer
E51F                  (      monitor.asm):00153                 CmdParseSkipLoop:
E51F E6A0             (      monitor.asm):00154 (4+1)   84          ldb     ,Y+                 ; Read next character
E521 2AFC             (      monitor.asm):00155 (3)     87          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E523 3122             (      monitor.asm):00156 (4+1)   92          leay    2,Y                 ; Jump over command address
E525 E6A4             (      monitor.asm):00157 (4+0)   96          ldb     ,Y                  ; Is it the end of the command list
E527 2717             (      monitor.asm):00158 (3)     99          beq     CmdParseNone        ; Yes it is, print error and exit
E529 20DB             (      monitor.asm):00159 (3)     102         bra     CmdParseChar        ; Repeat process until command found
E52B                  (      monitor.asm):00160                 CmdParseValid:
                      (      monitor.asm):00161                     ; Check for characters after valid command
E52B 8120             (      monitor.asm):00162 (2)     104         cmpa    #' '                ; Check for a parameter separator (space)
E52D 2704             (      monitor.asm):00163 (3)     107         beq     CmdParseExecute     ; Yes, then execute command
E52F 8100             (      monitor.asm):00164 (2)     109         cmpa    #$00                ; Check for an end of line in string (null)
E531 260D             (      monitor.asm):00165 (3)     112         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E533                  (      monitor.asm):00166                 CmdParseExecute:
E533 7AEF4F           (      monitor.asm):00167 (6)     118         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E536 ECA4             (      monitor.asm):00168 (5+0)   123         ldd     ,Y                  ; Load address of command from table
E538 EDC3             (      monitor.asm):00169 (5+2)   130         std     ,--U                ; Save address to user stack
E53A 301F             (      monitor.asm):00170 (4+1)   135         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E53C 3527             (      monitor.asm):00171 (4+5)   144         puls    A,B,Y,CC            ; Restore registers
E53E 6ED1             (      monitor.asm):00172 (3+6)   153         jmp     [,U++]              ; Execute command
E540                  (      monitor.asm):00173                 CmdParseNone:
E540 BDE4BB           (      monitor.asm):00174 (7)     160         jsr     ErrInvalidCommand   ;
E543                  (      monitor.asm):00175                 CmdParseEnd:
E543 35A7             (      monitor.asm):00176 (4+7)   171         puls    A,B,Y,CC,PC
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00179                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00180                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00181                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00182                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00183                 ;                                                                |_|
                      (      monitor.asm):00184                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00185                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00186                 
                      (      monitor.asm):00187                     PRAGMA cc
                      (      monitor.asm):00188                 
E545                  (      monitor.asm):00189                 CmdPrompt:
E545 3406             (      monitor.asm):00190 (4+2)   6           pshs    D
E547 B6EF52           (      monitor.asm):00191 (4)     10          lda     CurrBank            ;
E54A BDE3BC           (      monitor.asm):00192 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E54D 863A             (      monitor.asm):00193 (2)     19          lda     #':'                ;
E54F BDE1C4           (      monitor.asm):00194 (7)     26          jsr     OutChar             ; Print separator
E552 FCEF50           (      monitor.asm):00195 (5)     31          ldd     CurrAddress         ;
E555 BDE42F           (      monitor.asm):00196 (7)     38          jsr     OutWord             ; Print current address
E558 863E             (      monitor.asm):00197 (2)     40          lda     #'>'                ;
E55A BDE1C4           (      monitor.asm):00198 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E55D 8620             (      monitor.asm):00199 (2)     49          lda     #' '                ;
E55F BDE1C4           (      monitor.asm):00200 (7)     56          jsr     OutChar             ; Print space
E562 7FEF4F           (      monitor.asm):00201 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E565 3586             (      monitor.asm):00202 (4+4)   70          puls    D,PC
                      (      monitor.asm):00203                 
                      (      monitor.asm):00204                 
                      (      monitor.asm):00205                 ;  ____    _                                         _     _              
                      (      monitor.asm):00206                 ; |  _ \  (_)   __ _    __ _   _ __     ___    ___  | |_  (_)   ___   ___ 
                      (      monitor.asm):00207                 ; | | | | | |  / _` |  / _` | | '_ \   / _ \  / __| | __| | |  / __| / __|
                      (      monitor.asm):00208                 ; | |_| | | | | (_| | | (_| | | | | | | (_) | \__ \ | |_  | | | (__  \__ \
                      (      monitor.asm):00209                 ; |____/  |_|  \__,_|  \__, | |_| |_|  \___/  |___/  \__| |_|  \___| |___/
                      (      monitor.asm):00210                 ;                      |___/                                              
                      (      monitor.asm):00211                 ;
                      (      monitor.asm):00212                 ; Diagnose RAM and some peripherals
                      (      monitor.asm):00213                 ; =================================
                      (      monitor.asm):00214                 
E567                  (      monitor.asm):00215                 Diagnostics:
E567 8EEC03           (      monitor.asm):00216 (3)     73          ldx     #DiagMessage
E56A BDE404           (      monitor.asm):00217 (7)     80          jsr     OutStr
E56D                  (      monitor.asm):00218                 DiagBase:
E56D 8EEC11           (      monitor.asm):00219 (3)     83          ldx     #DiagTestingMsg
E570 BDE404           (      monitor.asm):00220 (7)     90          jsr     OutStr
E573 8E0000           (      monitor.asm):00221 (3)     93          ldx     #$0000              ; Start address pointer
E576 108EE000         (      monitor.asm):00222 (4)     97          ldy     #RomStart           ; End address pointer
E57A 115F             (      monitor.asm):00223 (2)     99          clrf                        ; Clear error flag
E57C                  (      monitor.asm):00224                 DiagBaseLoop:
E57C BDE5A4           (      monitor.asm):00225 (7)     106         jsr     DiagTest            ; Test RAM cell with different patterns
E57F 3001             (      monitor.asm):00226 (4+1)   111         leax    1,X                 ; Increment address pointer
E581 103712           (      monitor.asm):00227 (4)     115         cmpr    X,Y
E584 26F6             (      monitor.asm):00228 (3)     118         bne     DiagBaseLoop
E586 105D             (      monitor.asm):00229 (2)     120         tstw
E588 2713             (      monitor.asm):00230 (3)     123         beq     DiagBaseOK
E58A 8EEC2D           (      monitor.asm):00231 (3)     126         ldx     #DiagFailMsg
E58D BDE404           (      monitor.asm):00232 (7)     133         jsr     OutStr              ; Print fail message
E590 1F60             (      monitor.asm):00233 (4)     137         tfr     W,D                 ; Copy the error count over to D
E592 BDE107           (      monitor.asm):00234 (7)     144         jsr     BinToBcd            ; Convert the number of errors in D to decimal
E595 BDE38C           (      monitor.asm):00235 (7)     151         jsr     OutBcd              ; Print the number
E598 BDE404           (      monitor.asm):00236 (7)     158         jsr     OutStr              ; Continue the fail message
E59B 2006             (      monitor.asm):00237 (3)     161         bra     DiagBaseEnd
E59D                  (      monitor.asm):00238                 DiagBaseOK:
E59D 8EEC26           (      monitor.asm):00239 (3)     164         ldx     #DiagPassMsg
E5A0 BDE404           (      monitor.asm):00240 (7)     171         jsr     OutStr
E5A3                  (      monitor.asm):00241                 DiagBaseEnd:
E5A3 39               (      monitor.asm):00242 (4)     175         rts
                      (      monitor.asm):00243                 
                      (      monitor.asm):00244                 ; Diagnostic subroutines
                      (      monitor.asm):00245                 ; ----------------------
                      (      monitor.asm):00246                 
E5A4                  (      monitor.asm):00247                 DiagTest:
                      (      monitor.asm):00248                     ; Read a byte and save it for later
E5A4 A684             (      monitor.asm):00249 (4+0)   179         lda     ,X
E5A6 3402             (      monitor.asm):00250 (4+1)   184         pshs    A
                      (      monitor.asm):00251                     ; Test pattern $00
E5A8 C600             (      monitor.asm):00252 (2)     186         ldb     #$00
E5AA BDE5C1           (      monitor.asm):00253 (7)     193         jsr     DiagCellPattern
                      (      monitor.asm):00254                     ; Test pattern $55
E5AD C655             (      monitor.asm):00255 (2)     195         ldb     #$55
E5AF BDE5C1           (      monitor.asm):00256 (7)     202         jsr     DiagCellPattern
                      (      monitor.asm):00257                     ; Test pattern $AA
E5B2 C6AA             (      monitor.asm):00258 (2)     204         ldb     #$AA
E5B4 BDE5C1           (      monitor.asm):00259 (7)     211         jsr     DiagCellPattern
                      (      monitor.asm):00260                     ; Test pattern $FF
E5B7 C6FF             (      monitor.asm):00261 (2)     213         ldb     #$FF
E5B9 BDE5C1           (      monitor.asm):00262 (7)     220         jsr     DiagCellPattern
                      (      monitor.asm):00263                     ; Restore original data in cell
E5BC 3502             (      monitor.asm):00264 (4+1)   225         puls    A
E5BE A784             (      monitor.asm):00265 (4+0)   229         sta     ,X
E5C0 39               (      monitor.asm):00266 (4)     233         rts
E5C1                  (      monitor.asm):00267                 DiagCellPattern:
                      (      monitor.asm):00268                     ; B = Test pattern
                      (      monitor.asm):00269                     ; X = Current cell pointer
E5C1 E784             (      monitor.asm):00270 (4+0)   237         stb     ,X                  ; Store test pattern in memory
E5C3 A684             (      monitor.asm):00271 (4+0)   241         lda     ,X                  ; Read back memory
E5C5 103789           (      monitor.asm):00272 (4)     245         cmpr    A,B                 ; Does the memory cell match the pattern after read back
E5C8 2702             (      monitor.asm):00273 (3)     248         beq     DiagCellEnd         ; If it's the same, test with pattern AA
E5CA 105C             (      monitor.asm):00274 (2)     250         incw                        ; Increment error count
                      (      monitor.asm):00275                     ; *** Print cell error
E5CC                  (      monitor.asm):00276                 DiagCellEnd:
E5CC 39               (      monitor.asm):00277 (4)     254         rts
                      (      monitor.asm):00278                     
                      (      monitor.asm):00279                 ;  ____                              
                      (      monitor.asm):00280                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00281                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00282                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00283                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00284                 ;                             |_|    
                      (      monitor.asm):00285                 ;
                      (      monitor.asm):00286                 ; Memory dump
                      (      monitor.asm):00287                 ; ===========
                      (      monitor.asm):00288                 
E5CD                  (      monitor.asm):00289                 Dump:
E5CD BDE92D           (      monitor.asm):00290 (7)     261         jsr     SkipSpaces          ; Remove leading white spaces
E5D0 A684             (      monitor.asm):00291 (4+0)   265         lda     ,X                  ; Read a character from string
E5D2 2708             (      monitor.asm):00292 (3)     268         beq     DumpDisplay         ; If empty, assume Current Address, and display
E5D4 BDE27E           (      monitor.asm):00293 (7)     275         jsr     GetStrWord          ; Read address from string
E5D7 2454             (      monitor.asm):00294 (3)     278         bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E5D9 FDEF50           (      monitor.asm):00295 (5)     283         std     CurrAddress         ; Save inputed address in Current Address
E5DC                  (      monitor.asm):00296                 DumpDisplay:
E5DC BEEF50           (      monitor.asm):00297 (5)     288         ldx     CurrAddress         ; Retrieve Current Address
E5DF 1F12             (      monitor.asm):00298 (4)     292         tfr     X,Y
E5E1 118614           (      monitor.asm):00299 (3)     295         lde     #ScrVertRes-4       ; Number of lines to print
E5E4                  (      monitor.asm):00300                 DumpAddr:
E5E4 1F10             (      monitor.asm):00301 (4)     299         tfr     X,D                 ; Put Current address in D
E5E6 BDE42F           (      monitor.asm):00302 (7)     306         jsr     OutWord             ;
E5E9 863A             (      monitor.asm):00303 (2)     308         lda     #':'                ; Print address separator
E5EB BDE1C4           (      monitor.asm):00304 (7)     315         jsr     OutChar             ;
E5EE 8620             (      monitor.asm):00305 (2)     317         lda     #' '                ; Print space separator
E5F0 BDE1C4           (      monitor.asm):00306 (7)     324         jsr     OutChar             ;
E5F3 C610             (      monitor.asm):00307 (2)     326         ldb     #BytePerLine        ; Get the number of bytes to print per line
E5F5                  (      monitor.asm):00308                 DumpByte:
E5F5 A680             (      monitor.asm):00309 (4+1)   331         lda     ,X+                 ; Print byte from Current Address
E5F7 BDE3BC           (      monitor.asm):00310 (7)     338         jsr     OutByte             ;
E5FA 8620             (      monitor.asm):00311 (2)     340         lda     #' '                ; Print space separator
E5FC BDE1C4           (      monitor.asm):00312 (7)     347         jsr     OutChar             ;
E5FF 5A               (      monitor.asm):00313 (1)     348         decb                        ; Decrement byte counter
E600 26F3             (      monitor.asm):00314 (3)     351         bne     DumpByte            ; If not finished, loop and output next byte
E602 867C             (      monitor.asm):00315 (2)     353         lda     #'|'                ; Print space separator
E604 BDE1C4           (      monitor.asm):00316 (7)     360         jsr     OutChar             ;
E607 8620             (      monitor.asm):00317 (2)     362         lda     #' '                ; Print space separator
E609 BDE1C4           (      monitor.asm):00318 (7)     369         jsr     OutChar             ;
E60C C610             (      monitor.asm):00319 (2)     371         ldb     #BytePerLine        ; Get the number of bytes to print per line
E60E                  (      monitor.asm):00320                 DumpChar:
E60E A6A0             (      monitor.asm):00321 (4+1)   376         lda     ,Y+                 ; Print character from Current Address
E610 8120             (      monitor.asm):00322 (2)     378         cmpa    #' '                ; Compare character to space character
E612 2D05             (      monitor.asm):00323 (3)     381         blt     DumpCharDot         ; If lower, then print dot
E614 4D               (      monitor.asm):00324 (1)     382         tsta                        ; Is the characther in the extended ASCII range
E615 2B02             (      monitor.asm):00325 (3)     385         bmi     DumpCharDot         ; If it is, the print dot
E617 2002             (      monitor.asm):00326 (3)     388         bra     DumpCharPrint       ; Else, print character
E619                  (      monitor.asm):00327                 DumpCharDot:
E619 862E             (      monitor.asm):00328 (2)     390         lda     #'.'                ; Replace character to dot
E61B                  (      monitor.asm):00329                 DumpCharPrint:
E61B BDE1C4           (      monitor.asm):00330 (7)     397         jsr     OutChar             ; Output actual or replaced character
E61E 5A               (      monitor.asm):00331 (1)     398         decb                        ; Decrement byte counter
E61F 26ED             (      monitor.asm):00332 (3)     401         bne     DumpChar            ; If not finished, loop and output next character
E621 BDE3DE           (      monitor.asm):00333 (7)     408         jsr     OutCRLF             ; Change line
E624 114A             (      monitor.asm):00334 (2)     410         dece                        ; Decrement the lines to print
E626 26BC             (      monitor.asm):00335 (3)     413         bne     DumpAddr
E628 BFEF50           (      monitor.asm):00336 (5)     418         stx     CurrAddress         ; Store new Current Address in memory
E62B 2003             (      monitor.asm):00337 (3)     421         bra     DumpEnd
E62D                  (      monitor.asm):00338                 DumpInvalidAddress:
E62D BDE4A1           (      monitor.asm):00339 (7)     428         jsr     ErrInvalidAddress   ; Display address error
E630                  (      monitor.asm):00340                 DumpEnd:
E630 39               (      monitor.asm):00341 (4)     432         rts
                      (      monitor.asm):00342                     
                      (      monitor.asm):00343                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00344                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00345                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00346                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00347                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00348                 ;
                      (      monitor.asm):00349                 ; Load Intel Hex file to memory
                      (      monitor.asm):00350                 ; =============================
                      (      monitor.asm):00351                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00352                 ;           E = Checksum accumulator
                      (      monitor.asm):00353                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00354                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00355                 ;           Y = Byte count in current record
                      (      monitor.asm):00356                 ; Vars:     TempWord
                      (      monitor.asm):00357                 
E631                  (      monitor.asm):00358                 LoadIntelHex:
E631 3437             (      monitor.asm):00359 (4+7)   443         pshs    A,B,X,Y,CC
E633 1038             (      monitor.asm):00360 (6)     449         pshsw
E635 105F             (      monitor.asm):00361 (2)     451         clrw                        ; Clear the flags and checksum accumulator
E637 8EECB7           (      monitor.asm):00362 (3)     454         ldx     #LoadStartMsg       ; Print message that loading will commence
E63A BDE404           (      monitor.asm):00363 (7)     461         jsr     OutStr              ; 
E63D                  (      monitor.asm):00364                 LoadRecord:
E63D BDE1AA           (      monitor.asm):00365 (7)     468         jsr     InChar              ; Read a character
E640 811B             (      monitor.asm):00366 (2)     470         cmpa    #ESC                ; Is it the ESC key?
E642 2609             (      monitor.asm):00367 (3)     473         bne     LoadStart           ; No, check for record marker
E644 8EECF2           (      monitor.asm):00368 (3)     476         ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E647 BDE404           (      monitor.asm):00369 (7)     483         jsr     OutStr              ; 
E64A 1600B5           (      monitor.asm):00370 (4)     487         lbra    LoadEnd             ; Exit
E64D                  (      monitor.asm):00371                 LoadStart:
E64D 813A             (      monitor.asm):00372 (2)     489         cmpa    #':'                ; Start of record marker
E64F 26EC             (      monitor.asm):00373 (3)     492         bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E651 114F             (      monitor.asm):00374 (2)     494         clre                        ; Clear checksum accumulator
                      (      monitor.asm):00375                     ; Read the record length
E653 BDE2ED           (      monitor.asm):00376 (7)     501         jsr     InByte              ; Get record length
E656 1F89             (      monitor.asm):00377 (4)     505         tfr     A,B                 ; Transfer value to LSB of D
E658 4F               (      monitor.asm):00378 (1)     506         clra                        ; Clear MSB of D
E659 1F02             (      monitor.asm):00379 (4)     510         tfr     D,Y                 ; Transfer byte count D to Y
E65B 1F9E             (      monitor.asm):00380 (4)     514         tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00381                     ; Read the destination address
E65D BDE36D           (      monitor.asm):00382 (7)     521         jsr     InWord              ; Read the address
E660 BFEF65           (      monitor.asm):00383 (5)     526         stx     TempWord            ; Save last address pointed by X, as last record is $0000
E663 1F01             (      monitor.asm):00384 (4)     530         tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00385                     ; Add checksum of both bytes
E665 10308E           (      monitor.asm):00386 (4)     534         addr    A,E                 ; Add MSB of address to checksum accumulator
E668 10309E           (      monitor.asm):00387 (4)     538         addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00388                     ;Set origin address flag and store address in CurrAddress
E66B 115D             (      monitor.asm):00389 (2)     540         tstf                        ; Test the flags register
E66D 2B09             (      monitor.asm):00390 (3)     543         bmi     LoadRecordType      ; If it's not the first line of code read record type
E66F BFEF50           (      monitor.asm):00391 (5)     548         stx     CurrAddress         ; Save start address
E672 BFEF62           (      monitor.asm):00392 (5)     553         stx     RegPC               ; Save the user PC 
E675 11C680           (      monitor.asm):00393 (3)     556         ldf     #$80                ; Sets the origin flag
E678                  (      monitor.asm):00394                 LoadRecordType:
E678 BDE2ED           (      monitor.asm):00395 (7)     563         jsr     InByte              ; Get the record type
                      (      monitor.asm):00396                     ; Add checksum
E67B 10308E           (      monitor.asm):00397 (4)     567         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00398                     ; Which record type is it?
E67E 8100             (      monitor.asm):00399 (2)     569         cmpa    #0                  ; Is it the Data record type?
E680 2713             (      monitor.asm):00400 (3)     572         beq     LoadData            ; Get Data
E682 8101             (      monitor.asm):00401 (2)     574         cmpa    #1                  ; Is it the End of File record type?
E684 273E             (      monitor.asm):00402 (3)     577         beq     LoadEOF             ; Load last line
E686 8EED0D           (      monitor.asm):00403 (3)     580         ldx     #LoadRecordErr      ; 
E689 BDE404           (      monitor.asm):00404 (7)     587         jsr     OutStr              ; Print Unknown Record Type message
E68C BDE3BC           (      monitor.asm):00405 (7)     594         jsr     OutByte             ; Print the actual record number
E68F BDE3DE           (      monitor.asm):00406 (7)     601         jsr     OutCRLF             ; Change line
E692 16006D           (      monitor.asm):00407 (4)     605         lbra    LoadEnd
E695                  (      monitor.asm):00408                 LoadData:
                      (      monitor.asm):00409                     ; Get record type 00 (Data)
E695 BDE2ED           (      monitor.asm):00410 (7)     612         jsr     InByte              ; Read data
E698 A780             (      monitor.asm):00411 (4+1)   617         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00412                     ; Add checksum
E69A 10308E           (      monitor.asm):00413 (4)     621         addr    A,E                 ; Add byte data to checksum accumulator
E69D 313F             (      monitor.asm):00414 (4+1)   626         leay    -1,Y                ; Decrement byte counter
E69F 108C0000         (      monitor.asm):00415 (4)     630         cmpy    #0
E6A3 26F0             (      monitor.asm):00416 (3)     633         bne     LoadData
E6A5                  (      monitor.asm):00417                 LoadChecksum:
                      (      monitor.asm):00418                     ; Process accumulated checksum
E6A5 1143             (      monitor.asm):00419 (2)     635         come                        ; Complement F
E6A7 114C             (      monitor.asm):00420 (2)     637         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00421                     ; Get record checksum
E6A9 BDE2ED           (      monitor.asm):00422 (7)     644         jsr     InByte              ; Read checksum
E6AC 10378E           (      monitor.asm):00423 (4)     648         cmpr    A,E                 ; Do the checksums match
E6AF 2608             (      monitor.asm):00424 (3)     651         bne     LoadFailure         ; If inconsistent, display message
E6B1 862E             (      monitor.asm):00425 (2)     653         lda     #'.'                ; Character indicating line is ok
E6B3 BDE1C4           (      monitor.asm):00426 (7)     660         jsr     OutChar             ; Print the period character
E6B6 16FF84           (      monitor.asm):00427 (4)     664         lbra    LoadRecord          ; Fetch next record
E6B9                  (      monitor.asm):00428                 LoadFailure:
                      (      monitor.asm):00429                     ; Indicate record failed checksum
E6B9 11C681           (      monitor.asm):00430 (3)     667         ldf     #$81                ; Sets the checksum failure flag
E6BC 8678             (      monitor.asm):00431 (2)     669         lda     #'x'                ; Load the failed checksum character
E6BE BDE1C4           (      monitor.asm):00432 (7)     676         jsr     OutChar             ; Print it
E6C1 16FF79           (      monitor.asm):00433 (4)     680         lbra    LoadRecord          ; Get next record
E6C4                  (      monitor.asm):00434                 LoadEOF:
                      (      monitor.asm):00435                     ; Process accumulated checksum
E6C4 1143             (      monitor.asm):00436 (2)     682         come                        ; Complement E
E6C6 114C             (      monitor.asm):00437 (2)     684         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00438                     ; Get end record (01) checksum
E6C8 BDE2ED           (      monitor.asm):00439 (7)     691         jsr     InByte              ; Get the checksum byte
E6CB 10378E           (      monitor.asm):00440 (4)     695         cmpr    A,E                 ; Do the checksums match
E6CE 2708             (      monitor.asm):00441 (3)     698         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E6D0 11C681           (      monitor.asm):00442 (3)     701         ldf     #$81                ; Sets the checksum failure flag
E6D3 8658             (      monitor.asm):00443 (2)     703         lda     #'X'                ; Load the failed checksum character
E6D5 BDE1C4           (      monitor.asm):00444 (7)     710         jsr     OutChar             ; Print it Exit routine
E6D8                  (      monitor.asm):00445                 LoadCheckFlag:
E6D8 11C180           (      monitor.asm):00446 (3)     713         cmpf    #$80                ; Was there any checksum errors?
E6DB 270B             (      monitor.asm):00447 (3)     716         beq     LoadSuccess         ; If no errors, then print success
E6DD BDE3DE           (      monitor.asm):00448 (7)     723         jsr     OutCRLF             ; Change line
E6E0 8EED23           (      monitor.asm):00449 (3)     726         ldx     #LoadFailedErr      ; Print download failed
E6E3 BDE404           (      monitor.asm):00450 (7)     733         jsr     OutStr              ;
E6E6 201A             (      monitor.asm):00451 (3)     736         bra     LoadEnd             ;
E6E8                  (      monitor.asm):00452                 LoadSuccess:
E6E8 BEEF65           (      monitor.asm):00453 (5)     741         ldx     TempWord            ; Restore last position of X
E6EB CC36FF           (      monitor.asm):00454 (3)     744         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E6EE ED81             (      monitor.asm):00455 (5+2)   751         std     ,X++                ; Store it at the end of code
E6F0 CC103A           (      monitor.asm):00456 (3)     754         ldd     #$103A              ; Save opcode "pshuw"
E6F3 ED81             (      monitor.asm):00457 (5+2)   761         std     ,X++                ; Store it at the end of code
E6F5 8639             (      monitor.asm):00458 (2)     763         lda     #$39                ; Save opcode "rts"
E6F7 A784             (      monitor.asm):00459 (4+0)   767         sta     ,X                  ; Store it at the end of code to return to prompt
E6F9 BDE3DE           (      monitor.asm):00460 (7)     774         jsr     OutCRLF             ; Change line
E6FC 8EED4B           (      monitor.asm):00461 (3)     777         ldx     #LoadSuccessMsg     ; Print success message
E6FF BDE404           (      monitor.asm):00462 (7)     784         jsr     OutStr
E702                  (      monitor.asm):00463                 LoadEnd:
E702 1039             (      monitor.asm):00464 (6)     790         pulsw
E704 35B7             (      monitor.asm):00465 (4+9)   803         puls    A,B,X,Y,CC,PC
                      (      monitor.asm):00466                 
                      (      monitor.asm):00467                 ;  __  __                                             __  __                 
                      (      monitor.asm):00468                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00469                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00470                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00471                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00472                 ;                                             |___/                   |_|
                      (      monitor.asm):00473                 ;
                      (      monitor.asm):00474                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00475                 ; ===========================================
                      (      monitor.asm):00476                 
E706                  (      monitor.asm):00477                 MemoryMap:
E706 3406             (      monitor.asm):00478 (4+2)   809         pshs    A,B
E708 8EED61           (      monitor.asm):00479 (3)     812         ldx     #MemoryMapMsg
E70B BDE404           (      monitor.asm):00480 (7)     819         jsr     OutStr              ; Print up to end of RAM
E70E CCDFFF           (      monitor.asm):00481 (3)     822         ldd     #RomStart-1
E711 BDE42F           (      monitor.asm):00482 (7)     829         jsr     OutWord             ; Print RAM end
E714 BDE404           (      monitor.asm):00483 (7)     836         jsr     OutStr              ; Print up to begining of ROM
E717 104C             (      monitor.asm):00484 (2)     838         incd
E719 BDE42F           (      monitor.asm):00485 (7)     845         jsr     OutWord             ; Print ROM start
E71C BDE404           (      monitor.asm):00486 (7)     852         jsr     OutStr              ; Print till the end of mapping
E71F 3586             (      monitor.asm):00487 (4+4)   860         puls    A,B,PC
                      (      monitor.asm):00488                 
                      (      monitor.asm):00489                 ;  ____                  _    
                      (      monitor.asm):00490                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00491                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00492                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00493                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00494                 ;
                      (      monitor.asm):00495                 ;
                      (      monitor.asm):00496                 ; Read a byte from a specific or current address
                      (      monitor.asm):00497                 ; ==============================================
                      (      monitor.asm):00498                 
E721                  (      monitor.asm):00499                 Peek:
E721 BDE92D           (      monitor.asm):00500 (7)     867         jsr     SkipSpaces
E724 A684             (      monitor.asm):00501 (4+0)   871         lda     ,X
E726 2708             (      monitor.asm):00502 (3)     874         beq     PeekDisplay
E728 BDE27E           (      monitor.asm):00503 (7)     881         jsr     GetStrWord
E72B 241A             (      monitor.asm):00504 (3)     884         bcc     PeekInvalidAddr
E72D FDEF50           (      monitor.asm):00505 (5)     889         std     CurrAddress
E730                  (      monitor.asm):00506                 PeekDisplay:
E730 FCEF50           (      monitor.asm):00507 (5)     894         ldd     CurrAddress
E733 BDE42F           (      monitor.asm):00508 (7)     901         jsr     OutWord
E736 863D             (      monitor.asm):00509 (2)     903         lda     #'='
E738 BDE1C4           (      monitor.asm):00510 (7)     910         jsr     OutChar
E73B A69FEF50         (      monitor.asm):00511 (4+5)   919         lda     [CurrAddress]
E73F BDE3BC           (      monitor.asm):00512 (7)     926         jsr     OutByte
E742 BDE3DE           (      monitor.asm):00513 (7)     933         jsr     OutCRLF
E745 2003             (      monitor.asm):00514 (3)     936         bra     PeekEnd
E747                  (      monitor.asm):00515                 PeekInvalidAddr:
E747 BDE4A1           (      monitor.asm):00516 (7)     943         jsr     ErrInvalidAddress
E74A                  (      monitor.asm):00517                 PeekEnd:
E74A 39               (      monitor.asm):00518 (4)     947         rts
                      (      monitor.asm):00519                 
                      (      monitor.asm):00520                 ;  ____            _           
                      (      monitor.asm):00521                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00522                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00523                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00524                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00525                 ;
                      (      monitor.asm):00526                 ;
                      (      monitor.asm):00527                 ; Writes a byte at a specific address
                      (      monitor.asm):00528                 ; ===================================
                      (      monitor.asm):00529                 
E74B                  (      monitor.asm):00530                 Poke:
E74B BDE92D           (      monitor.asm):00531 (7)     954         jsr     SkipSpaces          ; Remove excessive leading spaces
E74E A684             (      monitor.asm):00532 (4+0)   958         lda     ,X                  ; Load character
E750 2735             (      monitor.asm):00533 (3)     961         beq     PokeNoParameters    ; If no parameters, print no parameter error
E752 BDE27E           (      monitor.asm):00534 (7)     968         jsr     GetStrWord          ; Get an address
E755 242B             (      monitor.asm):00535 (3)     971         bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E757 FDEF50           (      monitor.asm):00536 (5)     976         std     CurrAddress         ; Save address
E75A BDE92D           (      monitor.asm):00537 (7)     983         jsr     SkipSpaces          ; Remove unecessary spaces
E75D BDE1E9           (      monitor.asm):00538 (7)     990         jsr     GetStrByte          ; Get byte
E760 241B             (      monitor.asm):00539 (3)     993         bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
E762 A79FEF50         (      monitor.asm):00540 (4+5)   1002        sta     [CurrAddress]       ; Poke value at address
E766 FCEF50           (      monitor.asm):00541 (5)     1007        ldd     CurrAddress         ; Print address
E769 BDE42F           (      monitor.asm):00542 (7)     1014        jsr     OutWord             ;
E76C 863D             (      monitor.asm):00543 (2)     1016        lda     #'='                ; Print a colon
E76E BDE1C4           (      monitor.asm):00544 (7)     1023        jsr     OutChar             ;
E771 A69FEF50         (      monitor.asm):00545 (4+5)   1032        lda     [CurrAddress]       ; Load A from Current Address
E775 BDE3BC           (      monitor.asm):00546 (7)     1039        jsr     OutByte             ; Print byte value
E778 BDE3DE           (      monitor.asm):00547 (7)     1046        jsr     OutCRLF             ; New line
E77B 200D             (      monitor.asm):00548 (3)     1049        bra     PokeEnd
E77D                  (      monitor.asm):00549                 PokeInvalidByte:
E77D BDE4AE           (      monitor.asm):00550 (7)     1056        jsr     ErrInvalidByte      ; Print invalid byte
E780 2008             (      monitor.asm):00551 (3)     1059        bra     PokeEnd
E782                  (      monitor.asm):00552                 PokeInvalidAddress:
E782 BDE4A1           (      monitor.asm):00553 (7)     1066        jsr     ErrInvalidAddress   ; Print invalid address error
E785 2003             (      monitor.asm):00554 (3)     1069        bra     PokeEnd
E787                  (      monitor.asm):00555                 PokeNoParameters:
E787 BDE4D5           (      monitor.asm):00556 (7)     1076        jsr     ErrNoParameter      ; Print no parameter error
E78A                  (      monitor.asm):00557                 PokeEnd:
E78A 39               (      monitor.asm):00558 (4)     1080        rts
                      (      monitor.asm):00559                 
                      (      monitor.asm):00560                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00561                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00562                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00563                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00564                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00565                 ;                                                  |___/                                     
                      (      monitor.asm):00566                 ;
                      (      monitor.asm):00567                 ; Print Registers
                      (      monitor.asm):00568                 ; ===============
E78B                  (      monitor.asm):00569                 PrintRegisters:
                      (      monitor.asm):00570                     ; Print Register A
E78B 8641             (      monitor.asm):00571 (2)     1082        lda     #'A'
E78D BDE1C4           (      monitor.asm):00572 (7)     1089        jsr     OutChar
E790 863A             (      monitor.asm):00573 (2)     1091        lda     #':'
E792 BDE1C4           (      monitor.asm):00574 (7)     1098        jsr     OutChar
E795 B6EF56           (      monitor.asm):00575 (4)     1102        lda     RegA
E798 BDE3BC           (      monitor.asm):00576 (7)     1109        jsr     OutByte
E79B 8620             (      monitor.asm):00577 (2)     1111        lda     #' '
E79D BDE1C4           (      monitor.asm):00578 (7)     1118        jsr     OutChar
                      (      monitor.asm):00579                     ; Print Register B
E7A0 8642             (      monitor.asm):00580 (2)     1120        lda     #'B'
E7A2 BDE1C4           (      monitor.asm):00581 (7)     1127        jsr     OutChar
E7A5 863A             (      monitor.asm):00582 (2)     1129        lda     #':'
E7A7 BDE1C4           (      monitor.asm):00583 (7)     1136        jsr     OutChar
E7AA B6EF57           (      monitor.asm):00584 (4)     1140        lda     RegB
E7AD BDE3BC           (      monitor.asm):00585 (7)     1147        jsr     OutByte
E7B0 8620             (      monitor.asm):00586 (2)     1149        lda     #' '
E7B2 BDE1C4           (      monitor.asm):00587 (7)     1156        jsr     OutChar
                      (      monitor.asm):00588                     ; Print Register E
E7B5 8645             (      monitor.asm):00589 (2)     1158        lda     #'E'
E7B7 BDE1C4           (      monitor.asm):00590 (7)     1165        jsr     OutChar
E7BA 863A             (      monitor.asm):00591 (2)     1167        lda     #':'
E7BC BDE1C4           (      monitor.asm):00592 (7)     1174        jsr     OutChar
E7BF B6EF58           (      monitor.asm):00593 (4)     1178        lda     RegE
E7C2 BDE3BC           (      monitor.asm):00594 (7)     1185        jsr     OutByte
E7C5 8620             (      monitor.asm):00595 (2)     1187        lda     #' '
E7C7 BDE1C4           (      monitor.asm):00596 (7)     1194        jsr     OutChar
                      (      monitor.asm):00597                     ; Print Register F
E7CA 8646             (      monitor.asm):00598 (2)     1196        lda     #'F'
E7CC BDE1C4           (      monitor.asm):00599 (7)     1203        jsr     OutChar
E7CF 863A             (      monitor.asm):00600 (2)     1205        lda     #':'
E7D1 BDE1C4           (      monitor.asm):00601 (7)     1212        jsr     OutChar
E7D4 B6EF59           (      monitor.asm):00602 (4)     1216        lda     RegF
E7D7 BDE3BC           (      monitor.asm):00603 (7)     1223        jsr     OutByte
E7DA 8620             (      monitor.asm):00604 (2)     1225        lda     #' '
E7DC BDE1C4           (      monitor.asm):00605 (7)     1232        jsr     OutChar
                      (      monitor.asm):00606                     ; Print Register X
E7DF 8658             (      monitor.asm):00607 (2)     1234        lda     #'X'
E7E1 BDE1C4           (      monitor.asm):00608 (7)     1241        jsr     OutChar
E7E4 863A             (      monitor.asm):00609 (2)     1243        lda     #':'
E7E6 BDE1C4           (      monitor.asm):00610 (7)     1250        jsr     OutChar
E7E9 FCEF5A           (      monitor.asm):00611 (5)     1255        ldd     RegX
E7EC BDE42F           (      monitor.asm):00612 (7)     1262        jsr     OutWord
E7EF 8620             (      monitor.asm):00613 (2)     1264        lda     #' '
E7F1 BDE1C4           (      monitor.asm):00614 (7)     1271        jsr     OutChar
                      (      monitor.asm):00615                     ; Print Register Y
E7F4 8659             (      monitor.asm):00616 (2)     1273        lda     #'Y'
E7F6 BDE1C4           (      monitor.asm):00617 (7)     1280        jsr     OutChar
E7F9 863A             (      monitor.asm):00618 (2)     1282        lda     #':'
E7FB BDE1C4           (      monitor.asm):00619 (7)     1289        jsr     OutChar
E7FE FCEF5C           (      monitor.asm):00620 (5)     1294        ldd     RegY
E801 BDE42F           (      monitor.asm):00621 (7)     1301        jsr     OutWord
E804 8620             (      monitor.asm):00622 (2)     1303        lda     #' '
E806 BDE1C4           (      monitor.asm):00623 (7)     1310        jsr     OutChar
                      (      monitor.asm):00624                     ; Print Register U
E809 8655             (      monitor.asm):00625 (2)     1312        lda     #'U'
E80B BDE1C4           (      monitor.asm):00626 (7)     1319        jsr     OutChar
E80E 863A             (      monitor.asm):00627 (2)     1321        lda     #':'
E810 BDE1C4           (      monitor.asm):00628 (7)     1328        jsr     OutChar
E813 FCEF5E           (      monitor.asm):00629 (5)     1333        ldd     RegU
E816 BDE42F           (      monitor.asm):00630 (7)     1340        jsr     OutWord
E819 8620             (      monitor.asm):00631 (2)     1342        lda     #' '
E81B BDE1C4           (      monitor.asm):00632 (7)     1349        jsr     OutChar
                      (      monitor.asm):00633                     ; Print Register S
E81E 8653             (      monitor.asm):00634 (2)     1351        lda     #'S'
E820 BDE1C4           (      monitor.asm):00635 (7)     1358        jsr     OutChar
E823 863A             (      monitor.asm):00636 (2)     1360        lda     #':'
E825 BDE1C4           (      monitor.asm):00637 (7)     1367        jsr     OutChar
E828 FCEF60           (      monitor.asm):00638 (5)     1372        ldd     RegS
E82B BDE42F           (      monitor.asm):00639 (7)     1379        jsr     OutWord
E82E 8620             (      monitor.asm):00640 (2)     1381        lda     #' '
E830 BDE1C4           (      monitor.asm):00641 (7)     1388        jsr     OutChar
                      (      monitor.asm):00642                     ; Print Register CC
E833 8643             (      monitor.asm):00643 (2)     1390        lda     #'C'
E835 BDE1C4           (      monitor.asm):00644 (7)     1397        jsr     OutChar
E838 BDE1C4           (      monitor.asm):00645 (7)     1404        jsr     OutChar
E83B 863A             (      monitor.asm):00646 (2)     1406        lda     #':'
E83D BDE1C4           (      monitor.asm):00647 (7)     1413        jsr     OutChar
E840 B6EF54           (      monitor.asm):00648 (4)     1417        lda     RegCC
E843 BDE3BC           (      monitor.asm):00649 (7)     1424        jsr     OutByte
E846 8620             (      monitor.asm):00650 (2)     1426        lda     #' '
E848 BDE1C4           (      monitor.asm):00651 (7)     1433        jsr     OutChar
                      (      monitor.asm):00652                     ; Print Register DP
E84B 8644             (      monitor.asm):00653 (2)     1435        lda     #'D'
E84D BDE1C4           (      monitor.asm):00654 (7)     1442        jsr     OutChar
E850 8650             (      monitor.asm):00655 (2)     1444        lda     #'P'
E852 BDE1C4           (      monitor.asm):00656 (7)     1451        jsr     OutChar
E855 863A             (      monitor.asm):00657 (2)     1453        lda     #':'
E857 BDE1C4           (      monitor.asm):00658 (7)     1460        jsr     OutChar
E85A B6EF55           (      monitor.asm):00659 (4)     1464        lda     RegDP
E85D BDE3BC           (      monitor.asm):00660 (7)     1471        jsr     OutByte
E860 8620             (      monitor.asm):00661 (2)     1473        lda     #' '
E862 BDE1C4           (      monitor.asm):00662 (7)     1480        jsr     OutChar
                      (      monitor.asm):00663                     ; Print Program Counter
E865 8650             (      monitor.asm):00664 (2)     1482        lda     #'P'
E867 BDE1C4           (      monitor.asm):00665 (7)     1489        jsr     OutChar
E86A 8643             (      monitor.asm):00666 (2)     1491        lda     #'C'
E86C BDE1C4           (      monitor.asm):00667 (7)     1498        jsr     OutChar
E86F 863A             (      monitor.asm):00668 (2)     1500        lda     #':'
E871 BDE1C4           (      monitor.asm):00669 (7)     1507        jsr     OutChar
E874 FCEF62           (      monitor.asm):00670 (5)     1512        ldd     RegPC
E877 BDE42F           (      monitor.asm):00671 (7)     1519        jsr     OutWord
E87A BDE3DE           (      monitor.asm):00672 (7)     1526        jsr     OutCRLF
E87D 39               (      monitor.asm):00673 (4)     1530        rts
                      (      monitor.asm):00674                 
                      (      monitor.asm):00675                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):00676                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00677                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00678                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00679                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00680                 ;                                               |___/                                     
                      (      monitor.asm):00681                 ;
                      (      monitor.asm):00682                 ; Push Registers
                      (      monitor.asm):00683                 ; ==============
                      (      monitor.asm):00684                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):00685                 
E87E                  (      monitor.asm):00686                 PushRegisters:  
                      (      monitor.asm):00687                     ; Recover register values from last run command
E87E 103B             (      monitor.asm):00688 (6)     1536        puluw
E880 377F             (      monitor.asm):00689 (4+10)  1550        pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):00690                     ; Save registers in variables
E882 3401             (      monitor.asm):00691 (4+1)   1555        pshs    CC                  ; Store CC so it's not altered
E884 B7EF56           (      monitor.asm):00692 (4)     1559        sta     RegA                ; Save the A register
E887 3502             (      monitor.asm):00693 (4+1)   1564        puls    A                   ; Restore CC so it can be saved
E889 B7EF54           (      monitor.asm):00694 (4)     1568        sta     RegCC               ; Save the condition code register
E88C F7EF57           (      monitor.asm):00695 (4)     1572        stb     RegB                ; Save the B register
E88F 11B7EF58         (      monitor.asm):00696 (5)     1577        ste     RegE                ; Save the E register
E893 11F7EF59         (      monitor.asm):00697 (5)     1582        stf     RegF                ; Save the F register
E897 BFEF5A           (      monitor.asm):00698 (5)     1587        stx     RegX                ; Save the X register
E89A 10BFEF5C         (      monitor.asm):00699 (6)     1593        sty     RegY                ; Save the Y register
E89E 10FFEF60         (      monitor.asm):00700 (6)     1599        sts     RegS                ; Save the systemp stack
E8A2 3706             (      monitor.asm):00701 (4+2)   1605        pulu    D                   ; Restore PC in D
E8A4 830002           (      monitor.asm):00702 (3)     1608        subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
E8A7 FDEF62           (      monitor.asm):00703 (5)     1613        std     RegPC               ; Save the program counter that was in D
E8AA FFEF5E           (      monitor.asm):00704 (5)     1618        stu     RegU                ; Save the user stack
E8AD 39               (      monitor.asm):00705 (4)     1622        rts
                      (      monitor.asm):00706                 
                      (      monitor.asm):00707                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):00708                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00709                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00710                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00711                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00712                 ;                                         |___/                                     
                      (      monitor.asm):00713                 ;
                      (      monitor.asm):00714                 ; Pull Registers
                      (      monitor.asm):00715                 ; --------------
E8AE                  (      monitor.asm):00716                 PullRegisters:  
E8AE B6EF54           (      monitor.asm):00717 (4)     1626        lda     RegCC               ; Load CC register
E8B1 3402             (      monitor.asm):00718 (4+1)   1631        pshs    A                   ; Store it so it can be restored
E8B3 B6EF56           (      monitor.asm):00719 (4)     1635        lda     RegA                ; Load the A register
E8B6 F6EF57           (      monitor.asm):00720 (4)     1639        ldb     RegB                ; Load the B register
E8B9 11B6EF58         (      monitor.asm):00721 (5)     1644        lde     RegE                ; Load the E register
E8BD 11F6EF59         (      monitor.asm):00722 (5)     1649        ldf     RegF                ; Load the F register
E8C1 BEEF5A           (      monitor.asm):00723 (5)     1654        ldx     RegX                ; Load the X register
E8C4 10BEEF5C         (      monitor.asm):00724 (6)     1660        ldy     RegY                ; Load the Y register
E8C8 FEEF5E           (      monitor.asm):00725 (5)     1665        ldu     RegU                ; Load the user stack
E8CB 3581             (      monitor.asm):00726 (4+3)   1672        puls    CC,PC
                      (      monitor.asm):00727                 
                      (      monitor.asm):00728                 ;  ____                  
                      (      monitor.asm):00729                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):00730                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):00731                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):00732                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):00733                 ;
                      (      monitor.asm):00734                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):00735                 ; -------------------------------------------------
                      (      monitor.asm):00736                 ; Input:    X = Command line string
                      (      monitor.asm):00737                 
E8CD                  (      monitor.asm):00738                 Run:
E8CD BDE92D           (      monitor.asm):00739 (7)     1679        jsr     SkipSpaces          ; Removes possible leading spaces
E8D0 A684             (      monitor.asm):00740 (4+0)   1683        lda     ,X                  ; Read character from command line
E8D2 2708             (      monitor.asm):00741 (3)     1686        beq     RunValidate         ; Use current address
E8D4                  (      monitor.asm):00742                 RunGetAddress:
E8D4 BDE27E           (      monitor.asm):00743 (7)     1693        jsr     GetStrWord          ; Get address from the input buffer
E8D7 2413             (      monitor.asm):00744 (3)     1696        bcc     RunError            ; Invalid address, then print error
E8D9 FDEF50           (      monitor.asm):00745 (5)     1701        std     CurrAddress         ; Save address to memory
E8DC                  (      monitor.asm):00746                 RunValidate:
E8DC A69FEF50         (      monitor.asm):00747 (4+5)   1710        lda     [CurrAddress]       ; Load byte at specified address
E8E0 270D             (      monitor.asm):00748 (3)     1713        beq     RunEnd              ; If it's zero, then don't try to execute code
E8E2                  (      monitor.asm):00749                 RunExecute:
E8E2 7CEF53           (      monitor.asm):00750 (6)     1719        inc     RunFlag             ; Make run flag non zero
E8E5 BDE8AE           (      monitor.asm):00751 (7)     1726        jsr     PullRegisters       ; Restore registers from previous command
E8E8 6E9FEF50         (      monitor.asm):00752 (3+5)   1734        jmp     [CurrAddress]       ; Execute code at specified address
E8EC                  (      monitor.asm):00753                 RunError:
E8EC BDE4A1           (      monitor.asm):00754 (7)     1741        jsr     ErrInvalidAddress   ; If there's an error in the address, print it
E8EF                  (      monitor.asm):00755                 RunEnd:
E8EF 39               (      monitor.asm):00756 (4)     1745        rts
                      (      monitor.asm):00757                 
                      (      monitor.asm):00758                 ;  ____           _        _          _       _                           
                      (      monitor.asm):00759                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):00760                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):00761                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):00762                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):00763                 ;
                      (      monitor.asm):00764                 ; Sets the current address
                      (      monitor.asm):00765                 ; ========================
                      (      monitor.asm):00766                 ; Input:    X = Command line string
                      (      monitor.asm):00767                 
E8F0                  (      monitor.asm):00768                 SetAddress:
E8F0 3407             (      monitor.asm):00769 (4+3)   1752        pshs    A,B,CC
E8F2 BDE92D           (      monitor.asm):00770 (7)     1759        jsr     SkipSpaces          ; Remove leading spaces
E8F5 A684             (      monitor.asm):00771 (4+0)   1763        lda     ,X                  ; Load first character
E8F7 270F             (      monitor.asm):00772 (3)     1766        beq     SetAddressDefault   ; Is it the end of the string?
E8F9 BDE27E           (      monitor.asm):00773 (7)     1773        jsr     GetStrWord          ; Get address from the input buffer
E8FC 2405             (      monitor.asm):00774 (3)     1776        bcc     SetAddressError     ; Error in address
E8FE FDEF50           (      monitor.asm):00775 (5)     1781        std     CurrAddress         ; Save the address
E901 200B             (      monitor.asm):00776 (3)     1784        bra     SetAddressEnd
E903                  (      monitor.asm):00777                 SetAddressError:
E903 BDE4A1           (      monitor.asm):00778 (7)     1791        jsr     ErrInvalidAddress   ; Display address error
E906 2006             (      monitor.asm):00779 (3)     1794        bra     SetAddressEnd
E908                  (      monitor.asm):00780                 SetAddressDefault:
E908 CC0000           (      monitor.asm):00781 (3)     1797        ldd     #$0000
E90B FDEF50           (      monitor.asm):00782 (5)     1802        std     CurrAddress         ; Set default address to $0000
E90E                  (      monitor.asm):00783                 SetAddressEnd:
E90E 3587             (      monitor.asm):00784 (4+5)   1811        puls    A,B,CC,PC
                      (      monitor.asm):00785                 
                      (      monitor.asm):00786                 ;  ____           _     ____                    _    
                      (      monitor.asm):00787                 ; / ___|    ___  | |_  | __ )    __ _   _ __   | | __
                      (      monitor.asm):00788                 ; \___ \   / _ \ | __| |  _ \   / _` | | '_ \  | |/ /
                      (      monitor.asm):00789                 ;  ___) | |  __/ | |_  | |_) | | (_| | | | | | |   < 
                      (      monitor.asm):00790                 ; |____/   \___|  \__| |____/   \__,_| |_| |_| |_|\_\
                      (      monitor.asm):00791                 ;
                      (      monitor.asm):00792                 ; Sets the current bank
                      (      monitor.asm):00793                 ; =====================
                      (      monitor.asm):00794                 ; Input:    X = Command line string
                      (      monitor.asm):00795                 
E910                  (      monitor.asm):00796                 SetBank:
E910 3403             (      monitor.asm):00797 (4+2)   1817        pshs    A,CC
E912 BDE92D           (      monitor.asm):00798 (7)     1824        jsr     SkipSpaces          ; Remove leading spaces
E915 A684             (      monitor.asm):00799 (4+0)   1828        lda     ,X                  ; Load first character
E917 270F             (      monitor.asm):00800 (3)     1831        beq     SetBankDefault      ; Is it the end of the string?
E919 BDE1E9           (      monitor.asm):00801 (7)     1838        jsr     GetStrByte          ; Get bank from the input buffer
E91C 2405             (      monitor.asm):00802 (3)     1841        bcc     SetBankError        ; Error in byte
E91E B7EF52           (      monitor.asm):00803 (4)     1845        sta     CurrBank            ; Save the bank
E921 2008             (      monitor.asm):00804 (3)     1848        bra     SetBankEnd
E923                  (      monitor.asm):00805                 SetBankError:
E923 BDE4AE           (      monitor.asm):00806 (7)     1855        jsr     ErrInvalidByte      ; Display byte error
E926 2003             (      monitor.asm):00807 (3)     1858        bra     SetBankEnd
E928                  (      monitor.asm):00808                 SetBankDefault:
E928 7FEF52           (      monitor.asm):00809 (6)     1864        clr     CurrBank            ; Set default bank to $00
E92B                  (      monitor.asm):00810                 SetBankEnd:
E92B 3583             (      monitor.asm):00811 (4+4)   1872        puls    A,CC,PC
                      (      monitor.asm):00812                 
                      (      monitor.asm):00813                 ;  ____    _      _           ____                                      
                      (      monitor.asm):00814                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):00815                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):00816                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):00817                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):00818                 ;                    |_|             |_|
                      (      monitor.asm):00819                 ;
                      (      monitor.asm):00820                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):00821                 ; ================================================================================
                      (      monitor.asm):00822                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):00823                 ; Output:   X = New position of pointer
                      (      monitor.asm):00824                 
                      (      monitor.asm):00825                     PRAGMA cc
                      (      monitor.asm):00826                 
E92D                  (      monitor.asm):00827                 SkipSpaces:
E92D 3403             (      monitor.asm):00828 (4+2)   6           pshs    A,CC
E92F                  (      monitor.asm):00829                 SkipSpacesLoop:
E92F A684             (      monitor.asm):00830 (4+0)   10          lda     ,X                  ; Load character from string
E931 270B             (      monitor.asm):00831 (3)     13          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
E933 8120             (      monitor.asm):00832 (2)     15          cmpa    #' '                ; Is it a space?
E935 2607             (      monitor.asm):00833 (3)     18          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
E937 3001             (      monitor.asm):00834 (4+1)   23          leax    1,X                 ; Increment index for next character
E939 7CEF4F           (      monitor.asm):00835 (6)     29          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
E93C 20F1             (      monitor.asm):00836 (3)     32          bra     SkipSpacesLoop      ; Go and read another character
E93E                  (      monitor.asm):00837                 SkipSpacesEnd:
E93E 3583             (      monitor.asm):00838 (4+4)   40          puls    A,CC,PC
                      (         main.asm):00186                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
E940                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
E940 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
E968 0D0A             (         data.asm):00009                     .db     CR,LF
E96A 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
E992 0D0A             (         data.asm):00011                     .db     CR,LF
E994 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
E9B7 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
E9BA 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
E9DD 0D0A0A00         (         data.asm):00015                     .db     CR,LF,LF,NULL
E9E1 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
E9ED 0D0A00           (         data.asm):00017                     .db     CR,LF,NULL
E9F0 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
EA10 0D0A             (         data.asm):00019                     .db     CR,LF
EA12 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
EA3A 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
EA3E                  (         data.asm):00023                 CmdList:
EA3E 41444452         (         data.asm):00024                     .str    "ADDR"
EA42 FF               (         data.asm):00025                     .db     EOD
EA43 E8F0             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
EA45 42414E4B         (         data.asm):00027                     .str    "BANK"
EA49 FF               (         data.asm):00028                     .db     EOD
EA4A E910             (         data.asm):00029                     .dw     SetBank             ; Run code at current or specified address
EA4C 44494147         (         data.asm):00030                     .str    "DIAG"
EA50 FF               (         data.asm):00031                     .db     EOD
EA51 E567             (         data.asm):00032                     .dw     Diagnostics         ; Display content of memory
EA53 44554D50         (         data.asm):00033                     .str    "DUMP"
EA57 FF               (         data.asm):00034                     .db     EOD
EA58 E5CD             (         data.asm):00035                     .dw     Dump                ; Display content of memory
EA5A 48454C50         (         data.asm):00036                     .str    "HELP"
EA5E FF               (         data.asm):00037                     .db     EOD
EA5F E4EF             (         data.asm):00038                     .dw     CmdHelp             ; Help for various commands
EA61 4C4F4144         (         data.asm):00039                     .str    "LOAD"
EA65 FF               (         data.asm):00040                     .db     EOD
EA66 E631             (         data.asm):00041                     .dw     LoadIntelHex        ; Upload Intel Hex code
EA68 4D4150           (         data.asm):00042                     .str    "MAP"
EA6B FF               (         data.asm):00043                     .db     EOD
EA6C E706             (         data.asm):00044                     .dw     MemoryMap           ; Memory map of LogicSpark-09
EA6E 5045454B         (         data.asm):00045                     .str    "PEEK"
EA72 FF               (         data.asm):00046                     .db     EOD
EA73 E721             (         data.asm):00047                     .dw     Peek                ; Read a byte of memory
EA75 504F4B45         (         data.asm):00048                     .str    "POKE"
EA79 FF               (         data.asm):00049                     .db     EOD
EA7A E74B             (         data.asm):00050                     .dw     Poke                ; Write a byte of memory
EA7C 524547           (         data.asm):00051                     .str    "REG"
EA7F FF               (         data.asm):00052                     .db     EOD
EA80 E78B             (         data.asm):00053                     .dw     PrintRegisters      ; Print registers
EA82 52554E           (         data.asm):00054                     .str    "RUN"
EA85 FF               (         data.asm):00055                     .db     EOD
EA86 E8CD             (         data.asm):00056                     .dw     Run                 ; Run code at current or specified address
EA88 00               (         data.asm):00057                     .db     NULL
                      (         data.asm):00058                 
EA89                  (         data.asm):00059                 CmdHelpMsg: ;                                        *                       *               *
EA89 4C697374206F6620 (         data.asm):00060                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
EAA0 0D0A             (         data.asm):00061                     .db     CR,LF
EAA2 20202D2041444452 (         data.asm):00062                     .str    "  - ADDR: Set current address"
     3A20536574206375
     7272656E74206164
     6472657373
EABF 0D0A             (         data.asm):00063                     .db     CR,LF
EAC1 20202D2042414E4B (         data.asm):00064                     .str    "  - BANK: Set current bank"
     3A20536574206375
     7272656E74206261
     6E6B
EADB 0D0A             (         data.asm):00065                     .db     CR,LF
EADD 20202D2044494147 (         data.asm):00066                     .str    "  - DIAG: Diagnostics"
     3A20446961676E6F
     7374696373
EAF2 0D0A             (         data.asm):00067                     .db     CR,LF
EAF4 20202D2044554D50 (         data.asm):00068                     .str    "  - DUMP: Display memory content"
     3A20446973706C61
     79206D656D6F7279
     20636F6E74656E74
EB14 0D0A             (         data.asm):00069                     .db     CR,LF
EB16 20202D2048454C50 (         data.asm):00070                     .str    "  - HELP: This help screen"
     3A20546869732068
     656C702073637265
     656E
EB30 0D0A             (         data.asm):00071                     .db     CR,LF
EB32 20202D204C4F4144 (         data.asm):00072                     .str    "  - LOAD: Load Intel Hex from console"
     3A204C6F61642049
     6E74656C20486578
     2066726F6D20636F
     6E736F6C65
EB57 0D0A             (         data.asm):00073                     .db     CR,LF
EB59 20202D204D41503A (         data.asm):00074                     .str    "  - MAP: Memory and I/O map of system"
     204D656D6F727920
     616E6420492F4F20
     6D6170206F662073
     797374656D
EB7E 0D0A             (         data.asm):00075                     .db     CR,LF
EB80 20202D205045454B (         data.asm):00076                     .str    "  - PEEK: Read a byte of memory"
     3A20526561642061
     2062797465206F66
     206D656D6F7279
EB9F 0D0A             (         data.asm):00077                     .db     CR,LF
EBA1 20202D20504F4B45 (         data.asm):00078                     .str    "  - POKE: Write a byte into memory"
     3A20577269746520
     6120627974652069
     6E746F206D656D6F
     7279
EBC3 0D0A             (         data.asm):00079                     .db     CR,LF
EBC5 20202D205245473A (         data.asm):00080                     .str    "  - REG: Print the registers content"
     205072696E742074
     6865207265676973
     7465727320636F6E
     74656E74
EBE9 0D0A             (         data.asm):00081                     .db     CR,LF
EBEB 20202D2052554E3A (         data.asm):00082                     .str    "  - RUN: Execute code"
     2045786563757465
     20636F6465
EC00 0D0A00           (         data.asm):00083                     .db     CR,LF,NULL
                      (         data.asm):00084                 
EC03                  (         data.asm):00085                 DiagMessage:
EC03 446961676E6F7374 (         data.asm):00086                     .str    "Diagnostics"
     696373
EC0E 0D0A00           (         data.asm):00087                     .db     CR,LF,NULL
                      (         data.asm):00088                 
EC11                  (         data.asm):00089                 DiagTestingMsg:
EC11 202054657374696E (         data.asm):00090                     .str    "  Testing Base RAM: "
     6720426173652052
     414D3A20
EC25 00               (         data.asm):00091                     .db     NULL
                      (         data.asm):00092                 
EC26                  (         data.asm):00093                 DiagPassMsg:
EC26 50617373         (         data.asm):00094                     .str    "Pass"
EC2A 0D0A00           (         data.asm):00095                     .db     CR,LF,NULL
                      (         data.asm):00096                 
EC2D                  (         data.asm):00097                 DiagFailMsg:
EC2D 4661696C2C20     (         data.asm):00098                     .str    "Fail, "
EC33 00               (         data.asm):00099                     .db     NULL
EC34 206572726F7273   (         data.asm):00100                     .str    " errors"
EC3B 0D0A00           (         data.asm):00101                     .db     CR,LF,NULL
                      (         data.asm):00102                     
EC3E                  (         data.asm):00103                 ErrInvalidAddrMsg:
EC3E 496E76616C696420 (         data.asm):00104                     .str    "Invalid address!"
     6164647265737321
EC4E 0D0A00           (         data.asm):00105                     .db     CR,LF,NULL
                      (         data.asm):00106                 
EC51                  (         data.asm):00107                 ErrInvalidByteMsg:
EC51 496E76616C696420 (         data.asm):00108                     .str    "Invalid byte!"
     6279746521
EC5E 0D0A00           (         data.asm):00109                     .db     CR,LF,NULL
                      (         data.asm):00110                 
EC61                  (         data.asm):00111                 ErrInvalidParamMsg:
EC61 496E76616C696420 (         data.asm):00112                     .str    "Invalid parameter!"
     706172616D657465
     7221
EC73 0D0A00           (         data.asm):00113                     .db     CR,LF,NULL
                      (         data.asm):00114                 
EC76                  (         data.asm):00115                 ErrNoParameterMsg:
EC76 4E6F20706172616D (         data.asm):00116                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
EC91 0D0A00           (         data.asm):00117                     .db     CR,LF,NULL
                      (         data.asm):00118                 
EC94                  (         data.asm):00119                 ErrInvalidCmdMsg:
EC94 496E76616C696420 (         data.asm):00120                     .str    "Invalid command!"
     636F6D6D616E6421
ECA4 0D0A00           (         data.asm):00121                     .db     CR,LF,NULL
                      (         data.asm):00122                 
ECA7                  (         data.asm):00123                 ErrSyntaxErrorMsg:
ECA7 53796E7461782065 (         data.asm):00124                     .str    "Syntax error!"
     72726F7221
ECB4 0D0A00           (         data.asm):00125                     .db     CR,LF,NULL
                      (         data.asm):00126                     
ECB7                  (         data.asm):00127                 LoadStartMsg:
ECB7 4C6F616420363330 (         data.asm):00128                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
ECD9 0D0A             (         data.asm):00129                     .db     CR,LF
ECDB 5072657373204553 (         data.asm):00130                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
ECEF 0D0A00           (         data.asm):00131                     .db     CR,LF,NULL
                      (         data.asm):00132                 
ECF2                  (         data.asm):00133                 LoadUserAbortErr:
ECF2 5472616E73666572 (         data.asm):00134                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
ED0A 0D0A00           (         data.asm):00135                     .db     CR,LF,NULL
                      (         data.asm):00136                 
ED0D                  (         data.asm):00137                 LoadRecordErr:
ED0D 556E6B6E6F776E20 (         data.asm):00138                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
ED22 00               (         data.asm):00139                     .db     NULL
                      (         data.asm):00140                 
ED23                  (         data.asm):00141                 LoadFailedErr:
ED23 446F776E6C6F6164 (         data.asm):00142                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
ED48 0D0A00           (         data.asm):00143                     .db     CR,LF,NULL
                      (         data.asm):00144                 
ED4B                  (         data.asm):00145                 LoadSuccessMsg:
ED4B 446F776E6C6F6164 (         data.asm):00146                     .str    "Download Successful"
     2053756363657373
     66756C
ED5E 0D0A00           (         data.asm):00147                     .db     CR,LF,NULL
                      (         data.asm):00148                 
ED61                  (         data.asm):00149                 MemoryMapMsg:
                      (         data.asm):00150                     ; Memory Map:
ED61 4D656D6F7279204D (         data.asm):00151                     .str    "Memory Map:"
     61703A
ED6C 0D0A             (         data.asm):00152                     .db     CR,LF
ED6E 202052414D3A2020 (         data.asm):00153                     .str    "  RAM:       $0000-$"
     2020202020243030
     30302D24
ED82 000D0A           (         data.asm):00154                     .db     NULL,CR,LF
ED85 2020524F4D3A2020 (         data.asm):00155                     .str    "  ROM:       $"
     202020202024
ED93 00               (         data.asm):00156                     .db     NULL
ED94 2D2446444646     (         data.asm):00157                     .str    "-$FDFF"
ED9A 0D0A             (         data.asm):00158                     .db     CR,LF
ED9C 2020436F6E737420 (         data.asm):00159                     .str    "  Const RAM: $FE00-$FEFF"
     52414D3A20244645
     30302D2446454646
EDB4 0D0A             (         data.asm):00160                     .db     CR,LF
EDB6 2020492F4F207261 (         data.asm):00161                     .str    "  I/O range: $FF00-$FFEF"
     6E67653A20244646
     30302D2446464546
EDCE 0D0A             (         data.asm):00162                     .db     CR,LF
EDD0 2020566563746F72 (         data.asm):00163                     .str    "  Vectors:   $FFF0-$FFFF"
     733A202020244646
     46302D2446464646
EDE8 0D0A             (         data.asm):00164                     .db     CR,LF
EDEA 492F4F204D61703A (         data.asm):00165                     .str    "I/O Map:"
EDF2 0D0A             (         data.asm):00166                     .db     CR,LF
EDF4 2020524F4D204469 (         data.asm):00167                     .str    "  ROM Dissable: $FF08 (W)"
     737361626C653A20
     2446463038202857
     29
EE0D 0D0A             (         data.asm):00168                     .db     CR,LF
EE0F 2020496E742E2056 (         data.asm):00169                     .str    "  Int. Vector:  $FF09 (R)"
     6563746F723A2020
     2446463039202852
     29
EE28 0D0A             (         data.asm):00170                     .db     CR,LF
EE2A 2020414349413120 (         data.asm):00171                     .str    "  ACIA1 (USB):  $FF68-$FF6B"
     28555342293A2020
     24464636382D2446
     463642
EE45 0D0A00           (         data.asm):00172                     .db     CR,LF,NULL
                      (         main.asm):00187                 
                      (         main.asm):00188                 ;  ___           _                                          _         
                      (         main.asm):00189                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00190                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00191                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00192                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00193                 ;                                                  |_|
                      (         main.asm):00194                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00195                 
                      (         main.asm):00196                     PRAGMA cc
                      (         main.asm):00197                     
EE48                  (         main.asm):00198                 IllegalDiv0:
EE48 3B               (         main.asm):00199 (17+?)  17          rti
                      (         main.asm):00200                     
                      (         main.asm):00201                     PRAGMA cc
                      (         main.asm):00202                 
EE49                  (         main.asm):00203                 SoftInt3:
EE49 3B               (         main.asm):00204 (17+?)  17          rti
                      (         main.asm):00205                     
                      (         main.asm):00206                     PRAGMA cc
                      (         main.asm):00207                 
EE4A                  (         main.asm):00208                 SoftInt2:
EE4A 3B               (         main.asm):00209 (17+?)  17          rti
                      (         main.asm):00210                     
                      (         main.asm):00211                     PRAGMA cc
                      (         main.asm):00212                 
EE4B                  (         main.asm):00213                 SoftInt1:
EE4B 3B               (         main.asm):00214 (17+?)  17          rti
                      (         main.asm):00215                     
                      (         main.asm):00216                     PRAGMA cc
                      (         main.asm):00217                 
EE4C                  (         main.asm):00218                 FIRQInt:
EE4C 3B               (         main.asm):00219 (17+?)  17          rti
                      (         main.asm):00220                 
                      (         main.asm):00221                     PRAGMA cc
                      (         main.asm):00222                 
EE4D                  (         main.asm):00223                 IRQInt:
EE4D 3B               (         main.asm):00224 (17+?)  17          rti
                      (         main.asm):00225                 
                      (         main.asm):00226                     PRAGMA cc
                      (         main.asm):00227                 
EE4E                  (         main.asm):00228                 NMIInt:
EE4E 3B               (         main.asm):00229 (17+?)  17          rti
                      (         main.asm):00230                 
                      (         main.asm):00231                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00232                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00233                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00234                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00235                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00236                 ;          |___/
                      (         main.asm):00237                 ;
                      (         main.asm):00238                 ; System variables used by monitor subroutines
                      (         main.asm):00239                 ; ============================================
                      (         main.asm):00240                 
EE4F                  (         main.asm):00241                 InStrBuffer:    .DS     $100    ; String input for console input
EF4F                  (         main.asm):00242                 CmdErrorPtr:    .DS     1       ; Command prompt error pointer
EF50                  (         main.asm):00243                 CurrAddress:    .DS     2       ; Current address, useful for monitor actions
EF52                  (         main.asm):00244                 CurrBank:       .DS     1       ; Current bank number, relative to current address
EF53                  (         main.asm):00245                 RunFlag         .DS     1       ; Run flag to indicate registers should be saved or not
EF54                  (         main.asm):00246                 RegCC:          .DS     1       ; Register CC
EF55                  (         main.asm):00247                 RegDP:          .DS     1       ; Register DP
EF56                  (         main.asm):00248                 RegA:           .DS     1       ; Register A
EF57                  (         main.asm):00249                 RegB:           .DS     1       ; Register B
EF58                  (         main.asm):00250                 RegE:           .DS     1       ; Register E
EF59                  (         main.asm):00251                 RegF:           .DS     1       ; Register F
EF5A                  (         main.asm):00252                 RegX:           .DS     2       ; Register X
EF5C                  (         main.asm):00253                 RegY:           .DS     2       ; Register Y
EF5E                  (         main.asm):00254                 RegU:           .DS     2       ; User stack
EF60                  (         main.asm):00255                 RegS:           .DS     2       ; System stack
EF62                  (         main.asm):00256                 RegPC:          .DS     2       ; Register PC
EF64                  (         main.asm):00257                 TempByte:       .DS     1       ; Temporary storage byte (8-bit)
EF65                  (         main.asm):00258                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
EF65                  (         main.asm):00259                 TempW1:         .DS     1       ; Word MSB
EF66                  (         main.asm):00260                 TempW2:         .DS     1       ; Word LSB
EF67                  (         main.asm):00261                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
EF67                  (         main.asm):00262                 TempQ1:         .DS     1       ; Quad High MSB
EF68                  (         main.asm):00263                 TempQ2:         .DS     1       ; Quad Low MSB
EF69                  (         main.asm):00264                 TempQ3:         .DS     1       ; Quad High LSB
EF6A                  (         main.asm):00265                 TempQ4:         .DS     1       ; Quad Low LSB
EF6B                  (         main.asm):00266                 VarEnd:
                      (         main.asm):00267                 
EF6B 5353535353535353 (         main.asm):00268                     FILL 'S',JmpStart-VarEnd    ; Clear area with $00
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353
                      (         main.asm):00269                 
                      (         main.asm):00270                 ;      _                             
                      (         main.asm):00271                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00272                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00273                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00274                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00275                 ;                             |_|    
                      (         main.asm):00276                 ;
                      (         main.asm):00277                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00278                 ; =======================================================
                      (         main.asm):00279                 
                      (         main.asm):00280                     ORG $FD00
                      (         main.asm):00281                 
FD00                  (         main.asm):00282                 JmpStart:
FD00 E161             (         main.asm):00283                 JmpCls:             .DW     Cls
FD02 E1D3             (         main.asm):00284                 JmpDelChar:         .DW     DelChar
FD04 E1E9             (         main.asm):00285                 JmpGetStrByte:      .DW     GetStrByte
FD06 E258             (         main.asm):00286                 JmpGetStrNibble:    .DW     GetStrNibble
FD08 E27E             (         main.asm):00287                 JmpGetStrWord:      .DW     GetStrWord
FD0A E2ED             (         main.asm):00288                 JmpInByte:          .DW     InByte
FD0C E1AA             (         main.asm):00289                 JmpInChar:          .DW     InChar
FD0E E1B5             (         main.asm):00290                 JmpInCharNW:        .DW     InCharNW
FD10 E2FE             (         main.asm):00291                 JmpInStr:           .DW     InStr
FD12 E36D             (         main.asm):00292                 JmpInWord:          .DW     InWord
FD14 E1C4             (         main.asm):00293                 JmpOutChar:         .DW     OutChar
FD16 E3BC             (         main.asm):00294                 JmpOutByte:         .DW     OutByte
FD18 E3DE             (         main.asm):00295                 JmpOutCRLF:         .DW     OutCRLF
FD1A E3EC             (         main.asm):00296                 JmpOutNibble:       .DW     OutNibble
FD1C E404             (         main.asm):00297                 JmpOutStr:          .DW     OutStr
FD1E E42F             (         main.asm):00298                 JmpOutWord:         .DW     OutWord
FD20 E08F             (         main.asm):00299                 JmpAscToBinNibble:  .DW     AscToBinNibble
FD22 E0A2             (         main.asm):00300                 JmpAscToBinByte:    .DW     AscToBinByte
FD24 E0B8             (         main.asm):00301                 JmpAscToBinWord:    .DW     AscToBinWord
FD26 E0CA             (         main.asm):00302                 JmpBinToAscNibble:  .DW     BinToAscNibble
FD28 E0DA             (         main.asm):00303                 JmpBinToAscByte:    .DW     BinToAscByte
FD2A E0F6             (         main.asm):00304                 JmpBinToAscWord:    .DW     BinToAscWord
FD2C E107             (         main.asm):00305                 JmpBinToBcd:        .DW     BinToBcd
FD2E E153             (         main.asm):00306                 JmpUpperCase:       .DW     UpperCase
FD30 E38C             (         main.asm):00307                 JmpOutBcd:          .DW     OutBcd
FD32                  (         main.asm):00308                 JmpTableEnd:
                      (         main.asm):00309                 
FD32 4A4A4A4A4A4A4A4A (         main.asm):00310                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A
                      (         main.asm):00311                 
                      (         main.asm):00312                 ;   ____                         _                     _   
                      (         main.asm):00313                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00314                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00315                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00316                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00317                 ;
                      (         main.asm):00318                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00319                 ; =====================================================================
                      (         main.asm):00320                 
                      (         main.asm):00321                     PRAGMA cc
                      (         main.asm):00322                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00323                     
FE00                  (         main.asm):00324                 ConstRAM:
FE00                  (         main.asm):00325                     .DS     256                 
                      (         main.asm):00326                 
                      (         main.asm):00327                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00328                 
FF00                  (         main.asm):00329                 InputOutputRange:
FF00                  (         main.asm):00330                     .DS     240
                      (         main.asm):00331                 
                      (         main.asm):00332                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00333                 
FFF0                  (         main.asm):00334                 Vectors:
FFF0 EE48             (         main.asm):00335                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 EE49             (         main.asm):00336                     .DW     SoftInt3            ; SWI3
FFF4 EE4A             (         main.asm):00337                     .DW     SoftInt2            ; SWI2
FFF6 EE4B             (         main.asm):00338                     .DW     SoftInt1            ; SWI
FFF8 EE4C             (         main.asm):00339                     .DW     FIRQInt             ; FIRQ
FFFA EE4D             (         main.asm):00340                     .DW     IRQInt              ; IRQ
FFFC EE4E             (         main.asm):00341                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00342                     .DW     Reset               ; RESET
                      (         main.asm):00343                 
                      (         main.asm):00344                     END

Symbol Table:
[ G] AscToBinByte                     E0A2
[ G] AscToBinNibble                   E08F
[ G] AscToBinNibbleAlpha              E09C
[ G] AscToBinNibbleEnd                E09E
[ G] AscToBinWord                     E0B8
[ G] BinToAscByte                     E0DA
[ G] BinToAscNibble                   E0CA
[ G] BinToAscNibbleAlpha              E0D6
[ G] BinToAscNibbleEnd                E0D8
[ G] BinToAscWord                     E0F6
[ G] BinToBcd                         E107
[ G] BootMsg                          E940
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E161
[ G] CmdErrorPtr                      EF4F
[ G] CmdHelp                          E4EF
[ G] CmdHelpMsg                       EA89
[ G] CmdList                          EA3E
[ G] CmdParse                         E4F6
[ G] CmdParseChar                     E506
[ G] CmdParseEnd                      E543
[ G] CmdParseExecute                  E533
[ G] CmdParseNone                     E540
[ G] CmdParseSkip                     E519
[ G] CmdParseSkipLoop                 E51F
[ G] CmdParseValid                    E52B
[ G] CmdPrompt                        E545
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E197
[ G] Com1RxNoWait                     E1B5
[ G] Com1RxNoWaitEnd                  E1C3
[ G] Com1RxWait                       E1AA
[ G] Com1Tx                           E1C4
[ G] Com1TxNotReady                   E1C6
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      EF50
[ G] CurrBank                         EF52
[ G] DelChar                          E1D3
[ G] DelCharLoop                      E1D7
[ G] DiagBase                         E56D
[ G] DiagBaseEnd                      E5A3
[ G] DiagBaseLoop                     E57C
[ G] DiagBaseOK                       E59D
[ G] DiagCellEnd                      E5CC
[ G] DiagCellPattern                  E5C1
[ G] DiagFailMsg                      EC2D
[ G] DiagMessage                      EC03
[ G] Diagnostics                      E567
[ G] DiagPassMsg                      EC26
[ G] DiagTest                         E5A4
[ G] DiagTestingMsg                   EC11
[ G] Dump                             E5CD
[ G] DumpAddr                         E5E4
[ G] DumpByte                         E5F5
[ G] DumpChar                         E60E
[ G] DumpCharDot                      E619
[ G] DumpCharPrint                    E61B
[ G] DumpDisplay                      E5DC
[ G] DumpEnd                          E630
[ G] DumpInvalidAddress               E62D
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E4A1
[ G] ErrInvalidAddrMsg                EC3E
[ G] ErrInvalidByte                   E4AE
[ G] ErrInvalidByteMsg                EC51
[ G] ErrInvalidCmdMsg                 EC94
[ G] ErrInvalidCommand                E4BB
[ G] ErrInvalidParameter              E4C8
[ G] ErrInvalidParamMsg               EC61
[ G] ErrNoParameter                   E4D5
[ G] ErrNoParameterMsg                EC76
[ G] ErrorPointerLoop                 E48F
[ G] ErrPointer                       E488
[ G] ErrSyntaxError                   E4E2
[ G] ErrSyntaxErrorMsg                ECA7
[ G] ESC                              001B
[ G] FIRQInt                          EE4C
[ G] GetStrByte                       E1E9
[ G] GetStrByteCount                  E1F2
[ G] GetStrByteEnd                    E237
[ G] GetStrByteError                  E235
[ G] GetStrByteFixed                  E23B
[ G] GetStrByteFixedEnd               E256
[ G] GetStrByteFixedErr               E254
[ G] GetStrByteGood                   E231
[ G] GetStrByteParse                  E1FD
[ G] GetStrByteParse2                 E20E
[ G] GetStrByteParseMore              E227
[ G] GetStrNibble                     E258
[ G] GetStrNibbleEnd                  E278
[ G] GetStrNibbleError                E26F
[ G] GetStrNibbleGood                 E273
[ G] GetStrWord                       E27E
[ G] GetStrWordCount                  E285
[ G] GetStrWordEnd                    E2EA
[ G] GetStrWordError                  E2E8
[ G] GetStrWordGood                   E2E2
[ G] GetStrWordParse                  E290
[ G] GetStrWordParse2                 E2A3
[ G] GetStrWordParse3                 E2B0
[ G] GetStrWordParse4                 E2C4
[ G] GetStrWordParseMore              E2D8
[ G] IllegalDiv0                      EE48
[ G] InByte                           E2ED
[ G] InChar                           E1AA
[ G] InCharNW                         E1B5
[ G] Init                             E000
[ G] InputOutputRange                 FF00
[ G] InStr                            E2FE
[ G] InStrBackspace                   E31E
[ G] InStrBuffer                      EE4F
[ G] InStrClearCarry                  E367
[ G] InStrEnd                         E369
[ G] InStrEscape                      E335
[ G] InStrPrintCR                     E357
[ G] InStrReadChar                    E308
[ G] InStrStoreChar                   E34E
[ G] IntVector                        FF09
[ G] InWord                           E36D
[ G] IRQInt                           EE4D
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutBcd                        FD30
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD32
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E6D8
[ G] LoadChecksum                     E6A5
[ G] LoadData                         E695
[ G] LoadEnd                          E702
[ G] LoadEOF                          E6C4
[ G] LoadFailedErr                    ED23
[ G] LoadFailure                      E6B9
[ G] LoadIntelHex                     E631
[ G] LoadRecord                       E63D
[ G] LoadRecordErr                    ED0D
[ G] LoadRecordType                   E678
[ G] LoadStart                        E64D
[ G] LoadStartMsg                     ECB7
[ G] LoadSuccess                      E6E8
[ G] LoadSuccessMsg                   ED4B
[ G] LoadUserAbortErr                 ECF2
[ G] Main                             E06A
[ G] MainRunExec                      E085
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E706
[ G] MemoryMapMsg                     ED61
[ G] NMIInt                           EE4E
[ G] NULL                             0000
[ G] OutBcd                           E38C
[ G] OutBcdSub                        E3A2
[ G] OutBcdSubEnd                     E3BB
[ G] OutBcdSubLSB                     E3AE
[ G] OutBcdSubLSB2                    E3B8
[ G] OutByte                          E3BC
[ G] OutByteDigit1NLZ                 E3D7
[ G] OutByteLZ                        E3BC
[ G] OutByteNLZ                       E3CB
[ G] OutChar                          E1C4
[ G] OutCRLF                          E3DE
[ G] OutNibble                        E3EC
[ G] OutNibbleLSB                     E3EC
[ G] OutNibbleMSB                     E3F6
[ G] OutStr                           E404
[ G] OutStrEnd                        E413
[ G] OutStrLoop                       E406
[ G] OutStrLZ                         E404
[ G] OutStrNLZ                        E415
[ G] OutStrNLZEnd                     E42D
[ G] OutStrNLZLoop                    E418
[ G] OutStrNLZPrintChar               E426
[ G] OutWord                          E42F
[ G] OutWordNLZ                       E44C
[ G] OutWordNLZ2                      E45F
[ G] OutWordNLZ3                      E46F
[ G] OutWordNLZ4                      E47F
[ G] OutWordNLZp2                     E46A
[ G] OutWordNLZp3                     E47A
[ G] Peek                             E721
[ G] PeekDisplay                      E730
[ G] PeekEnd                          E74A
[ G] PeekInvalidAddr                  E747
[ G] Poke                             E74B
[ G] PokeEnd                          E78A
[ G] PokeInvalidAddress               E782
[ G] PokeInvalidByte                  E77D
[ G] PokeNoParameters                 E787
[ G] PrintRegisters                   E78B
[ G] PromptSize                       0009
[ G] PullRegisters                    E8AE
[ G] PushRegisters                    E87E
[ G] RegA                             EF56
[ G] RegB                             EF57
[ G] RegCC                            EF54
[ G] RegDP                            EF55
[ G] RegE                             EF58
[ G] RegF                             EF59
[ G] RegPC                            EF62
[ G] RegS                             EF60
[ G] RegU                             EF5E
[ G] RegX                             EF5A
[ G] RegY                             EF5C
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0004
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              E8CD
[ G] RunEnd                           E8EF
[ G] RunError                         E8EC
[ G] RunExecute                       E8E2
[ G] RunFlag                          EF53
[ G] RunGetAddress                    E8D4
[ G] RunValidate                      E8DC
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       E8F0
[ G] SetAddressDefault                E908
[ G] SetAddressEnd                    E90E
[ G] SetAddressError                  E903
[ G] SetBank                          E910
[ G] SetBankDefault                   E928
[ G] SetBankEnd                       E92B
[ G] SetBankError                     E923
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       E92D
[ G] SkipSpacesEnd                    E93E
[ G] SkipSpacesLoop                   E92F
[ G] SoftInt1                         EE4B
[ G] SoftInt2                         EE4A
[ G] SoftInt3                         EE49
[ G] SPACE                            0020
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TempByte                         EF64
[ G] TempQ1                           EF67
[ G] TempQ2                           EF68
[ G] TempQ3                           EF69
[ G] TempQ4                           EF6A
[ G] TempQuad                         EF67
[ G] TempW1                           EF65
[ G] TempW2                           EF66
[ G] TempWord                         EF65
[ G] UpperCase                        E153
[ G] UpperCaseEnd                     E15F
[ G] UsrStack                         FA00
[ G] VarEnd                           EF6B
[ G] Vectors                          FFF0
