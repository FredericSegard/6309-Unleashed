                      (         main.asm):00001         ;
                      (         main.asm):00002         ;         ::::::::       ::::::::       :::::::       :::::::: 
                      (         main.asm):00003         ;       :+:    :+:     :+:    :+:     :+:   :+:     :+:    :+: 
                      (         main.asm):00004         ;      +:+                   +:+     +:+   +:+     +:+    +:+  
                      (         main.asm):00005         ;     +#++:++#+          +#++:      +#+   +:+      +#++:++#+   
                      (         main.asm):00006         ;    +#+    +#+            +#+     +#+   +#+            +#+    
                      (         main.asm):00007         ;   #+#    #+#     #+#    #+#     #+#   #+#     #+#    #+#     
                      (         main.asm):00008         ;   ########       ########       #######       ########       
                      (         main.asm):00009         ;
                      (         main.asm):00010         ; ****************************************************************************************
                      (         main.asm):00011         ; * 6309 project, code named LogicSpark-09
                      (         main.asm):00012         ; *
                      (         main.asm):00013         ; * http://microhobbyist.com
                      (         main.asm):00014         ; *
                      (         main.asm):00015         ; * Copyright (C) 2024 Frédéric Segard (MicroHobbyist)
                      (         main.asm):00016         ; *
                      (         main.asm):00017         ; * This library is free software; you can redistribute it and/or modify it under the
                      (         main.asm):00018         ; * terms of the GNU Lesser General Public License as published by the Free Software
                      (         main.asm):00019         ; * Foundation. You can use all or part of the code, regardless of the version. But there
                      (         main.asm):00020         ; * is no warrenty of any kind.
                      (         main.asm):00021         ; *
                      (         main.asm):00022         ; * Reference:  ASCII text: https://www.messletters.com/en/big-text/ (alligator, standard)
                      (         main.asm):00023         ; *             Editor tab-stops set to 4
                      (         main.asm):00024         ; *             Assembler: LWASM %1.asm --6309 --raw --output=%1.bin
                      (         main.asm):00025         ; *
                      (         main.asm):00026         ; * Hardware:   CPU: HD63C09E, ROM: SST39010A (128KB Flash), RAM: AS6C4008-55 (512KB SRAM)
                      (         main.asm):00027         ; *             COM1: R65C51 (ACIA->USB-B), Priority Interrupt Encoder
                      (         main.asm):00028         ; *             Memory Management Unit to manage 2MB of SRAM
                      (         main.asm):00029         ; ****************************************************************************************
                      (         main.asm):00030         
                      (         main.asm):00031         ; Revision
                      (         main.asm):00032         ; --------
     0000             (         main.asm):00033         RevMajor    EQU $00             ; Major revision number
     0007             (         main.asm):00034         RevMinor    EQU $07             ; Minor revision number
                      (         main.asm):00035         
                      (         main.asm):00036         ; Keystrokes and delimiters
                      (         main.asm):00037         ; -------------------------
     0000             (         main.asm):00038         NULL        EQU $00             ; End delimiter
     0008             (         main.asm):00039         BS          EQU $08             ; Backspace
     0009             (         main.asm):00040         TAB         EQU $09             ; Horizontal Tab
     000D             (         main.asm):00041         CR          EQU $0D             ; Carriage return
     000A             (         main.asm):00042         LF          EQU $0A             ; Line feed
     001B             (         main.asm):00043         ESC         EQU $1B             ; Escape
     0020             (         main.asm):00044         SPACE       EQU $20             ; Space
     00FF             (         main.asm):00045         EOD         EQU $FF             ; End of data, used by some routines
                      (         main.asm):00046         
                      (         main.asm):00047         ; Misc
                      (         main.asm):00048         ; ----
     E000             (         main.asm):00049         RomStart    EQU $E000           ; Start of ROM
     1F00             (         main.asm):00050         ShadowBlk   EQU $FF00-RomStart  ; Shadow code block size to copy
     0100             (         main.asm):00051         SysSize     EQU 256             ; Size of system stack
     0100             (         main.asm):00052         UsrSize     EQU 256             ; Size of user stack
     0100             (         main.asm):00053         BlkTblSize  EQU 256             ; Size of block table for bank RAM
     FC00             (         main.asm):00054         SysStack    EQU BlockTable      ; Position system stack before block table
     FB00             (         main.asm):00055         UsrStack    EQU SysStack-SysSize ; Position user stack before system stack
     FA00             (         main.asm):00056         StackEnd    EQU UsrStack-UsrSize ; End position of stacks
     0050             (         main.asm):00057         ScrHorzRes  EQU 80              ; Default horizontal screen size
     0018             (         main.asm):00058         ScrVertRes  EQU 24              ; Default vertical screen size
     0009             (         main.asm):00059         PromptSize  EQU 2+1+4+1+1       ; Bank + ':' + Current address + '>' + space
     0046             (         main.asm):00060         MaxCmdSize  EQU ScrHorzRes-PromptSize-1 ; Command prompt max size
     0010             (         main.asm):00061         BytePerLine EQU 16              ; Dump bytes per line. If screen = 80 then 16, else 8
                      (         main.asm):00062         
                      (         main.asm):00063         ; I/O addresses
                      (         main.asm):00064         ; -------------
     FF08             (         main.asm):00065         RomDisable  EQU $FF08           ; ROM disable (poke any value)
     FF09             (         main.asm):00066         IntVector   EQU $FF09           ; Priority Interrupt Controller (reads a vector value)
     FF90             (         main.asm):00067         INIT0       EQU $FF90           ; Init 0 register (bit 6 = MMU Enable)
     FF91             (         main.asm):00068         INIT1       EQU $FF91           ; Init 1 register (bit 0 to 4 = 32 bit tasks) 
     FFA0             (         main.asm):00069         TASK0       EQU $FFA0
     FFA8             (         main.asm):00070         TASK1       EQU $FFA8
                      (         main.asm):00071         
                      (         main.asm):00072         ; ----------------------------------------------------------------------------------------
                      (         main.asm):00073         
                      (         main.asm):00074             PRAGMA cd                   ; Detailed cycle count
                      (         main.asm):00075             PRAGMA ct                   ; Cycle count running subtotal
                      (         main.asm):00076                 
                      (         main.asm):00077                     ORG $0000                   ; Start of code
                      (         main.asm):00078                 
0000                  (         main.asm):00079                 Reset:
                      (         main.asm):00080                 
0000 1A50             (         main.asm):00081 (2)     2           orcc    #$50                ; Disable interrupts, just in case
0002 113D01           (         main.asm):00082 (5)     7           ldmd    #$01                ; Begin processing in 6309 native mode
                      (         main.asm):00083                 
                      (         main.asm):00084                 ; -------------------
                      (         main.asm):00085                 ; *** SHADOW COPY ***
                      (         main.asm):00086                 ; -------------------
                      (         main.asm):00087                 ; Copies everything to RAM, except the I/O region. RAM is writable but not readable,
                      (         main.asm):00088                 ; until RomDisable has been written to, at which point ROM is disabled until reset.
                      (         main.asm):00089                 
0005                  (         main.asm):00090                 ShadowCopy:
                      (         main.asm):00091                     ; Copies everything, except the IO region and vectors ($0000-$FF00)
0005 8E0000           (         main.asm):00092 (3)     10          ldx     #$0000              ; Source address: Read only ROM
0008 108E0000         (         main.asm):00093 (4)     14          ldy     #$0000              ; Destination address: Write only RAM
000C 1086FF00         (         main.asm):00094 (4)     18          ldw     #$FF00              ; Number of bytes to copy
0010 113812           (         main.asm):00095 (6+?)   24          tfm     X+,Y+               ; Transfer data and increment pointers
                      (         main.asm):00096                     ; Skip $FF00 to $FFF0       ; I/O range
                      (         main.asm):00097                     ; Copy the vectors ($FFF0-$FFFF)
0013 8EFFF0           (         main.asm):00098 (3)     27          ldx     #$FFF0              ; Source address: Read only ROM
0016 108EFFF0         (         main.asm):00099 (4)     31          ldy     #$FFF0              ; Destination address: Write only RAM
001A 10860010         (         main.asm):00100 (4)     35          ldw     #$0010              ; Number of bytes to copy (8x 16-bit vectors)
001E 113812           (         main.asm):00101 (6+?)   41          tfm     X+,Y+               ; Transfer data and increment pointers
0021 7EE000           (         main.asm):00102 (3)     44          jmp     Init
                      (         main.asm):00103                 
0024                  (         main.asm):00104                 ShadowEnd:
0024 0000000000000000 (         main.asm):00105                     FILL $00,Init-ShadowEnd     ; Fill RAM with $00 so RUN does not execute garbage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     00000000
                      (         main.asm):00106                 
                      (         main.asm):00107                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00108                 
                      (         main.asm):00109                     PRAGMA cc
                      (         main.asm):00110                     
                      (         main.asm):00111                     ORG RomStart
                      (         main.asm):00112                 
E000                  (         main.asm):00113                 Init:
E000 B7FF08           (         main.asm):00114 (4)     4           sta     RomDisable          ; Poke any value to disable the ROM
                      (         main.asm):00115                 
                      (         main.asm):00116                     ; Clear the shadow copy code from lower RAM
E003 8E0100           (         main.asm):00117 (3)     7           ldx     #$0100              ; Source address containing saved value
E006 108E0000         (         main.asm):00118 (4)     11          ldy     #$0000              ; Destination address
E00A 10860100         (         main.asm):00119 (4)     15          ldw     #$0100              ; Number of bytes to copy (Clear page RTS)
E00E 113B12           (         main.asm):00120 (6+?)   21          tfm     X,Y+                ; Transfer data and increment pointers
                      (         main.asm):00121                 
E011                  (         main.asm):00122                 Warm:
                      (         main.asm):00123                     ; Configure the stacks
E011 CEFB00           (         main.asm):00124 (3)     24          ldu     #UsrStack           ; Set the user stack
E014 FFF44C           (         main.asm):00125 (5)     29          stu     RegU                ; Save user stack
E017 10CEFC00         (         main.asm):00126 (4)     33          lds     #SysStack           ; Sets the system stack
E01B 10FFF44E         (         main.asm):00127 (6)     39          sts     RegS                ; Save system stack
                      (         main.asm):00128                     
                      (         main.asm):00129                     ; Initialize peripherals
E01F BDE18F           (         main.asm):00130 (7)     46          jsr     Com1Init            ; Initialize ACIA1
E022 BDE9A8           (         main.asm):00131 (7)     53          jsr     MmuReset            ; Initialize MMU
                      (         main.asm):00132                     
                      (         main.asm):00133                     ; Print boot message
E025 BDE159           (         main.asm):00134 (7)     60          jsr     Cls                 ; Clears the screen
E028 8EEC2E           (         main.asm):00135 (3)     63          ldx     #BootMsg            ; Print title
E02B BDE416           (         main.asm):00136 (7)     70          jsr     OutStr              ;
E02E 8600             (         main.asm):00137 (2)     72          lda     #RevMajor           ; Print major version
E030 BDE3DD           (         main.asm):00138 (7)     79          jsr     OutByteNLZ          ;
E033 862E             (         main.asm):00139 (2)     81          lda     #'.'                ; Print dot
E035 BDE1BC           (         main.asm):00140 (7)     88          jsr     OutChar             ;
E038 CC0007           (         main.asm):00141 (3)     91          ldd     #RevMinor           ; Print minor version
E03B BDE45E           (         main.asm):00142 (7)     98          jsr     OutWordNLZ          ;
E03E BDE416           (         main.asm):00143 (7)     105         jsr     OutStr              ;
E041 CCE000           (         main.asm):00144 (3)     108         ldd     #RomStart           ; Free RAM available
E044 BDE0FF           (         main.asm):00145 (7)     115         jsr     BinToBcd            ; Convert to BCD
E047 BDE393           (         main.asm):00146 (7)     122         jsr     OutBcd
E04A BDE416           (         main.asm):00147 (7)     129         jsr     OutStr
E04D CC04A7           (         main.asm):00148 (3)     132         ldd     #StackEnd-VarEnd    ; Free shadow RAM left
E050 BDE0FF           (         main.asm):00149 (7)     139         jsr     BinToBcd            ; Convert to BCD
E053 BDE393           (         main.asm):00150 (7)     146         jsr     OutBcd
E056 BDE416           (         main.asm):00151 (7)     153         jsr     OutStr
                      (         main.asm):00152                 
                      (         main.asm):00153                     ; Clears some variables
E059 7FF43E           (         main.asm):00154 (6)     159         clr     CurrAddress
E05C 7FF440           (         main.asm):00155 (6)     165         clr     CurrBank
E05F 7FF441           (         main.asm):00156 (6)     171         clr     RunFlag             ; 0 = Run not executed, Non-Zero = Run executed
                      (         main.asm):00157                     
                      (         main.asm):00158                     PRAGMA cc
                      (         main.asm):00159                 
E062                  (         main.asm):00160                 Main:
E062 BDE552           (         main.asm):00161 (7)     7           jsr     CmdPrompt           ; Print the command prompt BB:AAAA> 
E065 C646             (         main.asm):00162 (2)     9           ldb     #MaxCmdSize         ; Command prompt max string size
E067 8EF33D           (         main.asm):00163 (3)     12          ldx     #InStrBuffer        ; Point to a memory address to write string to
E06A BDE305           (         main.asm):00164 (7)     19          jsr     InStr               ; Read the a string
E06D 24F3             (         main.asm):00165 (3)     22          bcc     Main                ; If no data in string then bypass parser
E06F BDE508           (         main.asm):00166 (7)     29          jsr     CmdParse            ; Parse prompt and execute command
                      (         main.asm):00167                     ; Save registers after execution of a run command
E072 3401             (         main.asm):00168 (4+1)   34          pshs    CC                  ; Save the CC as not to alter it to record the run return
E074 7DF441           (         main.asm):00169 (5)     39          tst     RunFlag             ; Is it returning from the run command?
E077 2604             (         main.asm):00170 (3)     42          bne     MainRunExec         ; Yes it's returning from a run
E079 3501             (         main.asm):00171 (4+1)   47          puls    CC                  ; Restore CC
E07B 20E5             (         main.asm):00172 (3)     50          bra     Main                ; Loop back, without recording the resistors
E07D                  (         main.asm):00173                 MainRunExec:
E07D 3501             (         main.asm):00174 (4+1)   55          puls    CC                  ; Restore CC
E07F BDEB23           (         main.asm):00175 (7)     62          jsr     PushRegisters       ; Save the state of the registers
E082 7FF441           (         main.asm):00176 (6)     68          clr     RunFlag             ; Reset run flag
E085 20DB             (         main.asm):00177 (3)     71          bra     Main                ; Loop back after recording the registers
                      (         main.asm):00178                 
                      (         main.asm):00179                 ;  ___                  _               _              
                      (         main.asm):00180                 ; |_ _|  _ __     ___  | |  _   _    __| |   ___   ___ 
                      (         main.asm):00181                 ;  | |  | '_ \   / __| | | | | | |  / _` |  / _ \ / __|
                      (         main.asm):00182                 ;  | |  | | | | | (__  | | | |_| | | (_| | |  __/ \__ \
                      (         main.asm):00183                 ; |___| |_| |_|  \___| |_|  \__,_|  \__,_|  \___| |___/
                      (         main.asm):00184                 ;
                      (         main.asm):00185                 ; Include files to segment code and data into manageable portions
                      (         main.asm):00186                 ; ---------------------------------------------------------------
                      (         main.asm):00187                 
                      (         main.asm):00188                     INCLUDE "convert.asm"       ; Conversion subroutines
                      (      convert.asm):00001                 ; ****************************************************************************************
                      (      convert.asm):00002                 ; * Subroutines             IN          OUT         Description
                      (      convert.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      convert.asm):00004                 ; * AscToBin:
                      (      convert.asm):00005                 ; *     AscToBinNibble      A           A           Convert 1 ASCII digit to a nibble
                      (      convert.asm):00006                 ; *     AscToBinByte        D           A           Convert 2 ASCII digits to a byte
                      (      convert.asm):00007                 ; *     AscToBinWord        Q           D           Convert 4 ASCII digits to a word
                      (      convert.asm):00008                 ; * BinToAsc: 
                      (      convert.asm):00009                 ; *     BinToAscNibble      A           A           Convert a nibble to 1 ASCII digit
                      (      convert.asm):00010                 ; *     BinToAscByte        A           D           Convert a byte to 2 ASCII digits
                      (      convert.asm):00011                 ; *     BinToAscWord        D           Q           Convert a word to 4 ASCII digits
                      (      convert.asm):00012                 ; * BinToBcd:               D           Q           Convert a word to BCD
                      (      convert.asm):00013                 ; * UpperCase:              A           A           Convert lower case to upper case
                      (      convert.asm):00014                 ; ****************************************************************************************
                      (      convert.asm):00015                 
                      (      convert.asm):00016                 ;     _                   _____           ____    _         
                      (      convert.asm):00017                 ;    / \     ___    ___  |_   _|   ___   | __ )  (_)  _ __  
                      (      convert.asm):00018                 ;   / _ \   / __|  / __|   | |    / _ \  |  _ \  | | | '_ \ 
                      (      convert.asm):00019                 ;  / ___ \  \__ \ | (__    | |   | (_) | | |_) | | | | | | |
                      (      convert.asm):00020                 ; /_/   \_\ |___/  \___|   |_|    \___/  |____/  |_| |_| |_|
                      (      convert.asm):00021                 ;
                      (      convert.asm):00022                 ; Convert ASCII hexadecimal number to binary nibble
                      (      convert.asm):00023                 ; =================================================
                      (      convert.asm):00024                 ; Input:    A = Single hexadecimal number
                      (      convert.asm):00025                 ; Output:   A = Binary nibble in LSB
                      (      convert.asm):00026                 
                      (      convert.asm):00027                     PRAGMA cc
                      (      convert.asm):00028                 
E087                  (      convert.asm):00029                 AscToBinNibble:
E087 3401             (      convert.asm):00030 (4+1)   5           pshs    CC
E089 BDE14B           (      convert.asm):00031 (7)     12          jsr     UpperCase           ; Convert Hexadecimal characters to upper case
E08C 8139             (      convert.asm):00032 (2)     14          cmpa    #'9'                ; See if it's 0-9 or 'A'-'F'
E08E 2E04             (      convert.asm):00033 (3)     17          bgt     AscToBinNibbleAlpha ; If it's greater than, it's A to F
E090 8030             (      convert.asm):00034 (2)     19          suba    #$30                ; 
E092 2002             (      convert.asm):00035 (3)     22          bra     AscToBinNibbleEnd   ; End
E094                  (      convert.asm):00036                 AscToBinNibbleAlpha:            ; If we fall through, carry is set unlike direct entry at nib2num
E094 8037             (      convert.asm):00037 (2)     24          suba    #$37                ; 
E096                  (      convert.asm):00038                 AscToBinNibbleEnd
E096 840F             (      convert.asm):00039 (2)     26          anda    #$0F                ; Mask off MSB
E098 3581             (      convert.asm):00040 (4+3)   33          puls    CC,PC
                      (      convert.asm):00041                 
                      (      convert.asm):00042                 ; Convert two ASCII hexadecimal characters
                      (      convert.asm):00043                 ; ========================================
                      (      convert.asm):00044                 ; Input:    D = 2 hex characters to convert
                      (      convert.asm):00045                 ; Output:   A = Binary number
                      (      convert.asm):00046                 ; Clobbers: B
                      (      convert.asm):00047                 
                      (      convert.asm):00048                     PRAGMA cc
                      (      convert.asm):00049                 
E09A                  (      convert.asm):00050                 AscToBinByte:
E09A 3401             (      convert.asm):00051 (4+1)   5           pshs    CC
E09C BDE087           (      convert.asm):00052 (7)     12          jsr     AscToBinNibble      ; Convert A to 0..F numeric
E09F 48               (      convert.asm):00053 (1)     13          asla                        ; Shift value to MSB
E0A0 48               (      convert.asm):00054 (1)     14          asla                        ;
E0A1 48               (      convert.asm):00055 (1)     15          asla                        ;
E0A2 48               (      convert.asm):00056 (1)     16          asla                        ; This is the upper nibble
E0A3 84F0             (      convert.asm):00057 (2)     18          anda    #$F0                ; Clear LSB
E0A5 1E89             (      convert.asm):00058 (5)     23          exg     A,B                 ; 
E0A7 BDE087           (      convert.asm):00059 (7)     30          jsr     AscToBinNibble      ; Convert to 0..F numeric
E0AA 103598           (      convert.asm):00060 (4)     34          orr     B,A                 ; Merge MSB (TEMP) and LSB (A)
E0AD 5F               (      convert.asm):00061 (1)     35          clrb
E0AE 3581             (      convert.asm):00062 (4+3)   42          puls    CC,PC
                      (      convert.asm):00063                 
                      (      convert.asm):00064                 ; Convert four ASCII hexadecimal characters
                      (      convert.asm):00065                 ; ========================================
                      (      convert.asm):00066                 ; Input:    Q = 4 hex characters to convert
                      (      convert.asm):00067                 ; Output:   D = Binary number
                      (      convert.asm):00068                 ; Clobbers: W
                      (      convert.asm):00069                 
                      (      convert.asm):00070                     PRAGMA cc
                      (      convert.asm):00071                 
E0B0                  (      convert.asm):00072                 AscToBinWord:
E0B0 3401             (      convert.asm):00073 (4+1)   5           pshs    CC
E0B2 BDE09A           (      convert.asm):00074 (7)     12          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0B5 1E06             (      convert.asm):00075 (5)     17          exg     D,W                 ; Get LSB of quad, while transfering the result from A to E
E0B7 BDE09A           (      convert.asm):00076 (7)     24          jsr     AscToBinByte        ; Convert Ascii byte in D to binary in A
E0BA 1F89             (      convert.asm):00077 (4)     28          tfr     A,B                 ; Place LSB from A to B
E0BC 1FE8             (      convert.asm):00078 (4)     32          tfr     E,A                 ; Place MSB from E to A
E0BE 105F             (      convert.asm):00079 (2)     34          clrw
E0C0 3581             (      convert.asm):00080 (4+3)   41          puls    CC,PC
                      (      convert.asm):00081                 
                      (      convert.asm):00082                 ;  ____    _           _____              _
                      (      convert.asm):00083                 ; | __ )  (_)  _ __   |_   _|   ___      / \     ___    ___
                      (      convert.asm):00084                 ; |  _ \  | | | '_ \    | |    / _ \    / _ \   / __|  / __|
                      (      convert.asm):00085                 ; | |_) | | | | | | |   | |   | (_) |  / ___ \  \__ \ | (__ 
                      (      convert.asm):00086                 ; |____/  |_| |_| |_|   |_|    \___/  /_/   \_\ |___/  \___|
                      (      convert.asm):00087                 ;
                      (      convert.asm):00088                 ; Binary to ASCII conversion (Nibble, Byte, Word, Quad)
                      (      convert.asm):00089                 ; =====================================================
                      (      convert.asm):00090                 
                      (      convert.asm):00091                 ; Convert a 4-bit nibble binary number to a byte of ASCII hexadecimal number
                      (      convert.asm):00092                 ; --------------------------------------------------------------------------
                      (      convert.asm):00093                 ; Input:    A = binary data (LSB of A: $00-$0F), MSB is ignored
                      (      convert.asm):00094                 ; Output:   A = Single alphanumeric character ('0'-'9', 'A'-'F')
                      (      convert.asm):00095                 
                      (      convert.asm):00096                     PRAGMA cc
                      (      convert.asm):00097                 
E0C2                  (      convert.asm):00098                 BinToAscNibble:
E0C2 3401             (      convert.asm):00099 (4+1)   5           pshs    CC
E0C4 840F             (      convert.asm):00100 (2)     7           anda    #$0F                ; Clear the MSB
E0C6 8109             (      convert.asm):00101 (2)     9           cmpa    #9                  ; See if it's numeric (0-9)
E0C8 2E04             (      convert.asm):00102 (3)     12          bgt     BinToAscNibbleAlpha ; No, then it's alpha
E0CA 8B30             (      convert.asm):00103 (2)     14          adda    #'0'                ; Else,convert $0 to $9 to ASCII '0' to '9'
E0CC 2002             (      convert.asm):00104 (3)     17          bra     BinToAscNibbleEnd   ; Exit
E0CE                  (      convert.asm):00105                 BinToAscNibbleAlpha:
E0CE 8B37             (      convert.asm):00106 (2)     19          adda    #'A'-10             ; Convert $A to $F to ASCII 'A' to 'F'
E0D0                  (      convert.asm):00107                 BinToAscNibbleEnd:
E0D0 3581             (      convert.asm):00108 (4+3)   26          puls    CC,PC
                      (      convert.asm):00109                     
                      (      convert.asm):00110                 ; Convert an 8-bit binary number to two bytes of ASCII hexadecimal numbers
                      (      convert.asm):00111                 ; ------------------------------------------------------------------------
                      (      convert.asm):00112                 ; Input:    A = 8-bit binary data (byte)
                      (      convert.asm):00113                 ; Output:   D = Dual ASCII characters (MSB in A, LSB in B)
                      (      convert.asm):00114                 
                      (      convert.asm):00115                     PRAGMA cc
                      (      convert.asm):00116                 
E0D2                  (      convert.asm):00117                 BinToAscByte:
E0D2 3401             (      convert.asm):00118 (4+1)   5           pshs    CC
E0D4 1038             (      convert.asm):00119 (6)     11          pshsw
E0D6 1F8E             (      convert.asm):00120 (4)     15          tfr     A,E                 ; Save A
E0D8 44               (      convert.asm):00121 (1)     16          lsra                        ; Shift the lower nibble
E0D9 44               (      convert.asm):00122 (1)     17          lsra                        ;   to upper nibble,
E0DA 44               (      convert.asm):00123 (1)     18          lsra                        ;   all the while zeroing
E0DB 44               (      convert.asm):00124 (1)     19          lsra                        ;   the upper nibble
E0DC BDE0C2           (      convert.asm):00125 (7)     26          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A
E0DF 3402             (      convert.asm):00126 (4+1)   31          pshs    A                   ; Store 1st hexadecimal ASCII number
E0E1 1FE8             (      convert.asm):00127 (4)     35          tfr     E,A                 ; Restore nibble from E
E0E3 BDE0C2           (      convert.asm):00128 (7)     42          jsr     BinToAscNibble      ; Convert nibble to alphanumeric: In = A, Out = A 
E0E6 1F89             (      convert.asm):00129 (4)     46          tfr     A,B                 ; Transfer to LSB of D
E0E8 3502             (      convert.asm):00130 (4+1)   51          puls    A                   ; Transfer to MSB of D
E0EA 1039             (      convert.asm):00131 (6)     57          pulsw
E0EC 3581             (      convert.asm):00132 (4+3)   64          puls    CC,PC
                      (      convert.asm):00133                 
                      (      convert.asm):00134                 ; Convert a 16-bit binary number to four bytes of ASCII hexadecimal numbers
                      (      convert.asm):00135                 ; -------------------------------------------------------------------------
                      (      convert.asm):00136                 ; Input:    D = 16-bit binary data (word)
                      (      convert.asm):00137                 ; Output:   Q = ASCII characters in A,B,E,F
                      (      convert.asm):00138                 
                      (      convert.asm):00139                     PRAGMA cc
                      (      convert.asm):00140                 
E0EE                  (      convert.asm):00141                 BinToAscWord:
E0EE 3406             (      convert.asm):00142 (4+2)   6           pshs    D
E0F0 BDE0D2           (      convert.asm):00143 (7)     13          jsr     BinToAscByte        ; Convert MSB in A to ASCII in D
E0F3 1F06             (      convert.asm):00144 (4)     17          tfr     D,W                 ; Save MSB result in W
E0F5 3506             (      convert.asm):00145 (4+2)   23          puls    D                   ; Recover original content
E0F7 1F98             (      convert.asm):00146 (4)     27          tfr     B,A                 ; Put B in A
E0F9 BDE0D2           (      convert.asm):00147 (7)     34          jsr     BinToAscByte        ; Convert LSB in A (B) to ASCII in D
E0FC 1E06             (      convert.asm):00148 (5)     39          exg     D,W                 ; Invert D and W
E0FE 39               (      convert.asm):00149 (4)     43          rts
                      (      convert.asm):00150                 
                      (      convert.asm):00151                 ;  ____    _           _____           ____               _ 
                      (      convert.asm):00152                 ; | __ )  (_)  _ __   |_   _|   ___   | __ )    ___    __| |
                      (      convert.asm):00153                 ; |  _ \  | | | '_ \    | |    / _ \  |  _ \   / __|  / _` |
                      (      convert.asm):00154                 ; | |_) | | | | | | |   | |   | (_) | | |_) | | (__  | (_| |
                      (      convert.asm):00155                 ; |____/  |_| |_| |_|   |_|    \___/  |____/   \___|  \__,_|
                      (      convert.asm):00156                 ;
                      (      convert.asm):00157                 ; Binary to binary coded decimal (BCD)
                      (      convert.asm):00158                 ; ====================================
                      (      convert.asm):00159                 
                      (      convert.asm):00160                 ; Convert a 16-bit word binary number to up to five BCD numbers
                      (      convert.asm):00161                 ; -------------------------------------------------------------
                      (      convert.asm):00162                 ; Input:    D = 16-bit binary data
                      (      convert.asm):00163                 ; Output:   Q = 32-bit BCD data
                      (      convert.asm):00164                 
                      (      convert.asm):00165                     PRAGMA cc
                      (      convert.asm):00166                 
E0FF                  (      convert.asm):00167                 BinToBcd:
E0FF 3401             (      convert.asm):00168 (4+1)   5           pshs    CC
E101 7FF455           (      convert.asm):00169 (6)     11          clr     TempQ1              ; Clear Q's High MSB byte
                      (      convert.asm):00170                     ; Calculate 10,000's digit
E104 1F06             (      convert.asm):00171 (4)     15          tfr     D,W                 ; Q = DW
E106 104F             (      convert.asm):00172 (2)     17          clrd                        ; Clear Q's MSB
E108 118E2710         (      convert.asm):00173 (34)    51          divq    #10000              ; Divide Q by 10,000: Quotient in W, Remainder in D
E10C 11F7F456         (      convert.asm):00174 (5)     56          stf     TempQ2              ; Save 10,000's digit to variable
                      (      convert.asm):00175                     ; Calculate 1,000's digit
E110 1F06             (      convert.asm):00176 (4)     60          tfr     D,W                 ; Transfer Remainder to LSB
E112 104F             (      convert.asm):00177 (2)     62          clrd                        ; Clear MSB
E114 118E03E8         (      convert.asm):00178 (34)    96          divq    #1000               ; Divide Q by 1,000: Quotient in W, Remainder in D
E118 1E06             (      convert.asm):00179 (5)     101         exg     D,W                 ; Exchange registers: Quotien is now in D, and remainder in W
E11A 1048             (      convert.asm):00180 (2)     103         lsld                        ; Move 1,000's digit to high nibble
E11C 1048             (      convert.asm):00181 (2)     105         lsld                        ;   Had to exchange D <-> W
E11E 1048             (      convert.asm):00182 (2)     107         lsld                        ;   in order for lsld to work
E120 1048             (      convert.asm):00183 (2)     109         lsld                        ;
E122 F7F457           (      convert.asm):00184 (4)     113         stb     TempQ3              ; Save 1,000's digit for later or'ing with the 100's
                      (      convert.asm):00185                     ; Calculate 100's digit
E125 1F60             (      convert.asm):00186 (4)     117         tfr     W,D                 ; Transfer remainder to D
E127 118D64           (      convert.asm):00187 (25)    142         divd    #100                ; Divide D by 100: Quotient in B, Remainder in A
E12A 3402             (      convert.asm):00188 (4+1)   147         pshs    A                   ; Save for 10's and 1's 
E12C B6F457           (      convert.asm):00189 (4)     151         lda     TempQ3              ; Load quotien from the 1000's
E12F 103598           (      convert.asm):00190 (4)     155         orr     B,A                 ; Merge 1000's and 100's digits together
E132 B7F457           (      convert.asm):00191 (4)     159         sta     TempQ3              ; Save result to variable
                      (      convert.asm):00192                     ; Calculate the 10's and 1's digit
E135 3504             (      convert.asm):00193 (4+1)   164         puls    B                   ; Place remainder in LSB of D
E137 4F               (      convert.asm):00194 (1)     165         clra                        ; Clear MSB of D
E138 118D0A           (      convert.asm):00195 (25)    190         divd    #10                 ; Divide D by 10: Quotient in B, Remainder in A
E13B 58               (      convert.asm):00196 (1)     191         lslb                        ; Move 10's digit to high nibble
E13C 58               (      convert.asm):00197 (1)     192         lslb                        ;
E13D 58               (      convert.asm):00198 (1)     193         lslb                        ;
E13E 58               (      convert.asm):00199 (1)     194         lslb                        ;
E13F 103598           (      convert.asm):00200 (4)     198         orr     B,A                 ; Merge 10's and 1's digits together
E142 B7F458           (      convert.asm):00201 (4)     202         sta     TempQ4              ; Save result to Variable
E145 10FCF455         (      convert.asm):00202 (8)     210         ldq     TempQuad            ; Load Quad result
E149 3581             (      convert.asm):00203 (4+3)   217         puls    CC,PC
                      (      convert.asm):00204                 
                      (      convert.asm):00205                 ;  _   _                                  ____                      
                      (      convert.asm):00206                 ; | | | |  _ __    _ __     ___   _ __   / ___|   __ _   ___    ___ 
                      (      convert.asm):00207                 ; | | | | | '_ \  | '_ \   / _ \ | '__| | |      / _` | / __|  / _ \
                      (      convert.asm):00208                 ; | |_| | | |_) | | |_) | |  __/ | |    | |___  | (_| | \__ \ |  __/
                      (      convert.asm):00209                 ;  \___/  | .__/  | .__/   \___| |_|     \____|  \__,_| |___/  \___|
                      (      convert.asm):00210                 ;         |_|     |_|                                               
                      (      convert.asm):00211                 ;
                      (      convert.asm):00212                 ; Convert character in A to uppercase
                      (      convert.asm):00213                 ; ===================================
                      (      convert.asm):00214                 ; Input:    A = anycase
                      (      convert.asm):00215                 ; Output:   A = UPPERCASE
                      (      convert.asm):00216                 
                      (      convert.asm):00217                     PRAGMA cc
                      (      convert.asm):00218                 
E14B                  (      convert.asm):00219                 UpperCase:
E14B 3401             (      convert.asm):00220 (4+1)   5           pshs    CC
E14D 8161             (      convert.asm):00221 (2)     7           cmpa    #'a'                ; Is value less the 'a'?
E14F 2D06             (      convert.asm):00222 (3)     10          blt     UpperCaseEnd        ; Then end subroutine
E151 817A             (      convert.asm):00223 (2)     12          cmpa    #'z'                ; Is value higher then 'z'?
E153 2E02             (      convert.asm):00224 (3)     15          bgt     UpperCaseEnd        ; Then end subroutine
E155 8020             (      convert.asm):00225 (2)     17          suba    #$20                ; Substract $20 from the ASCII for upper case
E157                  (      convert.asm):00226                 UpperCaseEnd:
E157 3581             (      convert.asm):00227 (4+3)   24          puls    CC,PC
                      (      convert.asm):00228                     
                      (         main.asm):00189                     INCLUDE "io.asm"            ; Input and Output subroutines
                      (           io.asm):00001                 ; ****************************************************************************************
                      (           io.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (           io.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (           io.asm):00004                 ; * Cls                 .           .           Clear the screen
                      (           io.asm):00005                 ; * Com1Init            .           .           Initialize COM1 (USB)
                      (           io.asm):00006                 ; * Com1Rx                                      * (Com1RxWain)
                      (           io.asm):00007                 ; *   Com1RxWait        .           A           Read a character from COM1 (waiting)
                      (           io.asm):00008                 ; *   Com1RxNoWait      .           A,Carry     Read a character from COM1 (non-waiting)
                      (           io.asm):00009                 ; * Com1Tx              A           .           Sends a character to COM1
                      (           io.asm):00010                 ; * DelChar             B           .           Delete an amount of characters
                      (           io.asm):00011                 ; * GetStrByte          X           A,X,Cary    Get a byte from string
                      (           io.asm):00012                 ; * GetStrNibble        X           A,X,Cary    Get a nibble from string
                      (           io.asm):00013                 ; * GetStrWord          X           D,X,Cary    Get a word from string
                      (           io.asm):00014                 ; * InByte              .           A           Converts ASCII hex to a binary byte
                      (           io.asm):00015                 ; * InChar              .           A           * (Com1RxWait)
                      (           io.asm):00016                 ; * InCharNW            .           A,Carry     * (Com1RxNoWait)
                      (           io.asm):00017                 ; * InStr               B,X         B,X,Carry   Input string (size in B, string pointed in X)
                      (           io.asm):00018                 ; * InWord              .           D           Converts ASCII hex to a binary word
                      (           io.asm):00019                 ; * OutChar             A           .           * (Com1Tx)
                      (           io.asm):00020                 ; * OutByte                                     * (OutByteLZ)
                      (           io.asm):00021                 ; *   OutByteLZ         A           .           Print a byte to screen (with leading zero)
                      (           io.asm):00022                 ; *   OutByteNLZ        A           .           Print a byte to screen (no leading zero)
                      (           io.asm):00023                 ; * OutCRLF             .           .           Print a carriage return and a line feed
                      (           io.asm):00024                 ; * OutNibble                                   * (OutNibbleLSB)
                      (           io.asm):00025                 ; *   OutNibbleLSB      A           .           Print a nibble (LSB of A)
                      (           io.asm):00026                 ; *   OutNibbleMSB      A           .           Print a nibble (MSB of A)
                      (           io.asm):00027                 ; * OutStr                                      * (OutStrLZ)
                      (           io.asm):00028                 ; *   OutStrLZ          X           X           Print a string pointed by X (with leadig zeros)
                      (           io.asm):00029                 ; *   OutStrNLZ         X           X           Print a string pointed by X (no leading zeros)
                      (           io.asm):00030                 ; * OutWord                                     * (OutWordLZ)
                      (           io.asm):00031                 ; *   OutWordLZ         D           .           Print a word from binary data (with leading zeros)
                      (           io.asm):00032                 ; *   OutWordNLZ        D           .           Print a word from binary data (no leading zeros)
                      (           io.asm):00033                 
                      (           io.asm):00034                 ; ****************************************************************************************
                      (           io.asm):00035                 
                      (           io.asm):00036                 ; I/O addresses
                      (           io.asm):00037                 ; -------------
     FF68             (           io.asm):00038                 Com1_Data       = $FF68         ; Data register
     FF69             (           io.asm):00039                 Com1_Status     = $FF69         ; Read: Status Register, Write: Programmed Reset
     FF6A             (           io.asm):00040                 Com1_Command    = $FF6A         ; Command Register
     FF6B             (           io.asm):00041                 Com1_Control    = $FF6B         ; Control Register
                      (           io.asm):00042                 
                      (           io.asm):00043                 ;   ____   _       
                      (           io.asm):00044                 ;  / ___| | |  ___ 
                      (           io.asm):00045                 ; | |     | | / __|
                      (           io.asm):00046                 ; | |___  | | \__ \
                      (           io.asm):00047                 ;  \____| |_| |___/
                      (           io.asm):00048                 ;
                      (           io.asm):00049                 ;
                      (           io.asm):00050                 ; Clear terminal screen and set cursor to home position (upper-left)
                      (           io.asm):00051                 ; ==================================================================
                      (           io.asm):00052                 ; Uses VT compatible ANSI codes 
                      (           io.asm):00053                 
                      (           io.asm):00054                     PRAGMA cc
                      (           io.asm):00055                 
E159                  (           io.asm):00056                 Cls:
                      (           io.asm):00057                     ; Clear Screen using ANSI/VT100 terminal control escape sequences
E159 3406             (           io.asm):00058 (4+2)   6           pshs    D
E15B 861B             (           io.asm):00059 (2)     8           lda     #ESC                ; Control sequence introducer
E15D BDE1BC           (           io.asm):00060 (7)     15          jsr     OutChar             ;
E160 865B             (           io.asm):00061 (2)     17          lda     #'['                ;
E162 BDE1BC           (           io.asm):00062 (7)     24          jsr     OutChar             ;
E165 8632             (           io.asm):00063 (2)     26          lda     #'2'                ; Entire screen
E167 BDE1BC           (           io.asm):00064 (7)     33          jsr     OutChar             ;
E16A 864A             (           io.asm):00065 (2)     35          lda     #'J'                ; Clear screen
E16C BDE1BC           (           io.asm):00066 (7)     42          jsr     OutChar             ;
                      (           io.asm):00067                     ; Home the cursor
E16F 861B             (           io.asm):00068 (2)     44          lda     #ESC                ; Control sequence introducer
E171 BDE1BC           (           io.asm):00069 (7)     51          jsr     OutChar
E174 865B             (           io.asm):00070 (2)     53          lda     #'['
E176 BDE1BC           (           io.asm):00071 (7)     60          jsr     OutChar
E179 8631             (           io.asm):00072 (2)     62          lda     #'1'
E17B BDE1BC           (           io.asm):00073 (7)     69          jsr     OutChar
E17E 863B             (           io.asm):00074 (2)     71          lda     #';'
E180 BDE1BC           (           io.asm):00075 (7)     78          jsr     OutChar
E183 8631             (           io.asm):00076 (2)     80          lda     #'1'
E185 BDE1BC           (           io.asm):00077 (7)     87          jsr     OutChar
E188 8648             (           io.asm):00078 (2)     89          lda     #'H'
E18A BDE1BC           (           io.asm):00079 (7)     96          jsr     OutChar
E18D 3586             (           io.asm):00080 (4+4)   104         puls    D,PC
                      (           io.asm):00081                 
                      (           io.asm):00082                 ;   ____                       _   ___           _   _   
                      (           io.asm):00083                 ;  / ___|   ___    _ __ ___   / | |_ _|  _ __   (_) | |_ 
                      (           io.asm):00084                 ; | |      / _ \  | '_ ` _ \  | |  | |  | '_ \  | | | __|
                      (           io.asm):00085                 ; | |___  | (_) | | | | | | | | |  | |  | | | | | | | |_ 
                      (           io.asm):00086                 ;  \____|  \___/  |_| |_| |_| |_| |___| |_| |_| |_|  \__|
                      (           io.asm):00087                 ;
                      (           io.asm):00088                 ;
                      (           io.asm):00089                 ; Serial port 1 initialization
                      (           io.asm):00090                 ; ============================
                      (           io.asm):00091                 
                      (           io.asm):00092                     PRAGMA cc
                      (           io.asm):00093                 
E18F                  (           io.asm):00094                 Com1Init:
E18F 3402             (           io.asm):00095 (4+1)   5           pshs    A
E191 8600             (           io.asm):00096 (2)     7           lda     #$00                ; Perform a software reset
E193 B7FF69           (           io.asm):00097 (4)     11          sta     Com1_Status
E196 8610             (           io.asm):00098 (2)     13          lda     #%00010000          ; 1 stop bit, 8 data bits, 115200 baud
                      (           io.asm):00099                 ;   lda     #%00011111          ; 1 stop bit, 8 data bits, 19200 baud
E198 B7FF6B           (           io.asm):00100 (4)     17          sta     Com1_Control
E19B 860B             (           io.asm):00101 (2)     19          lda     #%00001011          ; No parity, no echo, RTS low, DTR low
E19D B7FF6A           (           io.asm):00102 (4)     23          sta     Com1_Command
E1A0 3582             (           io.asm):00103 (4+3)   30          puls    A,PC
                      (           io.asm):00104                 
                      (           io.asm):00105                 ;   ____                       _   ____
                      (           io.asm):00106                 ;  / ___|   ___    _ __ ___   / | |  _ \  __  __
                      (           io.asm):00107                 ; | |      / _ \  | '_ ` _ \  | | | |_) | \ \/ /
                      (           io.asm):00108                 ; | |___  | (_) | | | | | | | | | |  _ <   >  <
                      (           io.asm):00109                 ;  \____|  \___/  |_| |_| |_| |_| |_| \_\ /_/\_\
                      (           io.asm):00110                 ;
                      (           io.asm):00111                 ;
                      (           io.asm):00112                 ; Serial port 1 receive character (waiting)
                      (           io.asm):00113                 ; =========================================
                      (           io.asm):00114                 ; Status bit 3 goes HIGH when the ACIA transfers data from the Receiver Shift
                      (           io.asm):00115                 ; Register to the Receiver Data Register and goes LOW when the processor reads the
                      (           io.asm):00116                 ; Receiver Data Register.
                      (           io.asm):00117                 ;
                      (           io.asm):00118                 ; Output:   A = Character received
                      (           io.asm):00119                 
                      (           io.asm):00120                     PRAGMA cc
                      (           io.asm):00121                 
E1A2                  (           io.asm):00122                 InChar:
E1A2                  (           io.asm):00123                 Com1RxWait:
E1A2 B6FF69           (           io.asm):00124 (4)     4           lda     Com1_Status         ; Load the ACIA's status in to the accumulator
E1A5 8408             (           io.asm):00125 (2)     6           anda    #%00001000          ; Check if there's data in the buffer
E1A7 27F9             (           io.asm):00126 (3)     9           beq     Com1RxWait          ; Loop untill buffer is empty
E1A9 B6FF68           (           io.asm):00127 (4)     13          lda     Com1_Data           ; Load character from the data register
E1AC 39               (           io.asm):00128 (4)     17          rts
                      (           io.asm):00129                 
                      (           io.asm):00130                 ; Serial port 1 receive character (non-waiting)
                      (           io.asm):00131                 ; =============================================
                      (           io.asm):00132                 ; Output:   Carry bit clear = no character received.
                      (           io.asm):00133                 ;           Carry bit set = character received in A.
                      (           io.asm):00134                 
                      (           io.asm):00135                     PRAGMA cc
                      (           io.asm):00136                 
E1AD                  (           io.asm):00137                 InCharNW:
E1AD                  (           io.asm):00138                 Com1RxNoWait:
E1AD 1CFE             (           io.asm):00139 (2)     2           andcc   #$FE                ; Clear Carry to indicate no character is present
E1AF B6FF69           (           io.asm):00140 (4)     6           lda     Com1_Status         ; Load ACIA1 status register
E1B2 8408             (           io.asm):00141 (2)     8           anda    #%00001000          ; Is there a character in the buffer?
E1B4 2705             (           io.asm):00142 (3)     11          beq     Com1RxNoWaitEnd     ; If not then end subroutine, with cleared carry
E1B6 B6FF68           (           io.asm):00143 (4)     15          lda     Com1_Data           ; Read character from ACIA buffer
E1B9 1A01             (           io.asm):00144 (2)     17          orcc    #$01                ; Set carry flag to indicate a character is available
E1BB                  (           io.asm):00145                 Com1RxNoWaitEnd:
E1BB 39               (           io.asm):00146 (4)     21          rts
                      (           io.asm):00147                 
                      (           io.asm):00148                 ;   ____                       _   _____        
                      (           io.asm):00149                 ;  / ___|   ___    _ __ ___   / | |_   _| __  __
                      (           io.asm):00150                 ; | |      / _ \  | '_ ` _ \  | |   | |   \ \/ /
                      (           io.asm):00151                 ; | |___  | (_) | | | | | | | | |   | |    >  < 
                      (           io.asm):00152                 ;  \____|  \___/  |_| |_| |_| |_|   |_|   /_/\_\
                      (           io.asm):00153                 ;
                      (           io.asm):00154                 ;
                      (           io.asm):00155                 ; Serial port 1 transmit character
                      (           io.asm):00156                 ; ================================
                      (           io.asm):00157                 ; Write a character to Rockwell ACIA1. If using a WDC 65C51, use a delay instead of
                      (           io.asm):00158                 ; checking the transmit buffer flag (Known and documented Transmit bug in W65C51N).
                      (           io.asm):00159                 ;
                      (           io.asm):00160                 ; Status bit 4 goes HIGH when the ACIA transfers data from the Transmitter Data
                      (           io.asm):00161                 ; Register to the Transmitter Shift Register, and goes LOW when the processor writes
                      (           io.asm):00162                 ; new data onto the Transmitter Data Register.
                      (           io.asm):00163                 ;
                      (           io.asm):00164                 ; Input:    A = Character to transmit
                      (           io.asm):00165                 
                      (           io.asm):00166                     PRAGMA cc
                      (           io.asm):00167                 
E1BC                  (           io.asm):00168                 OutChar:
E1BC                  (           io.asm):00169                 Com1Tx:
E1BC 3402             (           io.asm):00170 (4+1)   5           pshs    A                   ; Save the character for later use
E1BE                  (           io.asm):00171                 Com1TxNotReady:
E1BE B6FF69           (           io.asm):00172 (4)     9           lda     Com1_Status         ; Load the status register
E1C1 8410             (           io.asm):00173 (2)     11          anda    #%00010000          ; Is the transmit buffer full?
E1C3 27F9             (           io.asm):00174 (3)     14          beq     Com1TxNotReady      ; Yes, then check until it's empty
E1C5 3502             (           io.asm):00175 (4+1)   19          puls    A                   ; Restore the character
E1C7 B7FF68           (           io.asm):00176 (4)     23          sta     Com1_Data           ; Send out the character
E1CA 39               (           io.asm):00177 (4)     27          rts
                      (           io.asm):00178                 
                      (           io.asm):00179                 ;  ____           _                 
                      (           io.asm):00180                 ; |  _ \    ___  | |   __ _   _   _ 
                      (           io.asm):00181                 ; | | | |  / _ \ | |  / _` | | | | |
                      (           io.asm):00182                 ; | |_| | |  __/ | | | (_| | | |_| |
                      (           io.asm):00183                 ; |____/   \___| |_|  \__,_|  \__, |
                      (           io.asm):00184                 ;                             |___/ 
                      (           io.asm):00185                 ;
                      (           io.asm):00186                 ; Delay Loop
                      (           io.asm):00187                 ; ==========
                      (           io.asm):00188                 
                      (           io.asm):00189                     PRAGMA cc
                      (           io.asm):00190                 
E1CB                  (           io.asm):00191                 Delay:
E1CB 1038             (           io.asm):00192 (6)     6           pshsw
E1CD 10868000         (           io.asm):00193 (4)     10          ldw     #$8000
E1D1                  (           io.asm):00194                 DelayLoop:
E1D1 105A             (           io.asm):00195 (2)     12          decw
E1D3 2702             (           io.asm):00196 (3)     15          beq     DelayEnd
E1D5 20FA             (           io.asm):00197 (3)     18          bra     DelayLoop
E1D7                  (           io.asm):00198                 DelayEnd:
E1D7 1039             (           io.asm):00199 (6)     24          pulsw
E1D9 39               (           io.asm):00200 (4)     28          rts
                      (           io.asm):00201                 
                      (           io.asm):00202                 ;  ____           _    ____   _                    
                      (           io.asm):00203                 ; |  _ \    ___  | |  / ___| | |__     __ _   _ __ 
                      (           io.asm):00204                 ; | | | |  / _ \ | | | |     | '_ \   / _` | | '__|
                      (           io.asm):00205                 ; | |_| | |  __/ | | | |___  | | | | | (_| | | |   
                      (           io.asm):00206                 ; |____/   \___| |_|  \____| |_| |_|  \__,_| |_|   
                      (           io.asm):00207                 ;
                      (           io.asm):00208                 ; Delete a number of characters
                      (           io.asm):00209                 ; =============================
                      (           io.asm):00210                 ; Input:    B = Number of characters to delete
                      (           io.asm):00211                 
                      (           io.asm):00212                     PRAGMA cc
                      (           io.asm):00213                 
E1DA                  (           io.asm):00214                 DelChar:
E1DA 3406             (           io.asm):00215 (4+2)   6           pshs    D
E1DC 8608             (           io.asm):00216 (2)     8           lda     #BS                 ; Load the backspace character
E1DE                  (           io.asm):00217                 DelCharLoop:
E1DE BDE1BC           (           io.asm):00218 (7)     15          jsr     OutChar             ; Print the backspace character
E1E1 8620             (           io.asm):00219 (2)     17          lda     #' '                ; Load the space character
E1E3 BDE1BC           (           io.asm):00220 (7)     24          jsr     OutChar             ; Print it the space character
E1E6 8608             (           io.asm):00221 (2)     26          lda     #BS                 ; Load the backspace character
E1E8 BDE1BC           (           io.asm):00222 (7)     33          jsr     OutChar             ; Print it the backspace character
E1EB 5A               (           io.asm):00223 (1)     34          decb                        ; Decrement the character count
E1EC 26F0             (           io.asm):00224 (3)     37          bne     DelCharLoop         ; If not zero, then loop to delete another character
E1EE 3586             (           io.asm):00225 (4+4)   45          puls    D,PC
                      (           io.asm):00226                 
                      (           io.asm):00227                 ;   ____          _     ____    _            ____            _          
                      (           io.asm):00228                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | __ )   _   _  | |_    ___ 
                      (           io.asm):00229                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00230                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |_) | | |_| | | |_  |  __/
                      (           io.asm):00231                 ;  \____|  \___|  \__| |____/   \__| |_|    |____/   \__, |  \__|  \___|
                      (           io.asm):00232                 ;                                                    |___/
                      (           io.asm):00233                 ;
                      (           io.asm):00234                 ; Read a byte from string in X, and converts to binary
                      (           io.asm):00235                 ; ====================================================
                      (           io.asm):00236                 ; Input:    X = String pointer
                      (           io.asm):00237                 ; Output:   A = Binary byte
                      (           io.asm):00238                 ;           X = Points to next character in string
                      (           io.asm):00239                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00240                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00241                 
E1F0                  (           io.asm):00242                 GetStrByte:
E1F0 3404             (           io.asm):00243 (4+1)   50          pshs    B
E1F2 1038             (           io.asm):00244 (6)     56          pshsw
E1F4 3410             (           io.asm):00245 (4+2)   62          pshs    X                   ; Save position
E1F6 5F               (           io.asm):00246 (1)     63          clrb                        ; Clear byte counter
E1F7 115F             (           io.asm):00247 (2)     65          clrf                        ; Clear byte storage
E1F9                  (           io.asm):00248                 GetStrByteCount:
E1F9 A680             (           io.asm):00249 (4+1)   70          lda     ,X+                 ; Load a character
E1FB 2707             (           io.asm):00250 (3)     73          beq     GetStrByteParse     ; If it's the end of the string, parse byte
E1FD 8120             (           io.asm):00251 (2)     75          cmpa    #' '                ; Is it a space delimiter
E1FF 2703             (           io.asm):00252 (3)     78          beq     GetStrByteParse     ; Yes, then parse byte
E201 5C               (           io.asm):00253 (1)     79          incb                        ; Increment byte counter
E202 20F5             (           io.asm):00254 (3)     82          bra     GetStrByteCount     ; Loop till delimiter found
E204                  (           io.asm):00255                 GetStrByteParse:
E204 3510             (           io.asm):00256 (4+2)   88          puls    X                   ; Restore position
E206 C100             (           io.asm):00257 (2)     90          cmpb    #0                  ; Is the counter = 0
E208 2732             (           io.asm):00258 (3)     93          beq     GetStrByteError     ; Yes, then set error flag
E20A C101             (           io.asm):00259 (2)     95          cmpb    #1                  ; Is it 1 character long
E20C 2607             (           io.asm):00260 (3)     98          bne     GetStrByteParse2    ; No, then check if it's 2
E20E BDE25F           (           io.asm):00261 (7)     105         jsr     GetStrNibble        ; Get a nibble
E211 2429             (           io.asm):00262 (3)     108         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E213 2023             (           io.asm):00263 (3)     111         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E215                  (           io.asm):00264                 GetStrByteParse2:
E215 C102             (           io.asm):00265 (2)     113         cmpb    #2                  ; Is it 2 character long
E217 2615             (           io.asm):00266 (3)     116         bne     GetStrByteParseMore ; No, then check if it's 3
E219 BDE25F           (           io.asm):00267 (7)     123         jsr     GetStrNibble        ; Get a nibble
E21C 241E             (           io.asm):00268 (3)     126         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E21E 48               (           io.asm):00269 (1)     127         asla                        ; Push nibble to MSB
E21F 48               (           io.asm):00270 (1)     128         asla                        ;
E220 48               (           io.asm):00271 (1)     129         asla                        ;
E221 48               (           io.asm):00272 (1)     130         asla                        ;
E222 1F89             (           io.asm):00273 (4)     134         tfr     A,B                 ; Store byte in LSB of W
E224 BDE25F           (           io.asm):00274 (7)     141         jsr     GetStrNibble        ; Get a nibble
E227 2413             (           io.asm):00275 (3)     144         bcc     GetStrByteError     ; If it's not a valid hex digit, then set error flag
E229 103598           (           io.asm):00276 (4)     148         orr     B,A                 ; Merge both nibbles as a byte
E22C 200A             (           io.asm):00277 (3)     151         bra     GetStrByteGood      ; Exit indicating that it's a valid hex digit
E22E                  (           io.asm):00278                 GetStrByteParseMore:
E22E B6F43D           (           io.asm):00279 (4)     155         lda     CmdErrorPtr         ; Load error pointer
E231 8B03             (           io.asm):00280 (2)     157         adda    #3                  ; Add 3 to it
E233 B7F43D           (           io.asm):00281 (4)     161         sta     CmdErrorPtr         ; Store it back
E236 2004             (           io.asm):00282 (3)     164         bra     GetStrByteError     ; Set error flag
E238                  (           io.asm):00283                 GetStrByteGood:
E238 1A01             (           io.asm):00284 (2)     166         orcc    #%00000001          ; Set Carry: Indicates the byte is ok
E23A 2002             (           io.asm):00285 (3)     169         bra     GetStrByteEnd
E23C                  (           io.asm):00286                 GetStrByteError:
E23C 1CFE             (           io.asm):00287 (2)     171         andcc   #%11111110          ; Clear Carry: Indicates there an error
E23E                  (           io.asm):00288                 GetStrByteEnd:
E23E 1039             (           io.asm):00289 (6)     177         pulsw
E240 3584             (           io.asm):00290 (4+3)   184         puls    B,PC
                      (           io.asm):00291                 
E242                  (           io.asm):00292                 GetStrByteFixed:
E242 3404             (           io.asm):00293 (4+1)   189         pshs    B
E244 BDE25F           (           io.asm):00294 (7)     196         jsr     GetStrNibble        ; Get a nibble
E247 2412             (           io.asm):00295 (3)     199         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E249 48               (           io.asm):00296 (1)     200         asla                        ; Push nibble to MSB
E24A 48               (           io.asm):00297 (1)     201         asla                        ;
E24B 48               (           io.asm):00298 (1)     202         asla                        ;
E24C 48               (           io.asm):00299 (1)     203         asla                        ;
E24D 1F89             (           io.asm):00300 (4)     207         tfr     A,B                 ; Store byte in B
E24F BDE25F           (           io.asm):00301 (7)     214         jsr     GetStrNibble        ; Get a nibble
E252 2407             (           io.asm):00302 (3)     217         bcc     GetStrByteFixedErr  ; If it's not a valid hex digit, then set error flag
E254 103598           (           io.asm):00303 (4)     221         orr     B,A                 ; Merge both nibbles as a byte
E257 1A01             (           io.asm):00304 (2)     223         orcc    #%00000001          ; Set Carry: Indicates the nibble is ok
E259 2002             (           io.asm):00305 (3)     226         bra     GetStrByteFixedEnd  ;
E25B                  (           io.asm):00306                 GetStrByteFixedErr:
E25B 1CFE             (           io.asm):00307 (2)     228         andcc   #%11111110          ; Clear Carry: Indicates there an error
E25D                  (           io.asm):00308                 GetStrByteFixedEnd:
E25D 3584             (           io.asm):00309 (4+3)   235         puls    B,PC
                      (           io.asm):00310                 
                      (           io.asm):00311                 ;   ____          _     ____    _            _   _   _   _       _       _        
                      (           io.asm):00312                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00313                 ; | |  _   / _ \ | __| \___ \  | __| | '__| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00314                 ; | |_| | |  __/ | |_   ___) | | |_  | |    | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00315                 ;  \____|  \___|  \__| |____/   \__| |_|    |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00316                 ;
                      (           io.asm):00317                 ;
                      (           io.asm):00318                 ; Read a nibble from string in X, and converts to binary
                      (           io.asm):00319                 ; ======================================================
                      (           io.asm):00320                 ; Input:    X = String pointer
                      (           io.asm):00321                 ; Output:   A = Binary nibble in LSB
                      (           io.asm):00322                 ;           X = Points to next character in string
                      (           io.asm):00323                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00324                 ;           Carry Set = hex digit is valid in A
                      (           io.asm):00325                 
E25F                  (           io.asm):00326                 GetStrNibble:
E25F A684             (           io.asm):00327 (4+0)   239         lda     ,X                  ; Get a character from string
E261 2713             (           io.asm):00328 (3)     242         beq     GetStrNibbleError   ; Is it the end of the string? Yes, then error
E263 BDE14B           (           io.asm):00329 (7)     249         jsr     UpperCase           ; No, then convert to uppercase
                      (           io.asm):00330                     ; Is it a valid hex character?
E266 8130             (           io.asm):00331 (2)     251         cmpa    #'0'                ; Filter anything bellow the ASCII 0
E268 2D0C             (           io.asm):00332 (3)     254         blt     GetStrNibbleError   ; Is it less than '0'? Yes, then error
E26A 8146             (           io.asm):00333 (2)     256         cmpa    #'F'                ; Filter anything above the ASCII F
E26C 2E08             (           io.asm):00334 (3)     259         bgt     GetStrNibbleError   ; Is it greater than 'F'? Yes, then error
E26E 8139             (           io.asm):00335 (2)     261         cmpa    #'9'                ; Filter anything above ASCII '9'
E270 2F08             (           io.asm):00336 (3)     264         ble     GetStrNibbleGood    ; Is it less or equal to '9'? Yes, then ok
E272 8141             (           io.asm):00337 (2)     266         cmpa    #'A'                ; Filter anything below ASCII 'A'
E274 2C04             (           io.asm):00338 (3)     269         bge     GetStrNibbleGood    ; Is it greater then or equal to 'A'? Yes, then ok
E276                  (           io.asm):00339                 GetStrNibbleError:
E276 1CFE             (           io.asm):00340 (2)     271         andcc   #$FE                ; Clear carry to indicate error
E278 2005             (           io.asm):00341 (3)     274         bra     GetStrNibbleEnd
E27A                  (           io.asm):00342                 GetStrNibbleGood:
E27A BDE087           (           io.asm):00343 (7)     281         jsr     AscToBinNibble
E27D 1A01             (           io.asm):00344 (2)     283         orcc    #$01                ; Set carry to indicate valid number in A
E27F                  (           io.asm):00345                 GetStrNibbleEnd:
E27F 3001             (           io.asm):00346 (4+1)   288         leax    1,X                 ; Increment string pointer
E281 7CF43D           (           io.asm):00347 (6)     294         inc     CmdErrorPtr         ; Advance error pointer
E284 39               (           io.asm):00348 (4)     298         rts
                      (           io.asm):00349                     
                      (           io.asm):00350                 ;   ____          _     ____    _           __        __                     _ 
                      (           io.asm):00351                 ;  / ___|   ___  | |_  / ___|  | |_   _ __  \ \      / /   ___    _ __    __| |
                      (           io.asm):00352                 ; | |  _   / _ \ | __| \___ \  | __| | '__|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00353                 ; | |_| | |  __/ | |_   ___) | | |_  | |      \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00354                 ;  \____|  \___|  \__| |____/   \__| |_|       \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00355                 ;
                      (           io.asm):00356                 ;
                      (           io.asm):00357                 ; Read a word from string in X, and converts to binary
                      (           io.asm):00358                 ; ======================================================
                      (           io.asm):00359                 ; Input:    X = String pointer
                      (           io.asm):00360                 ; Output:   D = Binary word
                      (           io.asm):00361                 ;           X = Points to next character in string
                      (           io.asm):00362                 ;           Carry Clear = hex digit is not valid
                      (           io.asm):00363                 ;           Carry Set = hex digit is valid in D
                      (           io.asm):00364                 
E285                  (           io.asm):00365                 GetStrWord:
E285 1038             (           io.asm):00366 (6)     304         pshsw
E287 3410             (           io.asm):00367 (4+2)   310         pshs    X                   ; Save position
E289 5F               (           io.asm):00368 (1)     311         clrb                        ; Clear word counter
E28A 105F             (           io.asm):00369 (2)     313         clrw                        ; Clear word storage
E28C                  (           io.asm):00370                 GetStrWordCount:
E28C A680             (           io.asm):00371 (4+1)   318         lda     ,X+                 ; Load a character
E28E 2707             (           io.asm):00372 (3)     321         beq     GetStrWordParse     ; If it's the end of the string, parse word
E290 8120             (           io.asm):00373 (2)     323         cmpa    #' '                ; Is it a space delimiter
E292 2703             (           io.asm):00374 (3)     326         beq     GetStrWordParse     ; Yes, then parse word
E294 5C               (           io.asm):00375 (1)     327         incb                        ; Increment byte counter
E295 20F5             (           io.asm):00376 (3)     330         bra     GetStrWordCount     ; Loop till delimiter found
E297                  (           io.asm):00377                 GetStrWordParse:
E297 3510             (           io.asm):00378 (4+2)   336         puls    X                   ; Restore position
E299 C100             (           io.asm):00379 (2)     338         cmpb    #0                  ; Is the counter = 0
E29B 2752             (           io.asm):00380 (3)     341         beq     GetStrWordError     ; Yes, then set error flag
E29D C101             (           io.asm):00381 (2)     343         cmpb    #1                  ; Is it 1 character long
E29F 2609             (           io.asm):00382 (3)     346         bne     GetStrWordParse2    ; No, then check if it's 2
E2A1 BDE25F           (           io.asm):00383 (7)     353         jsr     GetStrNibble        ; Get a nibble
E2A4 2449             (           io.asm):00384 (3)     356         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2A6 1F8F             (           io.asm):00385 (4)     360         tfr     A,F                 ; Store nibble in LSB of W
E2A8 203F             (           io.asm):00386 (3)     363         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2AA                  (           io.asm):00387                 GetStrWordParse2:
E2AA C102             (           io.asm):00388 (2)     365         cmpb    #2                  ; Is it 2 character long
E2AC 2609             (           io.asm):00389 (3)     368         bne     GetStrWordParse3    ; No, then check if it's 3
E2AE BDE242           (           io.asm):00390 (7)     375         jsr     GetStrByteFixed     ; Get a byte
E2B1 243C             (           io.asm):00391 (3)     378         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2B3 1F8F             (           io.asm):00392 (4)     382         tfr     A,F                 ; Store byte in LSB of W
E2B5 2032             (           io.asm):00393 (3)     385         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2B7                  (           io.asm):00394                 GetStrWordParse3:
E2B7 C103             (           io.asm):00395 (2)     387         cmpb    #3                  ; Is it 3 character long
E2B9 2610             (           io.asm):00396 (3)     390         bne     GetStrWordParse4    ; No, then check if it's 4
E2BB BDE25F           (           io.asm):00397 (7)     397         jsr     GetStrNibble        ; Get a nibble
E2BE 242F             (           io.asm):00398 (3)     400         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C0 1F8E             (           io.asm):00399 (4)     404         tfr     A,E                 ; Store nibble in MSB of W
E2C2 BDE242           (           io.asm):00400 (7)     411         jsr     GetStrByteFixed     ; Get a byte
E2C5 2428             (           io.asm):00401 (3)     414         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2C7 1F8F             (           io.asm):00402 (4)     418         tfr     A,F                 ; Store byte in LSB of W
E2C9 201E             (           io.asm):00403 (3)     421         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2CB                  (           io.asm):00404                 GetStrWordParse4:
E2CB C104             (           io.asm):00405 (2)     423         cmpb    #4                  ; Is it 4 character long
E2CD 2610             (           io.asm):00406 (3)     426         bne     GetStrWordParseMore ; No, then check if it's longer
E2CF BDE242           (           io.asm):00407 (7)     433         jsr     GetStrByteFixed     ; Get a byte
E2D2 241B             (           io.asm):00408 (3)     436         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2D4 1F8E             (           io.asm):00409 (4)     440         tfr     A,E                 ; Store byte in MSB of W
E2D6 BDE242           (           io.asm):00410 (7)     447         jsr     GetStrByteFixed     ; Get a byte
E2D9 2414             (           io.asm):00411 (3)     450         bcc     GetStrWordError     ; If it's not a valid hex digit, then set error flag
E2DB 1F8F             (           io.asm):00412 (4)     454         tfr     A,F                 ; Store byte in LSB of W
E2DD 200A             (           io.asm):00413 (3)     457         bra     GetStrWordGood      ; Exit indicating that it's a valid hex digit
E2DF                  (           io.asm):00414                 GetStrWordParseMore:
E2DF B6F43D           (           io.asm):00415 (4)     461         lda     CmdErrorPtr         ; Load error pointer
E2E2 8B05             (           io.asm):00416 (2)     463         adda    #5                  ; Add 5 to it
E2E4 B7F43D           (           io.asm):00417 (4)     467         sta     CmdErrorPtr         ; Store it back
E2E7 2006             (           io.asm):00418 (3)     470         bra     GetStrWordError     ; Set error flag
E2E9                  (           io.asm):00419                 GetStrWordGood:
E2E9 1F60             (           io.asm):00420 (4)     474         tfr     W,D
E2EB 1A01             (           io.asm):00421 (2)     476         orcc    #%00000001          ; Set Carry: Indicates the word is ok
E2ED 2002             (           io.asm):00422 (3)     479         bra     GetStrWordEnd
E2EF                  (           io.asm):00423                 GetStrWordError:
E2EF 1CFE             (           io.asm):00424 (2)     481         andcc   #%11111110          ; Clear Carry: Indicates there an error
E2F1                  (           io.asm):00425                 GetStrWordEnd:
E2F1 1039             (           io.asm):00426 (6)     487         pulsw
E2F3 39               (           io.asm):00427 (4)     491         rts
                      (           io.asm):00428                 
                      (           io.asm):00429                 ;  ___           ____            _          
                      (           io.asm):00430                 ; |_ _|  _ __   | __ )   _   _  | |_    ___ 
                      (           io.asm):00431                 ;  | |  | '_ \  |  _ \  | | | | | __|  / _ \
                      (           io.asm):00432                 ;  | |  | | | | | |_) | | |_| | | |_  |  __/
                      (           io.asm):00433                 ; |___| |_| |_| |____/   \__, |  \__|  \___|
                      (           io.asm):00434                 ;                        |___/              
                      (           io.asm):00435                 ;
                      (           io.asm):00436                 ; Read a hexadecimal byte
                      (           io.asm):00437                 ; =======================
                      (           io.asm):00438                 ; Output:   A = Binary number converted from two ASCII characters read from stdin
                      (           io.asm):00439                 
                      (           io.asm):00440                     PRAGMA cc
                      (           io.asm):00441                 
E2F4                  (           io.asm):00442                 InByte:
E2F4 3405             (           io.asm):00443 (4+2)   6           pshs    B,CC
E2F6 BDE1A2           (           io.asm):00444 (7)     13          jsr     InChar              ; Read first character in A
E2F9 1F89             (           io.asm):00445 (4)     17          tfr     A,B                 ; Save is in B temporarily
E2FB BDE1A2           (           io.asm):00446 (7)     24          jsr     InChar              ; Read second character in A
E2FE 1E89             (           io.asm):00447 (5)     29          exg     A,B                 ; Swap both registers to put them in order
E300 BDE09A           (           io.asm):00448 (7)     36          jsr     AscToBinByte        ; Convert 2 ASCII characters in D to a binary in A
E303 3585             (           io.asm):00449 (4+4)   44          puls    B,CC,PC
                      (           io.asm):00450                 
                      (           io.asm):00451                 ;  ___           ____    _
                      (           io.asm):00452                 ; |_ _|  _ __   / ___|  | |_   _ __
                      (           io.asm):00453                 ;  | |  | '_ \  \___ \  | __| | '__|
                      (           io.asm):00454                 ;  | |  | | | |  ___) | | |_  | |
                      (           io.asm):00455                 ; |___| |_| |_| |____/   \__| |_|
                      (           io.asm):00456                 ;
                      (           io.asm):00457                 ;
                      (           io.asm):00458                 ; Read string from from stdin
                      (           io.asm):00459                 ; ===========================
                      (           io.asm):00460                 ; Reg used: E = current number of bytes counter
                      (           io.asm):00461                 ;           F = contains the original max number of bytes to read
                      (           io.asm):00462                 ;           Y = contains the original string pointer start
                      (           io.asm):00463                 ; Input:    B = max number of characters to read
                      (           io.asm):00464                 ;           X = Pointer to string (ex: InStrBuffer has a 256 bytes buffer)
                      (           io.asm):00465                 ; Output:   B = Actual number of characters read
                      (           io.asm):00466                 ;           X = Pointer to start of string, null terminated
                      (           io.asm):00467                 ;               Carry bit clear = no string recorded
                      (           io.asm):00468                 ;               Carry bit set = string in InStrBuffer
                      (           io.asm):00469                 
                      (           io.asm):00470                     PRAGMA cc
                      (           io.asm):00471                 
E305                  (           io.asm):00472                 InStr:
E305 3432             (           io.asm):00473 (4+5)   9           pshs    A,X,Y
E307 1038             (           io.asm):00474 (6)     15          pshsw
E309 1F12             (           io.asm):00475 (4)     19          tfr     X,Y                 ; Stores the starting address of the string
E30B 1F9F             (           io.asm):00476 (4)     23          tfr     B,F                 ; Stores the original size of string to grab
E30D 114F             (           io.asm):00477 (2)     25          clre                        ; Clear the current byte count
E30F                  (           io.asm):00478                 InStrReadChar:
E30F BDE1A2           (           io.asm):00479 (7)     32          jsr     InChar              ; Wait for a character
                      (           io.asm):00480                     ;jsr        UpperCase   ; *** TEMPORARY
E312 810D             (           io.asm):00481 (2)     34          cmpa    #CR                 ; Is it the Carriage Return key?
E314 2748             (           io.asm):00482 (3)     37          beq     InStrPrintCR        ; Yes, then end string read
E316 8108             (           io.asm):00483 (2)     39          cmpa    #BS                 ; Is it the Backspace key?
E318 270B             (           io.asm):00484 (3)     42          beq     InStrBackspace      ; Yes, then delete previous character
E31A 811B             (           io.asm):00485 (2)     44          cmpa    #ESC                ; Has the ESC key been pressed?
E31C 271E             (           io.asm):00486 (3)     47          beq     InStrEscape         ; Yes, then quit reading string and empty buffer
E31E 2BEF             (           io.asm):00487 (3)     50          bmi     InStrReadChar       ; Don't accept ASCII character above 127?
E320 10379E           (           io.asm):00488 (4)     54          cmpr    B,E                 ; Has it reached the number of characters imposed by input?
E323 2630             (           io.asm):00489 (3)     57          bne     InStrStoreChar      ; If the max number of characters has not been reached, store it
E325                  (           io.asm):00490                 InStrBackspace:
E325 103712           (           io.asm):00491 (4)     61          cmpr    X,Y                 ; Is it the first character in the string?
E328 27E5             (           io.asm):00492 (3)     64          beq     InStrReadChar       ; No characters present, so get a new character
E32A 301F             (           io.asm):00493 (4+1)   69          leax    -1,X                ; Decrement string index
E32C 114A             (           io.asm):00494 (2)     71          dece                        ; Decrement the current byte counter
E32E 7AF43D           (           io.asm):00495 (6)     77          dec     CmdErrorPtr         ; Decrement the error pointer
E331 3404             (           io.asm):00496 (4+1)   82          pshs    B                   ; Saves B
E333 C601             (           io.asm):00497 (2)     84          ldb     #1                  ; number of characters to delete
E335 BDE1DA           (           io.asm):00498 (7)     91          jsr     DelChar             ; Delete a character
E338 3504             (           io.asm):00499 (4+1)   96          puls    B                   ; Restores B
E33A 20D3             (           io.asm):00500 (3)     99          bra     InStrReadChar       ; Go read next character
E33C                  (           io.asm):00501                 InStrEscape:
E33C 118100           (           io.asm):00502 (3)     102         cmpe    #0                  ; Is there a character in the buffer?
E33F 27CE             (           io.asm):00503 (3)     105         beq     InStrReadChar       ; No, then read a character
E341 3404             (           io.asm):00504 (4+1)   110         pshs    B                   ; Else, erase everyting
E343 1FE9             (           io.asm):00505 (4)     114         tfr     E,B                 ; Amount of bytes to delete
E345 BDE1DA           (           io.asm):00506 (7)     121         jsr     DelChar             ; Delete the whole line
E348 3504             (           io.asm):00507 (4+1)   126         puls    B
E34A 1F21             (           io.asm):00508 (4)     130         tfr     Y,X                 ; Restores string pointer position
E34C 114F             (           io.asm):00509 (2)     132         clre                        ; Clear the byte count
E34E 9609             (           io.asm):00510 (3)     135         lda     PromptSize
E350 B7F43D           (           io.asm):00511 (4)     139         sta     CmdErrorPtr         ; Reset the error pointer position
E353 20BA             (           io.asm):00512 (3)     142         bra     InStrReadChar       ; Restart by reading the first character
E355                  (           io.asm):00513                 InStrStoreChar:
E355 BDE1BC           (           io.asm):00514 (7)     149         jsr     OutChar             ; Print character on terminal
E358 A780             (           io.asm):00515 (4+1)   154         sta     ,X+                 ; Add to the text buffer
E35A 114C             (           io.asm):00516 (2)     156         ince                        ; Increment byte count
E35C 20B1             (           io.asm):00517 (3)     159         bra     InStrReadChar       ; No? Read another character
E35E                  (           io.asm):00518                 InStrPrintCR:
E35E BDE3F0           (           io.asm):00519 (7)     166         jsr     OutCRLF             ; Print carriage return
E361 6F84             (           io.asm):00520 (6+0)   172         clr     ,X                  ; Add a null termination to the input buffer string
E363 1FE9             (           io.asm):00521 (4)     176         tfr     E,B                 ; Saves actual bytes entered
E365 118100           (           io.asm):00522 (3)     179         cmpe    #0                  ; Are there any characters in the buffer?
E368 2704             (           io.asm):00523 (3)     182         beq     InStrClearCarry     ; No characters, so go clear the carry flag
E36A 1A01             (           io.asm):00524 (2)     184         orcc    #%00000001          ; Set Carry: Indicates there is data in buffer
E36C 2002             (           io.asm):00525 (3)     187         bra     InStrEnd
E36E                  (           io.asm):00526                 InStrClearCarry:
E36E 1CFE             (           io.asm):00527 (2)     189         andcc   #%11111110          ; Clear Carry: Indicates there is no data in buffer
E370                  (           io.asm):00528                 InStrEnd:
E370 1039             (           io.asm):00529 (6)     195         pulsw
E372 35B2             (           io.asm):00530 (4+7)   206         puls    A,X,Y,PC
                      (           io.asm):00531                 
                      (           io.asm):00532                 ;  ___          __        __                     _ 
                      (           io.asm):00533                 ; |_ _|  _ __   \ \      / /  ___    _ __    __| |
                      (           io.asm):00534                 ;  | |  | '_ \   \ \ /\ / /  / _ \  | '__|  / _` |
                      (           io.asm):00535                 ;  | |  | | | |   \ V  V /  | (_) | | |    | (_| |
                      (           io.asm):00536                 ; |___| |_| |_|    \_/\_/    \___/  |_|     \__,_|
                      (           io.asm):00537                 ;
                      (           io.asm):00538                 ;
                      (           io.asm):00539                 ; Read a hexadecimal word
                      (           io.asm):00540                 ; =======================
                      (           io.asm):00541                 ; Output:   D = Binary number converted from four ASCII characters read from stdin
                      (           io.asm):00542                 ; 
                      (           io.asm):00543                     PRAGMA cc
                      (           io.asm):00544                 
E374                  (           io.asm):00545                 InWord:
E374 3401             (           io.asm):00546 (4+1)   5           pshs    CC
E376 1038             (           io.asm):00547 (6)     11          pshsw
E378 BDE1A2           (           io.asm):00548 (7)     18          jsr     InChar
E37B 1F8F             (           io.asm):00549 (4)     22          tfr     A,F
E37D BDE1A2           (           io.asm):00550 (7)     29          jsr     InChar
E380 1F89             (           io.asm):00551 (4)     33          tfr     A,B
E382 BDE1A2           (           io.asm):00552 (7)     40          jsr     InChar
E385 1F8E             (           io.asm):00553 (4)     44          tfr     A,E
E387 BDE1A2           (           io.asm):00554 (7)     51          jsr     InChar
E38A 1E8F             (           io.asm):00555 (5)     56          exg     A,F
E38C BDE0B0           (           io.asm):00556 (7)     63          jsr     AscToBinWord
E38F 1039             (           io.asm):00557 (6)     69          pulsw
E391 3581             (           io.asm):00558 (4+3)   76          puls    CC,PC
                      (           io.asm):00559                 
                      (           io.asm):00560                 ;   ___            _     ____               _ 
                      (           io.asm):00561                 ;  / _ \   _   _  | |_  | __ )    ___    __| |
                      (           io.asm):00562                 ; | | | | | | | | | __| |  _ \   / __|  / _` |
                      (           io.asm):00563                 ; | |_| | | |_| | | |_  | |_) | | (__  | (_| |
                      (           io.asm):00564                 ;  \___/   \__,_|  \__| |____/   \___|  \__,_|
                      (           io.asm):00565                 ;
                      (           io.asm):00566                 ;
                      (           io.asm):00567                 ; Output BCD data, removing leading zeros
                      (           io.asm):00568                 ; =======================================
                      (           io.asm):00569                 ; Input:    Q = Data to print (ABEF)
                      (           io.asm):00570                 
E393                  (           io.asm):00571                 OutBcd:
E393 3420             (           io.asm):00572 (4+2)   82          pshs    Y
E395 108E0000         (           io.asm):00573 (4)     86          ldy     #$0000              ; X = 0 indicates to skip leading 0
E399 BDE3B1           (           io.asm):00574 (7)     93          jsr     OutBcdSub           ; Process A
E39C 1F98             (           io.asm):00575 (4)     97          tfr     B,A
E39E BDE3B1           (           io.asm):00576 (7)     104         jsr     OutBcdSub           ; Process B
E3A1 1FE8             (           io.asm):00577 (4)     108         tfr     E,A
E3A3 BDE3B1           (           io.asm):00578 (7)     115         jsr     OutBcdSub           ; Process E
E3A6 1FF8             (           io.asm):00579 (4)     119         tfr     F,A
E3A8 108E0001         (           io.asm):00580 (4)     123         ldy     #$0001              ; X = 1 indicates to keep the last 0
E3AC BDE3B1           (           io.asm):00581 (7)     130         jsr     OutBcdSub           ; Process F
E3AF 35A0             (           io.asm):00582 (4+4)   138         puls    Y,PC
                      (           io.asm):00583                 
E3B1                  (           io.asm):00584                 OutBcdSub:
E3B1 3402             (           io.asm):00585 (4+1)   143         pshs    A                   ; Save A for LSB
E3B3 44               (           io.asm):00586 (1)     144         lsra                        ; Shift MSB to LSB
E3B4 44               (           io.asm):00587 (1)     145         lsra                        ;
E3B5 44               (           io.asm):00588 (1)     146         lsra                        ;
E3B6 44               (           io.asm):00589 (1)     147         lsra                        ;
E3B7 4D               (           io.asm):00590 (1)     148         tsta                        ; Check A
E3B8 2703             (           io.asm):00591 (3)     151         beq     OutBcdSubLSB        ; If it's 0, skip printing, and check LSB
E3BA BDE3FE           (           io.asm):00592 (7)     158         jsr     OutNibble
E3BD                  (           io.asm):00593                 OutBcdSubLSB:
E3BD 3502             (           io.asm):00594 (4+1)   163         puls    A
E3BF 840F             (           io.asm):00595 (2)     165         anda    #$0F
E3C1 108C0000         (           io.asm):00596 (4)     169         cmpy    #$0000              ; Check if 0 is to be printed
E3C5 2603             (           io.asm):00597 (3)     172         bne     OutBcdSubLSB2
E3C7 4D               (           io.asm):00598 (1)     173         tsta
E3C8 2703             (           io.asm):00599 (3)     176         beq     OutBcdSubEnd
E3CA                  (           io.asm):00600                 OutBcdSubLSB2:
E3CA BDE3FE           (           io.asm):00601 (7)     183         jsr     OutNibble
E3CD                  (           io.asm):00602                 OutBcdSubEnd:
E3CD 39               (           io.asm):00603 (4)     187         rts
                      (           io.asm):00604                 
                      (           io.asm):00605                 ;   ___            _     ____            _          
                      (           io.asm):00606                 ;  / _ \   _   _  | |_  | __ )   _   _  | |_    ___ 
                      (           io.asm):00607                 ; | | | | | | | | | __| |  _ \  | | | | | __|  / _ \
                      (           io.asm):00608                 ; | |_| | | |_| | | |_  | |_) | | |_| | | |_  |  __/
                      (           io.asm):00609                 ;  \___/   \__,_|  \__| |____/   \__, |  \__|  \___|
                      (           io.asm):00610                 ;                                |___/
                      (           io.asm):00611                 ;
                      (           io.asm):00612                 ; Print a byte as 2 ASCII characters
                      (           io.asm):00613                 ; ==================================
                      (           io.asm):00614                 ; Input:    A = Byte to output
                      (           io.asm):00615                 
                      (           io.asm):00616                     PRAGMA cc
                      (           io.asm):00617                 
E3CE                  (           io.asm):00618                 OutByte:
E3CE                  (           io.asm):00619                 OutByteLZ:
E3CE 3407             (           io.asm):00620 (4+3)   7           pshs    A,B,CC
E3D0 BDE0D2           (           io.asm):00621 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3D3 BDE1BC           (           io.asm):00622 (7)     21          jsr     OutChar             ; Print MSB in A
E3D6 1F98             (           io.asm):00623 (4)     25          tfr     B,A                 ; Transfer LSB in A
E3D8 BDE1BC           (           io.asm):00624 (7)     32          jsr     OutChar             ; Print LSB that is now in A
E3DB 3587             (           io.asm):00625 (4+5)   41          puls    A,B,CC,PC
                      (           io.asm):00626                 
                      (           io.asm):00627                 ; Print a byte as 2 ASCII characters, without a leading zero
                      (           io.asm):00628                 ; ==========================================================
                      (           io.asm):00629                 ; Input:    A = Byte to output
                      (           io.asm):00630                 
                      (           io.asm):00631                     PRAGMA cc
                      (           io.asm):00632                 
E3DD                  (           io.asm):00633                 OutByteNLZ:
E3DD 3407             (           io.asm):00634 (4+3)   7           pshs    A,B,CC
E3DF BDE0D2           (           io.asm):00635 (7)     14          jsr     BinToAscByte        ; In A = binary byte, Out D = ASCII characters
E3E2 8130             (           io.asm):00636 (2)     16          cmpa    #'0'                ; Is the MSB a ASCII '0'?
E3E4 2703             (           io.asm):00637 (3)     19          beq     OutByteDigit1NLZ    ; If it is, then skip printing the first digit
E3E6 BDE1BC           (           io.asm):00638 (7)     26          jsr     OutChar             ; Print MSB in A
E3E9                  (           io.asm):00639                 OutByteDigit1NLZ:   
E3E9 1F98             (           io.asm):00640 (4)     30          tfr     B,A                 ; Transfer LSB in A
E3EB BDE1BC           (           io.asm):00641 (7)     37          jsr     OutChar             ; Print LSB that is now in A
E3EE 3587             (           io.asm):00642 (4+5)   46          puls    A,B,CC,PC
                      (           io.asm):00643                 
                      (           io.asm):00644                 ;   ___            _      ____   ____    _       _____ 
                      (           io.asm):00645                 ;  / _ \   _   _  | |_   / ___| |  _ \  | |     |  ___|
                      (           io.asm):00646                 ; | | | | | | | | | __| | |     | |_) | | |     | |_   
                      (           io.asm):00647                 ; | |_| | | |_| | | |_  | |___  |  _ <  | |___  |  _|  
                      (           io.asm):00648                 ;  \___/   \__,_|  \__|  \____| |_| \_\ |_____| |_|    
                      (           io.asm):00649                 ;
                      (           io.asm):00650                 ; Print a carriage return and linefeed
                      (           io.asm):00651                 ; ====================================
                      (           io.asm):00652                 
                      (           io.asm):00653                     PRAGMA cc
                      (           io.asm):00654                 
E3F0                  (           io.asm):00655                 OutCRLF:
E3F0 3403             (           io.asm):00656 (4+2)   6           pshs    A,CC
E3F2 860D             (           io.asm):00657 (2)     8           lda     #CR
E3F4 BDE1BC           (           io.asm):00658 (7)     15          jsr     OutChar
E3F7 860A             (           io.asm):00659 (2)     17          lda     #LF
E3F9 BDE1BC           (           io.asm):00660 (7)     24          jsr     OutChar
E3FC 3583             (           io.asm):00661 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00662                 
                      (           io.asm):00663                 ;   ___            _     _   _   _   _       _       _        
                      (           io.asm):00664                 ;  / _ \   _   _  | |_  | \ | | (_) | |__   | |__   | |   ___ 
                      (           io.asm):00665                 ; | | | | | | | | | __| |  \| | | | | '_ \  | '_ \  | |  / _ \
                      (           io.asm):00666                 ; | |_| | | |_| | | |_  | |\  | | | | |_) | | |_) | | | |  __/
                      (           io.asm):00667                 ;  \___/   \__,_|  \__| |_| \_| |_| |_.__/  |_.__/  |_|  \___|
                      (           io.asm):00668                 ;
                      (           io.asm):00669                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00670                 ; ====================================
                      (           io.asm):00671                 ; Input:    A = Nibble to output
                      (           io.asm):00672                 
                      (           io.asm):00673                     PRAGMA cc
                      (           io.asm):00674                 
E3FE                  (           io.asm):00675                 OutNibble:
E3FE                  (           io.asm):00676                 OutNibbleLSB:
E3FE 3403             (           io.asm):00677 (4+2)   6           pshs    A,CC
E400 BDE0C2           (           io.asm):00678 (7)     13          jsr     BinToAscNibble      ; Print LSB nibble
E403 BDE1BC           (           io.asm):00679 (7)     20          jsr     OutChar
E406 3583             (           io.asm):00680 (4+4)   28          puls    A,CC,PC
                      (           io.asm):00681                 
                      (           io.asm):00682                 ; Print LSB nibble as an ASCII character
                      (           io.asm):00683                 ; ====================================
                      (           io.asm):00684                 ; Input:    A = Nibble to output
                      (           io.asm):00685                 
                      (           io.asm):00686                     PRAGMA cc
                      (           io.asm):00687                 
E408                  (           io.asm):00688                 OutNibbleMSB:
E408 3403             (           io.asm):00689 (4+2)   6           pshs    A,CC
E40A 44               (           io.asm):00690 (1)     7           lsra                        ; Shift the upper nibble to the lower nibble,
E40B 44               (           io.asm):00691 (1)     8           lsra                        ;   all the while clearing the upper nibble with 0
E40C 44               (           io.asm):00692 (1)     9           lsra                        ;
E40D 44               (           io.asm):00693 (1)     10          lsra                        ;
E40E BDE0C2           (           io.asm):00694 (7)     17          jsr     BinToAscNibble      ; Print MSB nibble
E411 BDE1BC           (           io.asm):00695 (7)     24          jsr     OutChar
E414 3583             (           io.asm):00696 (4+4)   32          puls    A,CC,PC
                      (           io.asm):00697                 
                      (           io.asm):00698                 ;   ___            _     ____    _
                      (           io.asm):00699                 ;  / _ \   _   _  | |_  / ___|  | |_   _ __
                      (           io.asm):00700                 ; | | | | | | | | | __| \___ \  | __| | '__|
                      (           io.asm):00701                 ; | |_| | | |_| | | |_   ___) | | |_  | |
                      (           io.asm):00702                 ;  \___/   \__,_|  \__| |____/   \__| |_|
                      (           io.asm):00703                 ;
                      (           io.asm):00704                 ; Print a string to the screen
                      (           io.asm):00705                 ; ============================
                      (           io.asm):00706                 ; Input:    X = Address of string to print
                      (           io.asm):00707                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00708                 
                      (           io.asm):00709                     PRAGMA cc
                      (           io.asm):00710                 
E416                  (           io.asm):00711                 OutStr:
E416                  (           io.asm):00712                 OutStrLZ:
E416 3403             (           io.asm):00713 (4+2)   6           pshs    A,CC
E418                  (           io.asm):00714                 OutStrLoop:
E418 A680             (           io.asm):00715 (4+1)   11          lda     ,X+                 ; Read character pointed by X, then increments X
E41A 2709             (           io.asm):00716 (3)     14          beq     OutStrEnd           ; End routine if end of string (null) has been reached
E41C 81FF             (           io.asm):00717 (2)     16          cmpa    #EOD                ; Is second terminator detected?
E41E 2705             (           io.asm):00718 (3)     19          beq     OutStrEnd           ; End routine if end of string (EOD) has been reached
E420 17FD99           (           io.asm):00719 (7)     26          lbsr    OutChar             ; Print character
E423 20F3             (           io.asm):00720 (3)     29          bra     OutStrLoop          ; Loop to get the next character
E425                  (           io.asm):00721                 OutStrEnd:
E425 3583             (           io.asm):00722 (4+4)   37          puls    A,CC,PC
                      (           io.asm):00723                 
                      (           io.asm):00724                 ; Print a string to the screen without leading zeros
                      (           io.asm):00725                 ; ==================================================
                      (           io.asm):00726                 ; Input:    X = Address of string to print
                      (           io.asm):00727                 ; Output:   X = Address of next string (if any)
                      (           io.asm):00728                 
                      (           io.asm):00729                     PRAGMA cc
                      (           io.asm):00730                 
E427                  (           io.asm):00731                 OutStrNLZ:
E427 3407             (           io.asm):00732 (4+3)   7           pshs    A,B,CC
E429 5F               (           io.asm):00733 (1)     8           clrb                        ; Clear B register as a leading zero flag 
E42A                  (           io.asm):00734                 OutStrNLZLoop:
E42A A680             (           io.asm):00735 (4+1)   13          lda     ,X+                 ; Read character pointed by X, then increments X
E42C 81FF             (           io.asm):00736 (2)     15          cmpa    #EOD                ; Is second (End of Data) terminator detected?
E42E 270F             (           io.asm):00737 (3)     18          beq     OutStrNLZEnd        ; End routine if end of string (EOD) has been reached
E430 8130             (           io.asm):00738 (2)     20          cmpa    #'0'                ; Is it a zero?
E432 2604             (           io.asm):00739 (3)     23          bne     OutStrNLZPrintChar  ; No then go print the character
E434 8100             (           io.asm):00740 (2)     25          cmpa    #0                  ; Yes, but is it a leading zero (as opposed to embedded zeros)
E436 27F2             (           io.asm):00741 (3)     28          beq     OutStrNLZLoop       ; Yes, it's a leading zero, not an embedded one
E438                  (           io.asm):00742                 OutStrNLZPrintChar:
E438 1F89             (           io.asm):00743 (4)     32          tfr     A,B                 ; Store non-zero as flag to no longer look for leading zeros
E43A BDE1BC           (           io.asm):00744 (7)     39          jsr     OutChar             ; Print character
E43D 20EB             (           io.asm):00745 (3)     42          bra     OutStrNLZLoop       ; Loop to get the next character
E43F                  (           io.asm):00746                 OutStrNLZEnd:
E43F 3587             (           io.asm):00747 (4+5)   51          puls    A,B,CC,PC
                      (           io.asm):00748                 
                      (           io.asm):00749                 ;   ___            _    __        __                     _ 
                      (           io.asm):00750                 ;  / _ \   _   _  | |_  \ \      / /   ___    _ __    __| |
                      (           io.asm):00751                 ; | | | | | | | | | __|  \ \ /\ / /   / _ \  | '__|  / _` |
                      (           io.asm):00752                 ; | |_| | | |_| | | |_    \ V  V /   | (_) | | |    | (_| |
                      (           io.asm):00753                 ;  \___/   \__,_|  \__|    \_/\_/     \___/  |_|     \__,_|
                      (           io.asm):00754                 ;
                      (           io.asm):00755                 ; Print a word as 4 ASCII characters
                      (           io.asm):00756                 ; ==================================
                      (           io.asm):00757                 ; Input:    D = Word to output
                      (           io.asm):00758                 
                      (           io.asm):00759                     PRAGMA cc
                      (           io.asm):00760                 
E441                  (           io.asm):00761                 OutWord:
E441 3407             (           io.asm):00762 (4+3)   7           pshs    A,B,CC
E443 1038             (           io.asm):00763 (6)     13          pshsw
E445 BDE0EE           (           io.asm):00764 (7)     20          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E448 BDE1BC           (           io.asm):00765 (7)     27          jsr     OutChar             ; Print 4th digit
E44B 1F98             (           io.asm):00766 (4)     31          tfr     B,A                 ; Transfer 3rd digit in A
E44D BDE1BC           (           io.asm):00767 (7)     38          jsr     OutChar             ; Print 3rd digit
E450 1FE8             (           io.asm):00768 (4)     42          tfr     E,A                 ; Transfer 2nd digit in A
E452 BDE1BC           (           io.asm):00769 (7)     49          jsr     OutChar             ; Print 2nd digit
E455 1FF8             (           io.asm):00770 (4)     53          tfr     F,A                 ; Transfer 1st digit in A
E457 BDE1BC           (           io.asm):00771 (7)     60          jsr     OutChar             ; Print 1st digit
E45A 1039             (           io.asm):00772 (6)     66          pulsw
E45C 3587             (           io.asm):00773 (4+5)   75          puls    A,B,CC,PC
                      (           io.asm):00774                 
                      (           io.asm):00775                 ; Print a word as 4 ASCII characters, without leading zeros
                      (           io.asm):00776                 ; =========================================================
                      (           io.asm):00777                 ; Input:    D = Byte to output
                      (           io.asm):00778                 
                      (           io.asm):00779                     PRAGMA cc
                      (           io.asm):00780                 
E45E                  (           io.asm):00781                 OutWordNLZ:
E45E 3416             (           io.asm):00782 (4+4)   8           pshs    A,B,X
E460 1038             (           io.asm):00783 (6)     14          pshsw
E462 8E0000           (           io.asm):00784 (3)     17          ldx     #0                  ; Clear leading zero flag
E465 BDE0EE           (           io.asm):00785 (7)     24          jsr     BinToAscWord        ; In D = binary word, Out Q = ASCII characters
E468 8130             (           io.asm):00786 (2)     26          cmpa    #'0'                ; Is it ASCII zero?
E46A 2705             (           io.asm):00787 (3)     29          beq     OutWordNLZ2         ; If not zero, then print 1st character
E46C 3001             (           io.asm):00788 (4+1)   34          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E46E BDE1BC           (           io.asm):00789 (7)     41          jsr     OutChar             ; Print 1th digit
E471                  (           io.asm):00790                 OutWordNLZ2:
E471 1F98             (           io.asm):00791 (4)     45          tfr     B,A                 ; Transfer 3rd digit in A
E473 8130             (           io.asm):00792 (2)     47          cmpa    #'0'                ; Is it ASCII zero
E475 2605             (           io.asm):00793 (3)     50          bne     OutWordNLZp2        ; It's not zero
E477 8C0000           (           io.asm):00794 (3)     53          cmpx    #0                  ; Check leading zero flag
E47A 2705             (           io.asm):00795 (3)     56          beq     OutWordNLZ3         ; Still a leading zero, skip to next character
E47C                  (           io.asm):00796                 OutWordNLZp2:
E47C 3001             (           io.asm):00797 (4+1)   61          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E47E BDE1BC           (           io.asm):00798 (7)     68          jsr     OutChar             ; Print 2rd digit
E481                  (           io.asm):00799                 OutWordNLZ3:
E481 1FE8             (           io.asm):00800 (4)     72          tfr     E,A                 ; Transfer 2nd digit in A
E483 8130             (           io.asm):00801 (2)     74          cmpa    #'0'                ; Is it ASCII zero
E485 2605             (           io.asm):00802 (3)     77          bne     OutWordNLZp3        ; It's not zero
E487 8C0000           (           io.asm):00803 (3)     80          cmpx    #0                  ; Check leading zero flag
E48A 2705             (           io.asm):00804 (3)     83          beq     OutWordNLZ4         ; Still a leading zero, skip to next character
E48C                  (           io.asm):00805                 OutWordNLZp3:
E48C 3001             (           io.asm):00806 (4+1)   88          leax    1,X                 ; Place non zero value to indicate no more leading zeros
E48E BDE1BC           (           io.asm):00807 (7)     95          jsr     OutChar             ; Print 3nd digit
E491                  (           io.asm):00808                 OutWordNLZ4:
E491 1FF8             (           io.asm):00809 (4)     99          tfr     F,A                 ; Transfer 1st digit in A
E493 BDE1BC           (           io.asm):00810 (7)     106         jsr     OutChar             ; Print 4st digit
E496 1039             (           io.asm):00811 (6)     112         pulsw
E498 3596             (           io.asm):00812 (4+6)   122         puls    A,B,X,PC
                      (         main.asm):00190                     INCLUDE "monitor.asm"       ; Monitor commands subroutines
                      (      monitor.asm):00001                 ; ****************************************************************************************
                      (      monitor.asm):00002                 ; * Subroutines         IN          OUT         Description
                      (      monitor.asm):00003                 ; * --------------------------------------------------------------------------------------
                      (      monitor.asm):00004                 ; * CmdErrors           .           .           
                      (      monitor.asm):00005                 ; *   ErrPointer                                Print the error location
                      (      monitor.asm):00006                 ; *   ErrInvalidAddress
                      (      monitor.asm):00007                 ; *   ErrInvalidByte
                      (      monitor.asm):00008                 ; *   ErrInvalidCommand
                      (      monitor.asm):00009                 ; *   ErrInvalidParameter
                      (      monitor.asm):00010                 ; *   ErrNoParameter
                      (      monitor.asm):00011                 ; *   ErrSyntaxError
                      (      monitor.asm):00012                 ; * CmdHelp             .           .           List of monitor commands
                      (      monitor.asm):00013                 ; * CmdParse            X           .           Parse the command string
                      (      monitor.asm):00014                 ; * CmdPrompt           .           X           Print the command prompt
                      (      monitor.asm):00015                 ; * Dump                X           .           Dumps the contents of memory
                      (      monitor.asm):00016                 ; * LoadIntelHex        .           .           Intel Hex loader
                      (      monitor.asm):00017                 ; * MemoryMap           .           .           Print memory and I/O map
                      (      monitor.asm):00018                 ; * MemSize             .           .           Print the available memory of system
                      (      monitor.asm):00019                 ; * Peek                X           .           Read a byte from a memory location
                      (      monitor.asm):00020                 ; * Poke                X           .           Write a byte at a memory location
                      (      monitor.asm):00021                 ; * PrintRegisters      .           .           Print the contents of the registers
                      (      monitor.asm):00022                 ; * PushRegisters       .           .           Push the contents of the registers to RAM
                      (      monitor.asm):00023                 ; * PullRegisters       .           .           Pull the contents of the registers from RAM
                      (      monitor.asm):00024                 ; * Run                 X           .           Execute code at specified or CurrAddr
                      (      monitor.asm):00025                 ; * SetAddress          X           .           Sets the current address for commands
                      (      monitor.asm):00026                 ; * SetBank             X           .           Sets the current bank
                      (      monitor.asm):00027                 ; * SkipSpaces          X           X           Skip spaces in the command line
                      (      monitor.asm):00028                 ; ****************************************************************************************
                      (      monitor.asm):00029                 
                      (      monitor.asm):00030                 ;   ____                   _   _____                                    
                      (      monitor.asm):00031                 ;  / ___|  _ __ ___     __| | | ____|  _ __   _ __    ___    _ __   ___ 
                      (      monitor.asm):00032                 ; | |     | '_ ` _ \   / _` | |  _|   | '__| | '__|  / _ \  | '__| / __|
                      (      monitor.asm):00033                 ; | |___  | | | | | | | (_| | | |___  | |    | |    | (_) | | |    \__ \
                      (      monitor.asm):00034                 ;  \____| |_| |_| |_|  \__,_| |_____| |_|    |_|     \___/  |_|    |___/
                      (      monitor.asm):00035                 ;
                      (      monitor.asm):00036                 ; Various error messages pertaining to command line
                      (      monitor.asm):00037                 ; =================================================
                      (      monitor.asm):00038                 
                      (      monitor.asm):00039                 ; Error pointer of where the error occured on the command line
                      (      monitor.asm):00040                 ; ------------------------------------------------------------
E49A                  (      monitor.asm):00041                 ErrPointer:
E49A 3407             (      monitor.asm):00042 (4+3)   129         pshs    A,B,CC
E49C F6F43D           (      monitor.asm):00043 (4)     133         ldb     CmdErrorPtr         ; Get relative error pointer position
E49F CB09             (      monitor.asm):00044 (2)     135         addb    #PromptSize         ; Add command prompt lenght offset
E4A1                  (      monitor.asm):00045                 ErrorPointerLoop:
E4A1 8620             (      monitor.asm):00046 (2)     137         lda     #' '                ; Move cursor one space
E4A3 BDE1BC           (      monitor.asm):00047 (7)     144         jsr     OutChar             ;
E4A6 5A               (      monitor.asm):00048 (1)     145         decb                        ; Decrement position counter
E4A7 26F8             (      monitor.asm):00049 (3)     148         bne     ErrorPointerLoop    ; Has it reached the error position
E4A9 865E             (      monitor.asm):00050 (2)     150         lda     #'^'                ; Print the position pointer
E4AB BDE1BC           (      monitor.asm):00051 (7)     157         jsr     OutChar             ;
E4AE BDE3F0           (      monitor.asm):00052 (7)     164         jsr     OutCRLF             ;
E4B1 3587             (      monitor.asm):00053 (4+5)   173         puls    A,B,CC,PC
                      (      monitor.asm):00054                 
                      (      monitor.asm):00055                 ; Invalid address error message
                      (      monitor.asm):00056                 ; -----------------------------
E4B3                  (      monitor.asm):00057                 ErrInvalidAddress:
E4B3 3411             (      monitor.asm):00058 (4+3)   180         pshs    X,CC
E4B5 BDE49A           (      monitor.asm):00059 (7)     187         jsr     ErrPointer          ; Print ^ error pointer
E4B8 8EF043           (      monitor.asm):00060 (3)     190         ldx     #ErrInvalidAddrMsg  ; Print error message
E4BB BDE416           (      monitor.asm):00061 (7)     197         jsr     OutStr              ;
E4BE 3591             (      monitor.asm):00062 (4+5)   206         puls    X,CC,PC
                      (      monitor.asm):00063                 
                      (      monitor.asm):00064                 ; Invalid byte error message
                      (      monitor.asm):00065                 ; --------------------------
E4C0                  (      monitor.asm):00066                 ErrInvalidByte:
E4C0 3411             (      monitor.asm):00067 (4+3)   213         pshs    X,CC
E4C2 BDE49A           (      monitor.asm):00068 (7)     220         jsr     ErrPointer          ; Print ^ error pointer
E4C5 8EF056           (      monitor.asm):00069 (3)     223         ldx     #ErrInvalidByteMsg  ; Print error message
E4C8 BDE416           (      monitor.asm):00070 (7)     230         jsr     OutStr              ;
E4CB 3591             (      monitor.asm):00071 (4+5)   239         puls    X,CC,PC
                      (      monitor.asm):00072                 
                      (      monitor.asm):00073                 ; Invalid command error message
                      (      monitor.asm):00074                 ; -----------------------------
E4CD                  (      monitor.asm):00075                 ErrInvalidCommand:
E4CD 3411             (      monitor.asm):00076 (4+3)   246         pshs    X,CC
E4CF BDE49A           (      monitor.asm):00077 (7)     253         jsr     ErrPointer          ; Print ^ error pointer
E4D2 8EF099           (      monitor.asm):00078 (3)     256         ldx     #ErrInvalidCmdMsg   ; Print error message
E4D5 BDE416           (      monitor.asm):00079 (7)     263         jsr     OutStr              ;
E4D8 3591             (      monitor.asm):00080 (4+5)   272         puls    X,CC,PC
                      (      monitor.asm):00081                 
                      (      monitor.asm):00082                 ; Invalid parameter error message
                      (      monitor.asm):00083                 ; -------------------------------
E4DA                  (      monitor.asm):00084                 ErrInvalidParameter:
E4DA 3411             (      monitor.asm):00085 (4+3)   279         pshs    X,CC
E4DC BDE49A           (      monitor.asm):00086 (7)     286         jsr     ErrPointer          ; Print ^ error pointer
E4DF 8EF066           (      monitor.asm):00087 (3)     289         ldx     #ErrInvalidParamMsg ; Print error message
E4E2 BDE416           (      monitor.asm):00088 (7)     296         jsr     OutStr              ;
E4E5 3591             (      monitor.asm):00089 (4+5)   305         puls    X,CC,PC
                      (      monitor.asm):00090                 
                      (      monitor.asm):00091                 ; No parameter error message
                      (      monitor.asm):00092                 ; --------------------------
E4E7                  (      monitor.asm):00093                 ErrNoParameter:
E4E7 3411             (      monitor.asm):00094 (4+3)   312         pshs    X,CC
E4E9 BDE49A           (      monitor.asm):00095 (7)     319         jsr     ErrPointer          ; Print ^ error pointer
E4EC 8EF07B           (      monitor.asm):00096 (3)     322         ldx     #ErrNoParameterMsg  ; Print error message
E4EF BDE416           (      monitor.asm):00097 (7)     329         jsr     OutStr              ;
E4F2 3591             (      monitor.asm):00098 (4+5)   338         puls    X,CC,PC
                      (      monitor.asm):00099                     
                      (      monitor.asm):00100                 ; Syntax error message
                      (      monitor.asm):00101                 ; --------------------
E4F4                  (      monitor.asm):00102                 ErrSyntaxError:
E4F4 3411             (      monitor.asm):00103 (4+3)   345         pshs    X,CC
E4F6 BDE49A           (      monitor.asm):00104 (7)     352         jsr     ErrPointer          ; Print ^ error pointer
E4F9 8EF0AC           (      monitor.asm):00105 (3)     355         ldx     #ErrSyntaxErrorMsg  ; Print error message
E4FC BDE416           (      monitor.asm):00106 (7)     362         jsr     OutStr              ;
E4FF 3591             (      monitor.asm):00107 (4+5)   371         puls    X,CC,PC
                      (      monitor.asm):00108                 
                      (      monitor.asm):00109                 ;   ____                   _   _   _          _         
                      (      monitor.asm):00110                 ;  / ___|  _ __ ___     __| | | | | |   ___  | |  _ __  
                      (      monitor.asm):00111                 ; | |     | '_ ` _ \   / _` | | |_| |  / _ \ | | | '_ \ 
                      (      monitor.asm):00112                 ; | |___  | | | | | | | (_| | |  _  | |  __/ | | | |_) |
                      (      monitor.asm):00113                 ;  \____| |_| |_| |_|  \__,_| |_| |_|  \___| |_| | .__/ 
                      (      monitor.asm):00114                 ;                                                |_|
                      (      monitor.asm):00115                 ; Monitor help screen
                      (      monitor.asm):00116                 ; ===================
                      (      monitor.asm):00117                 
E501                  (      monitor.asm):00118                 CmdHelp:
E501 8EED9D           (      monitor.asm):00119 (3)     374         ldx     #CmdHelpMsg
E504 BDE416           (      monitor.asm):00120 (7)     381         jsr     OutStr
E507 39               (      monitor.asm):00121 (4)     385         rts
                      (      monitor.asm):00122                     
                      (      monitor.asm):00123                 ;   ____                   _   ____                              
                      (      monitor.asm):00124                 ;  / ___|  _ __ ___     __| | |  _ \    __ _   _ __   ___    ___ 
                      (      monitor.asm):00125                 ; | |     | '_ ` _ \   / _` | | |_) |  / _` | | '__| / __|  / _ \
                      (      monitor.asm):00126                 ; | |___  | | | | | | | (_| | |  __/  | (_| | | |    \__ \ |  __/
                      (      monitor.asm):00127                 ;  \____| |_| |_| |_|  \__,_| |_|      \__,_| |_|    |___/  \___|
                      (      monitor.asm):00128                 ;
                      (      monitor.asm):00129                 ; Command parser for the monitor
                      (      monitor.asm):00130                 ; ==============================
                      (      monitor.asm):00131                 ; Input:    X = Command Prompt String
                      (      monitor.asm):00132                 ; Clobbers: D,Y
                      (      monitor.asm):00133                 
                      (      monitor.asm):00134                     PRAGMA cc
                      (      monitor.asm):00135                 
E508                  (      monitor.asm):00136                 CmdParse:
E508 BDEBB2           (      monitor.asm):00137 (7)     7           jsr     SkipSpaces          ; Skip leading spaces
E50B BFF453           (      monitor.asm):00138 (5)     12          stx     TempWord            ; Store string pointer for command list cycling
E50E A684             (      monitor.asm):00139 (4+0)   16          lda     ,X                  ; Load first character from command string to see if it's empty
E510 273F             (      monitor.asm):00140 (3)     19          beq     CmdParseEnd         ; Is it the end of the string? Yes, then end
E512 108EED2C         (      monitor.asm):00141 (4)     23          ldy     #CmdList            ; Load command list table location in Y
E516                  (      monitor.asm):00142                 CmdParseChar:
E516 A680             (      monitor.asm):00143 (4+1)   28          lda     ,X+                 ; Load first character from command prompt string
E518 BDE14B           (      monitor.asm):00144 (7)     35          jsr     UpperCase           ; Convert character to upper case (command list is in upper case)
E51B E6A0             (      monitor.asm):00145 (4+1)   40          ldb     ,Y+                 ; Load a character from the command list
E51D 2B1C             (      monitor.asm):00146 (3)     43          bmi     CmdParseValid       ; Command code end delimiter? Execute command
E51F 103789           (      monitor.asm):00147 (4)     47          cmpr    A,B                 ; Compare command string to command list character
E522 2605             (      monitor.asm):00148 (3)     50          bne     CmdParseSkip        ; Skip command list entry and point to next command
E524 7CF43D           (      monitor.asm):00149 (6)     56          inc     CmdErrorPtr         ; Increment command line error pointer
E527 20ED             (      monitor.asm):00150 (3)     59          bra     CmdParseChar        ; Go and compare the next character
E529                  (      monitor.asm):00151                 CmdParseSkip:
E529 BEF453           (      monitor.asm):00152 (5)     64          ldx     TempWord            ; Restore command prompt pointer to starting position
E52C 7FF43D           (      monitor.asm):00153 (6)     70          clr     CmdErrorPtr         ; Restore command prompt error pointer
E52F                  (      monitor.asm):00154                 CmdParseSkipLoop:
E52F E6A0             (      monitor.asm):00155 (4+1)   75          ldb     ,Y+                 ; Read next character
E531 2AFC             (      monitor.asm):00156 (3)     78          bpl     CmdParseSkipLoop    ; Loop until command list end delimiter is found
E533 3122             (      monitor.asm):00157 (4+1)   83          leay    2,Y                 ; Jump over command address
E535 E6A4             (      monitor.asm):00158 (4+0)   87          ldb     ,Y                  ; Is it the end of the command list
E537 2715             (      monitor.asm):00159 (3)     90          beq     CmdParseNone        ; Yes it is, print error and exit
E539 20DB             (      monitor.asm):00160 (3)     93          bra     CmdParseChar        ; Repeat process until command found
E53B                  (      monitor.asm):00161                 CmdParseValid:
                      (      monitor.asm):00162                     ; Check for characters after valid command
E53B 8120             (      monitor.asm):00163 (2)     95          cmpa    #' '                ; Check for a parameter separator (space)
E53D 2704             (      monitor.asm):00164 (3)     98          beq     CmdParseExecute     ; Yes, then execute command
E53F 8100             (      monitor.asm):00165 (2)     100         cmpa    #$00                ; Check for an end of line in string (null)
E541 260B             (      monitor.asm):00166 (3)     103         bne     CmdParseNone        ; If it's something else, the command invalid, else execute
E543                  (      monitor.asm):00167                 CmdParseExecute:
E543 7AF43D           (      monitor.asm):00168 (6)     109         dec     CmdErrorPtr         ; Shift pointer -1 for arguments
E546 ECA4             (      monitor.asm):00169 (5+0)   114         ldd     ,Y                  ; Load address of command from table
E548 EDC3             (      monitor.asm):00170 (5+2)   121         std     ,--U                ; Save address to user stack
E54A 301F             (      monitor.asm):00171 (4+1)   126         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E54C 6ED1             (      monitor.asm):00172 (3+6)   135         jmp     [,U++]              ; Execute command
E54E                  (      monitor.asm):00173                 CmdParseNone:
E54E BDE4CD           (      monitor.asm):00174 (7)     142         jsr     ErrInvalidCommand   ;
E551                  (      monitor.asm):00175                 CmdParseEnd:
E551 39               (      monitor.asm):00176 (4)     146         rts
                      (      monitor.asm):00177                 
                      (      monitor.asm):00178                 ;   ____                   _   ____                                       _   
                      (      monitor.asm):00179                 ;  / ___|  _ __ ___     __| | |  _ \   _ __    ___    _ __ ___    _ __   | |_ 
                      (      monitor.asm):00180                 ; | |     | '_ ` _ \   / _` | | |_) | | '__|  / _ \  | '_ ` _ \  | '_ \  | __|
                      (      monitor.asm):00181                 ; | |___  | | | | | | | (_| | |  __/  | |    | (_) | | | | | | | | |_) | | |_ 
                      (      monitor.asm):00182                 ;  \____| |_| |_| |_|  \__,_| |_|     |_|     \___/  |_| |_| |_| | .__/   \__|
                      (      monitor.asm):00183                 ;                                                                |_|
                      (      monitor.asm):00184                 ; Prints the command prompt: BB:AAAA> where BB is bank number and AAAA is address
                      (      monitor.asm):00185                 ; -------------------------------------------------------------------------------
                      (      monitor.asm):00186                 
                      (      monitor.asm):00187                     PRAGMA cc
                      (      monitor.asm):00188                 
E552                  (      monitor.asm):00189                 CmdPrompt:
E552 3406             (      monitor.asm):00190 (4+2)   6           pshs    D
E554 B6F440           (      monitor.asm):00191 (4)     10          lda     CurrBank            ;
E557 BDE3CE           (      monitor.asm):00192 (7)     17          jsr     OutByte             ; Print current bank (not yet implemented)
E55A 863A             (      monitor.asm):00193 (2)     19          lda     #':'                ;
E55C BDE1BC           (      monitor.asm):00194 (7)     26          jsr     OutChar             ; Print separator
E55F FCF43E           (      monitor.asm):00195 (5)     31          ldd     CurrAddress         ;
E562 BDE441           (      monitor.asm):00196 (7)     38          jsr     OutWord             ; Print current address
E565 863E             (      monitor.asm):00197 (2)     40          lda     #'>'                ;
E567 BDE1BC           (      monitor.asm):00198 (7)     47          jsr     OutChar             ; Print prompt greater than symbol
E56A 8620             (      monitor.asm):00199 (2)     49          lda     #' '                ;
E56C BDE1BC           (      monitor.asm):00200 (7)     56          jsr     OutChar             ; Print space
E56F 7FF43D           (      monitor.asm):00201 (6)     62          clr     CmdErrorPtr         ; Reset command error pointer
E572 3586             (      monitor.asm):00202 (4+4)   70          puls    D,PC
                      (      monitor.asm):00203                 
                      (      monitor.asm):00204                 
                      (      monitor.asm):00205                 ;  ____    _                                         _     _              
                      (      monitor.asm):00206                 ; |  _ \  (_)   __ _    __ _   _ __     ___    ___  | |_  (_)   ___   ___ 
                      (      monitor.asm):00207                 ; | | | | | |  / _` |  / _` | | '_ \   / _ \  / __| | __| | |  / __| / __|
                      (      monitor.asm):00208                 ; | |_| | | | | (_| | | (_| | | | | | | (_) | \__ \ | |_  | | | (__  \__ \
                      (      monitor.asm):00209                 ; |____/  |_|  \__,_|  \__, | |_| |_|  \___/  |___/  \__| |_|  \___| |___/
                      (      monitor.asm):00210                 ;                      |___/                                              
                      (      monitor.asm):00211                 ;
                      (      monitor.asm):00212                 ; Diagnose RAM and some peripherals
                      (      monitor.asm):00213                 ; =================================
                      (      monitor.asm):00214                 ; Regs: A,B,E,F,X,Y
                      (      monitor.asm):00215                 
                      (      monitor.asm):00216                     PRAGMA cc
                      (      monitor.asm):00217                     
E574                  (      monitor.asm):00218                 Diagnostics:
E574 8EF00A           (      monitor.asm):00219 (3)     3           ldx     #DiagMessage        ; Diagnostics message pointer
E577 BDE416           (      monitor.asm):00220 (7)     10          jsr     OutStr              ; Print message
E57A B6FFA0           (      monitor.asm):00221 (4)     14          lda     $FFA0               ; Load current block value from bank 0
E57D 3402             (      monitor.asm):00222 (4+1)   19          pshs    A                   ; Save value
E57F B6FF90           (      monitor.asm):00223 (4)     23          lda     $FF90               ; Load INIT0 (MMU enable state)
E582 3402             (      monitor.asm):00224 (4+1)   28          pshs    A                   ; Save value
E584 B6FF91           (      monitor.asm):00225 (4)     32          lda     $FF91               ; Load INIT1 (Task number)
E587 3402             (      monitor.asm):00226 (4+1)   37          pshs    A                   ; Save value
E589 BDE96F           (      monitor.asm):00227 (7)     44          jsr     MmuOn               ; Enable MMU
E58C BDE992           (      monitor.asm):00228 (7)     51          jsr     MmuTaskSet0         ; Switch to Task 0
E58F 108E1FFF         (      monitor.asm):00229 (4)     55          ldy     #$1FFF              ; Block size (8K)
                      (      monitor.asm):00230                     ; Test first 512KB chip
E593 8600             (      monitor.asm):00231 (2)     57          lda     #$00                ; Block start
E595 3602             (      monitor.asm):00232 (4+1)   62          pshu    A
E597 118640           (      monitor.asm):00233 (3)     65          lde     #$40                ; Block End
E59A 8631             (      monitor.asm):00234 (2)     67          lda     #'1'                ; Chip number
E59C BDE5D3           (      monitor.asm):00235 (7)     74          jsr     Diag512
                      (      monitor.asm):00236                     ; Test second 512KB chip
E59F 8640             (      monitor.asm):00237 (2)     76          lda     #$40                ; Block start
E5A1 3602             (      monitor.asm):00238 (4+1)   81          pshu    A
E5A3 118680           (      monitor.asm):00239 (3)     84          lde     #$80                ; Block End
E5A6 8632             (      monitor.asm):00240 (2)     86          lda     #'2'                ; Chip number
E5A8 BDE5D3           (      monitor.asm):00241 (7)     93          jsr     Diag512
                      (      monitor.asm):00242                     ; Test third 512KB chip
E5AB 8680             (      monitor.asm):00243 (2)     95          lda     #$80                ; Block start
E5AD 3602             (      monitor.asm):00244 (4+1)   100         pshu    A
E5AF 1186C0           (      monitor.asm):00245 (3)     103         lde     #$C0                ; Block End
E5B2 8633             (      monitor.asm):00246 (2)     105         lda     #'3'                ; Chip number
E5B4 BDE5D3           (      monitor.asm):00247 (7)     112         jsr     Diag512
                      (      monitor.asm):00248                     ; Test fourth 512KB chip
E5B7 86C0             (      monitor.asm):00249 (2)     114         lda     #$C0                ; Block start
E5B9 3602             (      monitor.asm):00250 (4+1)   119         pshu    A
E5BB 118600           (      monitor.asm):00251 (3)     122         lde     #$00                ; Block End
E5BE 8634             (      monitor.asm):00252 (2)     124         lda     #'4'                ; Chip number
E5C0 BDE5D3           (      monitor.asm):00253 (7)     131         jsr     Diag512
E5C3                  (      monitor.asm):00254                 DiagEnd:
E5C3 3502             (      monitor.asm):00255 (4+1)   136         puls    A
E5C5 B7FF91           (      monitor.asm):00256 (4)     140         sta     $FF91               ; Restore task number to inital value
E5C8 3502             (      monitor.asm):00257 (4+1)   145         puls    A
E5CA B7FF90           (      monitor.asm):00258 (4)     149         sta     $FF90               ; Restore MMU state to initial value
E5CD 3502             (      monitor.asm):00259 (4+1)   154         puls    A
E5CF B7FFA0           (      monitor.asm):00260 (4)     158         sta     $FFA0               ; Restore bank0 block number to inital value
E5D2 39               (      monitor.asm):00261 (4)     162         rts
                      (      monitor.asm):00262                 
                      (      monitor.asm):00263                 ; Diagnostic subroutines
                      (      monitor.asm):00264                 ; ----------------------
                      (      monitor.asm):00265                 
                      (      monitor.asm):00266                 ; Test a complete 512KB chip
E5D3                  (      monitor.asm):00267                 Diag512:
E5D3 115F             (      monitor.asm):00268 (2)     164         clrf                        ; Clear error flag
E5D5 8EF018           (      monitor.asm):00269 (3)     167         ldx     #DiagTestingMsg     ; Testing chip message pointer
E5D8 BDE416           (      monitor.asm):00270 (7)     174         jsr     OutStr              ; Print message
E5DB BDE1BC           (      monitor.asm):00271 (7)     181         jsr     OutChar
E5DE 863A             (      monitor.asm):00272 (2)     183         lda     #':'
E5E0 BDE1BC           (      monitor.asm):00273 (7)     190         jsr     OutChar
E5E3 8620             (      monitor.asm):00274 (2)     192         lda     #' '
E5E5 BDE1BC           (      monitor.asm):00275 (7)     199         jsr     OutChar
E5E8 3702             (      monitor.asm):00276 (4+1)   204         pulu    A                   ; Load start block number
E5EA                  (      monitor.asm):00277                 Diag512Loop:
E5EA B7FFA0           (      monitor.asm):00278 (4)     208         sta     $FFA0               ; Store it to bank 0 of task 0
E5ED BDE882           (      monitor.asm):00279 (7)     215         jsr     MemSizeValidate     ; Check if there is valid memory at that location
E5F0 2428             (      monitor.asm):00280 (3)     218         bcc     DiagSkip            ; Skip test if no memory is present
E5F2 BDE3CE           (      monitor.asm):00281 (7)     225         jsr     OutByte             ; Display block number
E5F5 BDE621           (      monitor.asm):00282 (7)     232         jsr     DiagBlock           ; Test the block
E5F8 4C               (      monitor.asm):00283 (1)     233         inca                        ; Next block
E5F9 8107             (      monitor.asm):00284 (2)     235         cmpa    #$07                ; Skip ROM area
E5FB 2601             (      monitor.asm):00285 (3)     238         bne     Diag512Continue     ; It not ROM, then continue
E5FD 4C               (      monitor.asm):00286 (1)     239         inca                        ; Proceed to next block
E5FE                  (      monitor.asm):00287                 Diag512Continue:
E5FE C602             (      monitor.asm):00288 (2)     241         ldb     #2                  ; Number of bytes to erase on screen
E600 BDE1DA           (      monitor.asm):00289 (7)     248         jsr     DelChar             ; Delete block number
E603 10378E           (      monitor.asm):00290 (4)     252         cmpr    A,E                 ; Has all the blocks been tested?
E606 26E2             (      monitor.asm):00291 (3)     255         bne     Diag512Loop         ; Loop until finished
E608                  (      monitor.asm):00292                 DiagPassFail:
E608 115D             (      monitor.asm):00293 (2)     257         tstf                        ; Check error flag
E60A 2707             (      monitor.asm):00294 (3)     260         beq     DiagPass            ; If no errors found then print "Pass"
E60C                  (      monitor.asm):00295                 DiagFail:
E60C 8EF035           (      monitor.asm):00296 (3)     263         ldx     #DiagFailMsg        ; Fail message pointer
E60F BDE416           (      monitor.asm):00297 (7)     270         jsr     OutStr              ; Print fail message
E612 39               (      monitor.asm):00298 (4)     274         rts
E613                  (      monitor.asm):00299                 DiagPass:
E613 8EF02E           (      monitor.asm):00300 (3)     277         ldx     #DiagPassMsg        ; Pass message pointer
E616 BDE416           (      monitor.asm):00301 (7)     284         jsr     OutStr              ; Print Pass message
E619 39               (      monitor.asm):00302 (4)     288         rts
E61A                  (      monitor.asm):00303                 DiagSkip:
E61A 8EF03C           (      monitor.asm):00304 (3)     291         ldx     #DiagSkipMsg        ; Pass message pointer
E61D BDE416           (      monitor.asm):00305 (7)     298         jsr     OutStr              ; Print Pass message
E620 39               (      monitor.asm):00306 (4)     302         rts
                      (      monitor.asm):00307                 
                      (      monitor.asm):00308                 
                      (      monitor.asm):00309                 ; Test bank 0
E621                  (      monitor.asm):00310                 DiagBlock:
E621 8E0000           (      monitor.asm):00311 (3)     305         ldx     #$0000              ; Start address pointer
E624                  (      monitor.asm):00312                 DiagBlockLoop:
E624 BDE62F           (      monitor.asm):00313 (7)     312         jsr     DiagTest            ; Test RAM cell with different patterns
E627 3001             (      monitor.asm):00314 (4+1)   317         leax    1,X                 ; Increment address pointer
E629 103712           (      monitor.asm):00315 (4)     321         cmpr    X,Y                 ; Has the end of the block been reached?
E62C 26F6             (      monitor.asm):00316 (3)     324         bne     DiagBlockLoop       ; No, then loop
E62E 39               (      monitor.asm):00317 (4)     328         rts
                      (      monitor.asm):00318                 
                      (      monitor.asm):00319                 ; Test a cell with 2 distinct patterns
E62F                  (      monitor.asm):00320                 DiagTest:
                      (      monitor.asm):00321                     ; Read a byte and save it for later
E62F 3402             (      monitor.asm):00322 (4+1)   333         pshs    A
E631 A684             (      monitor.asm):00323 (4+0)   337         lda     ,X
E633 3402             (      monitor.asm):00324 (4+1)   342         pshs    A
                      (      monitor.asm):00325                     ; Test pattern $55
E635 C655             (      monitor.asm):00326 (2)     344         ldb     #$55
E637 BDE645           (      monitor.asm):00327 (7)     351         jsr     DiagCellPattern
                      (      monitor.asm):00328                     ; Test pattern $AA
E63A C6AA             (      monitor.asm):00329 (2)     353         ldb     #$AA
E63C BDE645           (      monitor.asm):00330 (7)     360         jsr     DiagCellPattern
                      (      monitor.asm):00331                     ; Restore original data in cell
E63F 3502             (      monitor.asm):00332 (4+1)   365         puls    A
E641 A784             (      monitor.asm):00333 (4+0)   369         sta     ,X
E643 3582             (      monitor.asm):00334 (4+3)   376         puls    A,PC
                      (      monitor.asm):00335                 
                      (      monitor.asm):00336                 ; Test and compare a cell, and flag error if any
E645                  (      monitor.asm):00337                 DiagCellPattern:
                      (      monitor.asm):00338                     ; B = Test pattern
                      (      monitor.asm):00339                     ; X = Current cell pointer
E645 E784             (      monitor.asm):00340 (4+0)   380         stb     ,X                  ; Store test pattern in memory
E647 A684             (      monitor.asm):00341 (4+0)   384         lda     ,X                  ; Read back memory
E649 103789           (      monitor.asm):00342 (4)     388         cmpr    A,B                 ; Does the memory cell match the pattern after read back
E64C 2703             (      monitor.asm):00343 (3)     391         beq     DiagCellEnd         ; If it's the same, test with next pattern
E64E 11C601           (      monitor.asm):00344 (3)     394         ldf     #$01                ; Makes sure F is non-zero
                      (      monitor.asm):00345                     ; *** Print cell error
E651                  (      monitor.asm):00346                 DiagCellEnd:
E651 39               (      monitor.asm):00347 (4)     398         rts
                      (      monitor.asm):00348                     
                      (      monitor.asm):00349                 ;  ____                              
                      (      monitor.asm):00350                 ; |  _ \   _   _   _ __ ___    _ __  
                      (      monitor.asm):00351                 ; | | | | | | | | | '_ ` _ \  | '_ \ 
                      (      monitor.asm):00352                 ; | |_| | | |_| | | | | | | | | |_) |
                      (      monitor.asm):00353                 ; |____/   \__,_| |_| |_| |_| | .__/ 
                      (      monitor.asm):00354                 ;                             |_|    
                      (      monitor.asm):00355                 ;
                      (      monitor.asm):00356                 ; Memory dump
                      (      monitor.asm):00357                 ; ===========
                      (      monitor.asm):00358                 
                      (      monitor.asm):00359                     PRAGMA cc
                      (      monitor.asm):00360                     
E652                  (      monitor.asm):00361                 Dump:
E652 BDEBB2           (      monitor.asm):00362 (7)     7           jsr     SkipSpaces          ; Remove leading white spaces
E655 A684             (      monitor.asm):00363 (4+0)   11          lda     ,X                  ; Read a character from string
E657 2708             (      monitor.asm):00364 (3)     14          beq     DumpDisplay         ; If empty, assume Current Address, and display
E659 BDE285           (      monitor.asm):00365 (7)     21          jsr     GetStrWord          ; Read address from string
E65C 2454             (      monitor.asm):00366 (3)     24          bcc     DumpInvalidAddress  ; Invalid Address if Carry is clear
E65E FDF43E           (      monitor.asm):00367 (5)     29          std     CurrAddress         ; Save inputed address in Current Address
E661                  (      monitor.asm):00368                 DumpDisplay:
E661 BEF43E           (      monitor.asm):00369 (5)     34          ldx     CurrAddress         ; Retrieve Current Address
E664 1F12             (      monitor.asm):00370 (4)     38          tfr     X,Y
E666 118610           (      monitor.asm):00371 (3)     41          lde     #16                 ; Number of lines to print
E669                  (      monitor.asm):00372                 DumpAddr:
E669 1F10             (      monitor.asm):00373 (4)     45          tfr     X,D                 ; Put Current address in D
E66B BDE441           (      monitor.asm):00374 (7)     52          jsr     OutWord             ;
E66E 863A             (      monitor.asm):00375 (2)     54          lda     #':'                ; Print address separator
E670 BDE1BC           (      monitor.asm):00376 (7)     61          jsr     OutChar             ;
E673 8620             (      monitor.asm):00377 (2)     63          lda     #' '                ; Print space separator
E675 BDE1BC           (      monitor.asm):00378 (7)     70          jsr     OutChar             ;
E678 C610             (      monitor.asm):00379 (2)     72          ldb     #BytePerLine        ; Get the number of bytes to print per line
E67A                  (      monitor.asm):00380                 DumpByte:
E67A A680             (      monitor.asm):00381 (4+1)   77          lda     ,X+                 ; Print byte from Current Address
E67C BDE3CE           (      monitor.asm):00382 (7)     84          jsr     OutByte             ;
E67F 8620             (      monitor.asm):00383 (2)     86          lda     #' '                ; Print space separator
E681 BDE1BC           (      monitor.asm):00384 (7)     93          jsr     OutChar             ;
E684 5A               (      monitor.asm):00385 (1)     94          decb                        ; Decrement byte counter
E685 26F3             (      monitor.asm):00386 (3)     97          bne     DumpByte            ; If not finished, loop and output next byte
E687 867C             (      monitor.asm):00387 (2)     99          lda     #'|'                ; Print space separator
E689 BDE1BC           (      monitor.asm):00388 (7)     106         jsr     OutChar             ;
E68C 8620             (      monitor.asm):00389 (2)     108         lda     #' '                ; Print space separator
E68E BDE1BC           (      monitor.asm):00390 (7)     115         jsr     OutChar             ;
E691 C610             (      monitor.asm):00391 (2)     117         ldb     #BytePerLine        ; Get the number of bytes to print per line
E693                  (      monitor.asm):00392                 DumpChar:
E693 A6A0             (      monitor.asm):00393 (4+1)   122         lda     ,Y+                 ; Print character from Current Address
E695 8120             (      monitor.asm):00394 (2)     124         cmpa    #' '                ; Compare character to space character
E697 2D05             (      monitor.asm):00395 (3)     127         blt     DumpCharDot         ; If lower, then print dot
E699 4D               (      monitor.asm):00396 (1)     128         tsta                        ; Is the characther in the extended ASCII range
E69A 2B02             (      monitor.asm):00397 (3)     131         bmi     DumpCharDot         ; If it is, the print dot
E69C 2002             (      monitor.asm):00398 (3)     134         bra     DumpCharPrint       ; Else, print character
E69E                  (      monitor.asm):00399                 DumpCharDot:
E69E 862E             (      monitor.asm):00400 (2)     136         lda     #'.'                ; Replace character to dot
E6A0                  (      monitor.asm):00401                 DumpCharPrint:
E6A0 BDE1BC           (      monitor.asm):00402 (7)     143         jsr     OutChar             ; Output actual or replaced character
E6A3 5A               (      monitor.asm):00403 (1)     144         decb                        ; Decrement byte counter
E6A4 26ED             (      monitor.asm):00404 (3)     147         bne     DumpChar            ; If not finished, loop and output next character
E6A6 BDE3F0           (      monitor.asm):00405 (7)     154         jsr     OutCRLF             ; Change line
E6A9 114A             (      monitor.asm):00406 (2)     156         dece                        ; Decrement the lines to print
E6AB 26BC             (      monitor.asm):00407 (3)     159         bne     DumpAddr
E6AD BFF43E           (      monitor.asm):00408 (5)     164         stx     CurrAddress         ; Store new Current Address in memory
E6B0 2003             (      monitor.asm):00409 (3)     167         bra     DumpEnd
E6B2                  (      monitor.asm):00410                 DumpInvalidAddress:
E6B2 BDE4B3           (      monitor.asm):00411 (7)     174         jsr     ErrInvalidAddress   ; Display address error
E6B5                  (      monitor.asm):00412                 DumpEnd:
E6B5 39               (      monitor.asm):00413 (4)     178         rts
                      (      monitor.asm):00414                 
                      (      monitor.asm):00415                 ;  ___           _     _____                _   
                      (      monitor.asm):00416                 ; |_ _|  _ __   | |_  |_   _|   ___   ___  | |_ 
                      (      monitor.asm):00417                 ;  | |  | '_ \  | __|   | |    / _ \ / __| | __|
                      (      monitor.asm):00418                 ;  | |  | | | | | |_    | |   |  __/ \__ \ | |_ 
                      (      monitor.asm):00419                 ; |___| |_| |_|  \__|   |_|    \___| |___/  \__|
                      (      monitor.asm):00420                 ;
                      (      monitor.asm):00421                 ; Testing Priority Interrupt Encoder
                      (      monitor.asm):00422                 ; ==================================
                      (      monitor.asm):00423                 
                      (      monitor.asm):00424                     PRAGMA cc
                      (      monitor.asm):00425                 
E6B6                  (      monitor.asm):00426                 IntTest:
E6B6 C602             (      monitor.asm):00427 (2)     2           ldb     #$2                 ; Number of bytes to erase
E6B8                  (      monitor.asm):00428                 IntTestLoop:
E6B8 BDE1AD           (      monitor.asm):00429 (7)     9           jsr     InCharNW            ; Read characther (non-waiting)
E6BB 811B             (      monitor.asm):00430 (2)     11          cmpa    #ESC                ; Is it the ESCape key?
E6BD 270F             (      monitor.asm):00431 (3)     14          beq     IntTestEnd          ; Yes, then end the routine
E6BF B6FF09           (      monitor.asm):00432 (4)     18          lda     IntVector           ; Read the interrupt vector
E6C2 44               (      monitor.asm):00433 (1)     19          lsra                        ; Shift it right
E6C3 BDE3CE           (      monitor.asm):00434 (7)     26          jsr     OutByte             ; Print value of interrupt
E6C6 BDE1CB           (      monitor.asm):00435 (7)     33          jsr     Delay               ; Let it stay still for a while
E6C9 BDE1DA           (      monitor.asm):00436 (7)     40          jsr     DelChar             ; Delete the byte on screen
E6CC 20EA             (      monitor.asm):00437 (3)     43          bra     IntTestLoop         ; Loop until ESC
E6CE                  (      monitor.asm):00438                 IntTestEnd:
E6CE 39               (      monitor.asm):00439 (4)     47          rts
                      (      monitor.asm):00440                     
                      (      monitor.asm):00441                 ;  _                           _   ___           _            _   _   _               
                      (      monitor.asm):00442                 ; | |       ___     __ _    __| | |_ _|  _ __   | |_    ___  | | | | | |   ___  __  __
                      (      monitor.asm):00443                 ; | |      / _ \   / _` |  / _` |  | |  | '_ \  | __|  / _ \ | | | |_| |  / _ \ \ \/ /
                      (      monitor.asm):00444                 ; | |___  | (_) | | (_| | | (_| |  | |  | | | | | |_  |  __/ | | |  _  | |  __/  >  < 
                      (      monitor.asm):00445                 ; |_____|  \___/   \__,_|  \__,_| |___| |_| |_|  \__|  \___| |_| |_| |_|  \___| /_/\_\
                      (      monitor.asm):00446                 ;
                      (      monitor.asm):00447                 ; Load Intel Hex file to memory
                      (      monitor.asm):00448                 ; =============================
                      (      monitor.asm):00449                 ; Regs:     D = Various data manipulation
                      (      monitor.asm):00450                 ;           E = Checksum accumulator
                      (      monitor.asm):00451                 ;           F = Flags: Bit 0 = Origin start address flag, Bit 7 = Download fail flag
                      (      monitor.asm):00452                 ;           X = Destination address to copy the record bytes to
                      (      monitor.asm):00453                 ;           Y = Byte count in current record
                      (      monitor.asm):00454                 ; Vars:     TempWord
                      (      monitor.asm):00455                 
                      (      monitor.asm):00456                     PRAGMA cc
                      (      monitor.asm):00457                     
E6CF                  (      monitor.asm):00458                 LoadIntelHex:
E6CF 105F             (      monitor.asm):00459 (2)     2           clrw                        ; Clear the flags and checksum accumulator
E6D1 8EF0BC           (      monitor.asm):00460 (3)     5           ldx     #LoadStartMsg       ; Print message that loading will commence
E6D4 BDE416           (      monitor.asm):00461 (7)     12          jsr     OutStr              ; 
E6D7                  (      monitor.asm):00462                 LoadRecord:
E6D7 BDE1A2           (      monitor.asm):00463 (7)     19          jsr     InChar              ; Read a character
E6DA 811B             (      monitor.asm):00464 (2)     21          cmpa    #ESC                ; Is it the ESC key?
E6DC 2609             (      monitor.asm):00465 (3)     24          bne     LoadStart           ; No, check for record marker
E6DE 8EF0F7           (      monitor.asm):00466 (3)     27          ldx     #LoadUserAbortErr   ; Print message that transfer is aborted
E6E1 BDE416           (      monitor.asm):00467 (7)     34          jsr     OutStr              ; 
E6E4 1600B5           (      monitor.asm):00468 (4)     38          lbra    LoadEnd             ; Exit
E6E7                  (      monitor.asm):00469                 LoadStart:
E6E7 813A             (      monitor.asm):00470 (2)     40          cmpa    #':'                ; Start of record marker
E6E9 26EC             (      monitor.asm):00471 (3)     43          bne     LoadRecord          ; Not found (also bypasses any CR and LF)
E6EB 114F             (      monitor.asm):00472 (2)     45          clre                        ; Clear checksum accumulator
                      (      monitor.asm):00473                     ; Read the record length
E6ED BDE2F4           (      monitor.asm):00474 (7)     52          jsr     InByte              ; Get record length
E6F0 1F89             (      monitor.asm):00475 (4)     56          tfr     A,B                 ; Transfer value to LSB of D
E6F2 4F               (      monitor.asm):00476 (1)     57          clra                        ; Clear MSB of D
E6F3 1F02             (      monitor.asm):00477 (4)     61          tfr     D,Y                 ; Transfer byte count D to Y
E6F5 1F9E             (      monitor.asm):00478 (4)     65          tfr     B,E                 ; Copy first value to checksum accumulator
                      (      monitor.asm):00479                     ; Read the destination address
E6F7 BDE374           (      monitor.asm):00480 (7)     72          jsr     InWord              ; Read the address
E6FA BFF453           (      monitor.asm):00481 (5)     77          stx     TempWord            ; Save last address pointed by X, as last record is $0000
E6FD 1F01             (      monitor.asm):00482 (4)     81          tfr     D,X                 ; Save the address to the X register
                      (      monitor.asm):00483                     ; Add checksum of both bytes
E6FF 10308E           (      monitor.asm):00484 (4)     85          addr    A,E                 ; Add MSB of address to checksum accumulator
E702 10309E           (      monitor.asm):00485 (4)     89          addr    B,E                 ; Add LSB of address to checksum accumulator
                      (      monitor.asm):00486                     ;Set origin address flag and store address in CurrAddress
E705 115D             (      monitor.asm):00487 (2)     91          tstf                        ; Test the flags register
E707 2B09             (      monitor.asm):00488 (3)     94          bmi     LoadRecordType      ; If it's not the first line of code read record type
E709 BFF43E           (      monitor.asm):00489 (5)     99          stx     CurrAddress         ; Save start address
E70C BFF450           (      monitor.asm):00490 (5)     104         stx     RegPC               ; Save the user PC 
E70F 11C680           (      monitor.asm):00491 (3)     107         ldf     #$80                ; Sets the origin flag
E712                  (      monitor.asm):00492                 LoadRecordType:
E712 BDE2F4           (      monitor.asm):00493 (7)     114         jsr     InByte              ; Get the record type
                      (      monitor.asm):00494                     ; Add checksum
E715 10308E           (      monitor.asm):00495 (4)     118         addr    A,E                 ; Add record type to the checksum accumulator
                      (      monitor.asm):00496                     ; Which record type is it?
E718 8100             (      monitor.asm):00497 (2)     120         cmpa    #0                  ; Is it the Data record type?
E71A 2713             (      monitor.asm):00498 (3)     123         beq     LoadData            ; Get Data
E71C 8101             (      monitor.asm):00499 (2)     125         cmpa    #1                  ; Is it the End of File record type?
E71E 273E             (      monitor.asm):00500 (3)     128         beq     LoadEOF             ; Load last line
E720 8EF112           (      monitor.asm):00501 (3)     131         ldx     #LoadRecordErr      ; 
E723 BDE416           (      monitor.asm):00502 (7)     138         jsr     OutStr              ; Print Unknown Record Type message
E726 BDE3CE           (      monitor.asm):00503 (7)     145         jsr     OutByte             ; Print the actual record number
E729 BDE3F0           (      monitor.asm):00504 (7)     152         jsr     OutCRLF             ; Change line
E72C 16006D           (      monitor.asm):00505 (4)     156         lbra    LoadEnd
E72F                  (      monitor.asm):00506                 LoadData:
                      (      monitor.asm):00507                     ; Get record type 00 (Data)
E72F BDE2F4           (      monitor.asm):00508 (7)     163         jsr     InByte              ; Read data
E732 A780             (      monitor.asm):00509 (4+1)   168         sta     ,X+                 ; Save data to RAM
                      (      monitor.asm):00510                     ; Add checksum
E734 10308E           (      monitor.asm):00511 (4)     172         addr    A,E                 ; Add byte data to checksum accumulator
E737 313F             (      monitor.asm):00512 (4+1)   177         leay    -1,Y                ; Decrement byte counter
E739 108C0000         (      monitor.asm):00513 (4)     181         cmpy    #0
E73D 26F0             (      monitor.asm):00514 (3)     184         bne     LoadData
E73F                  (      monitor.asm):00515                 LoadChecksum:
                      (      monitor.asm):00516                     ; Process accumulated checksum
E73F 1143             (      monitor.asm):00517 (2)     186         come                        ; Complement F
E741 114C             (      monitor.asm):00518 (2)     188         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00519                     ; Get record checksum
E743 BDE2F4           (      monitor.asm):00520 (7)     195         jsr     InByte              ; Read checksum
E746 10378E           (      monitor.asm):00521 (4)     199         cmpr    A,E                 ; Do the checksums match
E749 2608             (      monitor.asm):00522 (3)     202         bne     LoadFailure         ; If inconsistent, display message
E74B 862E             (      monitor.asm):00523 (2)     204         lda     #'.'                ; Character indicating line is ok
E74D BDE1BC           (      monitor.asm):00524 (7)     211         jsr     OutChar             ; Print the period character
E750 16FF84           (      monitor.asm):00525 (4)     215         lbra    LoadRecord          ; Fetch next record
E753                  (      monitor.asm):00526                 LoadFailure:
                      (      monitor.asm):00527                     ; Indicate record failed checksum
E753 11C681           (      monitor.asm):00528 (3)     218         ldf     #$81                ; Sets the checksum failure flag
E756 8678             (      monitor.asm):00529 (2)     220         lda     #'x'                ; Load the failed checksum character
E758 BDE1BC           (      monitor.asm):00530 (7)     227         jsr     OutChar             ; Print it
E75B 16FF79           (      monitor.asm):00531 (4)     231         lbra    LoadRecord          ; Get next record
E75E                  (      monitor.asm):00532                 LoadEOF:
                      (      monitor.asm):00533                     ; Process accumulated checksum
E75E 1143             (      monitor.asm):00534 (2)     233         come                        ; Complement E
E760 114C             (      monitor.asm):00535 (2)     235         ince                        ; adding one to get a 2's complement
                      (      monitor.asm):00536                     ; Get end record (01) checksum
E762 BDE2F4           (      monitor.asm):00537 (7)     242         jsr     InByte              ; Get the checksum byte
E765 10378E           (      monitor.asm):00538 (4)     246         cmpr    A,E                 ; Do the checksums match
E768 2708             (      monitor.asm):00539 (3)     249         beq     LoadCheckFlag       ; If it's the same then verify download fail flag
E76A 11C681           (      monitor.asm):00540 (3)     252         ldf     #$81                ; Sets the checksum failure flag
E76D 8658             (      monitor.asm):00541 (2)     254         lda     #'X'                ; Load the failed checksum character
E76F BDE1BC           (      monitor.asm):00542 (7)     261         jsr     OutChar             ; Print it Exit routine
E772                  (      monitor.asm):00543                 LoadCheckFlag:
E772 11C180           (      monitor.asm):00544 (3)     264         cmpf    #$80                ; Was there any checksum errors?
E775 270B             (      monitor.asm):00545 (3)     267         beq     LoadSuccess         ; If no errors, then print success
E777 BDE3F0           (      monitor.asm):00546 (7)     274         jsr     OutCRLF             ; Change line
E77A 8EF128           (      monitor.asm):00547 (3)     277         ldx     #LoadFailedErr      ; Print download failed
E77D BDE416           (      monitor.asm):00548 (7)     284         jsr     OutStr              ;
E780 201A             (      monitor.asm):00549 (3)     287         bra     LoadEnd             ;
E782                  (      monitor.asm):00550                 LoadSuccess:
E782 BEF453           (      monitor.asm):00551 (5)     292         ldx     TempWord            ; Restore last position of X
E785 CC36FF           (      monitor.asm):00552 (3)     295         ldd     #$36FF              ; Save opcode "pshu CC,A,B,DP,X,Y,S,PC"
E788 ED81             (      monitor.asm):00553 (5+2)   302         std     ,X++                ; Store it at the end of code
E78A CC103A           (      monitor.asm):00554 (3)     305         ldd     #$103A              ; Save opcode "pshuw"
E78D ED81             (      monitor.asm):00555 (5+2)   312         std     ,X++                ; Store it at the end of code
E78F 8639             (      monitor.asm):00556 (2)     314         lda     #$39                ; Save opcode "rts"
E791 A784             (      monitor.asm):00557 (4+0)   318         sta     ,X                  ; Store it at the end of code to return to prompt
E793 BDE3F0           (      monitor.asm):00558 (7)     325         jsr     OutCRLF             ; Change line
E796 8EF150           (      monitor.asm):00559 (3)     328         ldx     #LoadSuccessMsg     ; Print success message
E799 BDE416           (      monitor.asm):00560 (7)     335         jsr     OutStr
E79C                  (      monitor.asm):00561                 LoadEnd:
E79C 39               (      monitor.asm):00562 (4)     339         rts
                      (      monitor.asm):00563                 
                      (      monitor.asm):00564                 ;  __  __                                             __  __                 
                      (      monitor.asm):00565                 ; |  \/  |   ___   _ __ ___     ___    _ __   _   _  |  \/  |   __ _   _ __  
                      (      monitor.asm):00566                 ; | |\/| |  / _ \ | '_ ` _ \   / _ \  | '__| | | | | | |\/| |  / _` | | '_ \ 
                      (      monitor.asm):00567                 ; | |  | | |  __/ | | | | | | | (_) | | |    | |_| | | |  | | | (_| | | |_) |
                      (      monitor.asm):00568                 ; |_|  |_|  \___| |_| |_| |_|  \___/  |_|     \__, | |_|  |_|  \__,_| | .__/ 
                      (      monitor.asm):00569                 ;                                             |___/                   |_|
                      (      monitor.asm):00570                 ;
                      (      monitor.asm):00571                 ; Prints the memory and I/O map of the system
                      (      monitor.asm):00572                 ; ===========================================
                      (      monitor.asm):00573                 
                      (      monitor.asm):00574                     PRAGMA cc
                      (      monitor.asm):00575                     
E79D                  (      monitor.asm):00576                 MemoryMap:
E79D 8EF166           (      monitor.asm):00577 (3)     3           ldx     #MemoryMapMsg
E7A0 BDE416           (      monitor.asm):00578 (7)     10          jsr     OutStr              ; Print up to end of RAM
E7A3 CCDFFF           (      monitor.asm):00579 (3)     13          ldd     #RomStart-1
E7A6 BDE441           (      monitor.asm):00580 (7)     20          jsr     OutWord             ; Print up to ROM start -1
E7A9 BDE416           (      monitor.asm):00581 (7)     27          jsr     OutStr              ; Print up to begining of ROM
E7AC 104C             (      monitor.asm):00582 (2)     29          incd
E7AE BDE441           (      monitor.asm):00583 (7)     36          jsr     OutWord             ; Print ROM start
E7B1 862D             (      monitor.asm):00584 (2)     38          lda     #'-'
E7B3 BDE1BC           (      monitor.asm):00585 (7)     45          jsr     OutChar
E7B6 8624             (      monitor.asm):00586 (2)     47          lda     #'$'
E7B8 BDE1BC           (      monitor.asm):00587 (7)     54          jsr     OutChar
E7BB CCF33D           (      monitor.asm):00588 (3)     57          ldd     #VarStart
E7BE BDE441           (      monitor.asm):00589 (7)     64          jsr     OutWord
E7C1 BDE416           (      monitor.asm):00590 (7)     71          jsr     OutStr              ; Print till end:
E7C4 39               (      monitor.asm):00591 (4)     75          rts
                      (      monitor.asm):00592                 
                      (      monitor.asm):00593                 ;  __  __                      _____                 
                      (      monitor.asm):00594                 ; |  \/  |   ___   _ __ ___   |_   _|   __ _    __ _ 
                      (      monitor.asm):00595                 ; | |\/| |  / _ \ | '_ ` _ \    | |    / _` |  / _` |
                      (      monitor.asm):00596                 ; | |  | | |  __/ | | | | | |   | |   | (_| | | (_| |
                      (      monitor.asm):00597                 ; |_|  |_|  \___| |_| |_| |_|   |_|    \__,_|  \__, |
                      (      monitor.asm):00598                 ;                                              |___/ 
                      (      monitor.asm):00599                 ;
                      (      monitor.asm):00600                 ; Tags memory by writing block number into 8K banks
                      (      monitor.asm):00601                 ; =================================================
                      (      monitor.asm):00602                 ; Regs: A,B,W,X,Y
                      (      monitor.asm):00603                 ; Note: Future version will detect RAM amount
                      (      monitor.asm):00604                 
E7C5                  (      monitor.asm):00605                 MemTag:
E7C5 BDE96F           (      monitor.asm):00606 (7)     82          jsr     MmuOn
E7C8 863F             (      monitor.asm):00607 (2)     84          lda     #$3F                ; Start at upper memory
E7CA C602             (      monitor.asm):00608 (2)     86          ldb     #$02                ; Number of characters to erase
E7CC                  (      monitor.asm):00609                 MemTagLoop:
E7CC B7FFA0           (      monitor.asm):00610 (4)     90          sta     $FFA0               ; Store block number in bank 0
E7CF BDE3CE           (      monitor.asm):00611 (7)     97          jsr     OutByte             ; Output current block
E7D2 8EFFA0           (      monitor.asm):00612 (3)     100         ldx     #$FFA0              ; Source address containing value
E7D5 108E0000         (      monitor.asm):00613 (4)     104         ldy     #$0000              ; Destination address
E7D9 10862000         (      monitor.asm):00614 (4)     108         ldw     #$2000              ; Number of bytes to copy
E7DD 113B12           (      monitor.asm):00615 (6+?)   114         tfm     X,Y+                ; Transfer data and increment destination pointer
E7E0 BDE1DA           (      monitor.asm):00616 (7)     121         jsr     DelChar             ; Delete the previously writen byte
E7E3 8100             (      monitor.asm):00617 (2)     123         cmpa    #$00                ; Has it reached 0?
E7E5 2708             (      monitor.asm):00618 (3)     126         beq     MemTagEnd           ; Yes, then end
E7E7 4A               (      monitor.asm):00619 (1)     127         deca                        ; Decrement A
E7E8 8107             (      monitor.asm):00620 (2)     129         cmpa    #$07                ; Is it block 07, where ROM data is?
E7EA 26E0             (      monitor.asm):00621 (3)     132         bne     MemTagLoop          ; No, then copy next block
E7EC 4A               (      monitor.asm):00622 (1)     133         deca                        ; Decrement A to skip block 07
E7ED 20DD             (      monitor.asm):00623 (3)     136         bra     MemTagLoop          ; Loop to copy next block
E7EF                  (      monitor.asm):00624                 MemTagEnd:
E7EF 39               (      monitor.asm):00625 (4)     140         rts
                      (      monitor.asm):00626                 
                      (      monitor.asm):00627                 ;  __  __                      ____    _              
                      (      monitor.asm):00628                 ; |  \/  |   ___   _ __ ___   / ___|  (_)  ____   ___ 
                      (      monitor.asm):00629                 ; | |\/| |  / _ \ | '_ ` _ \  \___ \  | | |_  /  / _ \
                      (      monitor.asm):00630                 ; | |  | | |  __/ | | | | | |  ___) | | |  / /  |  __/
                      (      monitor.asm):00631                 ; |_|  |_|  \___| |_| |_| |_| |____/  |_| /___|  \___|
                      (      monitor.asm):00632                 ;
                      (      monitor.asm):00633                 ; Memory Size
                      (      monitor.asm):00634                 ; ===========
                      (      monitor.asm):00635                 ; Regs:     D = Various data manipulation (Mostly A)
                      (      monitor.asm):00636                 ;           W = Extended RAM accumulator
                      (      monitor.asm):00637                 
                      (      monitor.asm):00638                     PRAGMA cc
                      (      monitor.asm):00639                     
E7F0                  (      monitor.asm):00640                 MemSize:
                      (      monitor.asm):00641                     ; Enable MMU if not active, if not already active
E7F0 B6FF90           (      monitor.asm):00642 (4)     4           lda     $FF90               ; Read the current content of the INIT0 register
E7F3 3402             (      monitor.asm):00643 (4+1)   9           pshs    A                   ; Save the INIT0 register
E7F5 8A40             (      monitor.asm):00644 (2)     11          ora     #%01000000          ; Turn on bit-6: MMU enable
E7F7 B7FF90           (      monitor.asm):00645 (4)     15          sta     $FF90               ; Activate MMU if not already done
                      (      monitor.asm):00646                     ; Switch to task 0 if not already there
E7FA B6FF91           (      monitor.asm):00647 (4)     19          lda     $FF91               ; Read the current content of the INIT1 register
E7FD 3402             (      monitor.asm):00648 (4+1)   24          pshs    A                   ; Save the INIT1 register
E7FF 84FE             (      monitor.asm):00649 (2)     26          anda    #%11111110          ; Turn off bit-0: Task 0/1
E801 B7FF91           (      monitor.asm):00650 (4)     30          sta     $FF91               ; Switch to task 0
                      (      monitor.asm):00651                     ; Save state of first MMU bank
E804 B6FFA0           (      monitor.asm):00652 (4)     34          lda     $FFA0               ; Read block number of first bank
E807 3402             (      monitor.asm):00653 (4+1)   39          pshs    A                   ; Save the block number
                      (      monitor.asm):00654                     ; Assume first 512K chip is already installed, substracting the base 64K
E809 108601C0         (      monitor.asm):00655 (4)     43          ldw     #512-64             ; 448KB extended by default
                      (      monitor.asm):00656                     ; Verify if the 2nd 512K chip installed
E80D 8640             (      monitor.asm):00657 (2)     45          lda     #$40                ; Block number $40 is the start of 2nd 512K chip
E80F B7FFA0           (      monitor.asm):00658 (4)     49          sta     $FFA0               ; Save it in bank 0 of task 0
E812 BDE882           (      monitor.asm):00659 (7)     56          jsr     MemSizeValidate     ; Test cell at $0000
E815 2420             (      monitor.asm):00660 (3)     59          bcc     MemSizeDisplay      ; If no valid cell is detected, display tally
E817 108B0200         (      monitor.asm):00661 (4)     63          addw    #512                ; Add 512KB to total
                      (      monitor.asm):00662                     ; Verify if the 3rd 512K chip installed
E81B 8680             (      monitor.asm):00663 (2)     65          lda     #$80                ; Block number $80 is the start of 3rd 512K chip
E81D B7FFA0           (      monitor.asm):00664 (4)     69          sta     $FFA0               ; Save it in bank 0 of task 0
E820 BDE882           (      monitor.asm):00665 (7)     76          jsr     MemSizeValidate     ; Test cell at $0000
E823 2412             (      monitor.asm):00666 (3)     79          bcc     MemSizeDisplay      ; If no valid cell is detected, display tally
E825 108B0200         (      monitor.asm):00667 (4)     83          addw    #512                ; Add 512KB to total
                      (      monitor.asm):00668                     ; Verify if the 4th 512K chip installed
E829 86C0             (      monitor.asm):00669 (2)     85          lda     #$C0                ; Block number $C0 is the start of 4th 512K chip
E82B B7FFA0           (      monitor.asm):00670 (4)     89          sta     $FFA0               ; Save it in bank 0 of task 0
E82E BDE882           (      monitor.asm):00671 (7)     96          jsr     MemSizeValidate     ; Test cell at $0000
E831 2404             (      monitor.asm):00672 (3)     99          bcc     MemSizeDisplay      ; If no valid cell is detected, display tally
E833 108B0200         (      monitor.asm):00673 (4)     103         addw    #512                ; Add 512KB to total
E837                  (      monitor.asm):00674                 MemSizeDisplay:
E837 1038             (      monitor.asm):00675 (6)     109         pshsw                       ; Save W to calculate total RAM
E839 1038             (      monitor.asm):00676 (6)     115         pshsw                       ; Save W, because it gets clobberd by BinToBcd
                      (      monitor.asm):00677                     ; Start printing mem stats
E83B 8EF24C           (      monitor.asm):00678 (3)     118         ldx     #MemorySizeMsg      ; Point to Memory Size message
E83E BDE416           (      monitor.asm):00679 (7)     125         jsr     OutStr              ; Output up till "bytes free"
                      (      monitor.asm):00680                 
E841 CCE000           (      monitor.asm):00681 (3)     128         ldd     #RomStart           ; Total free RAM available **** (Update to read non empty RAM)
                      (      monitor.asm):00682                 
E844 BDE0FF           (      monitor.asm):00683 (7)     135         jsr     BinToBcd            ; Convert to BCD
E847 BDE393           (      monitor.asm):00684 (7)     142         jsr     OutBcd              ; Print free base RAM
E84A BDE416           (      monitor.asm):00685 (7)     149         jsr     OutStr              ; Print till "Extended RAM:"
E84D 3506             (      monitor.asm):00686 (4+2)   155         puls    D                   ; Restore what was W in stack to D
E84F BDE0FF           (      monitor.asm):00687 (7)     162         jsr     BinToBcd            ; Convert total extended RAM to BCD => Q
E852 BDE393           (      monitor.asm):00688 (7)     169         jsr     OutBcd              ; Output BCD number (in Q)
E855 BDE416           (      monitor.asm):00689 (7)     176         jsr     OutStr              ; Output string till "blocks free"
                      (      monitor.asm):00690                     
E858 4F               (      monitor.asm):00691 (1)     177         clra
E859 C638             (      monitor.asm):00692 (2)     179         ldb     #$40-8              ; **** (Update to count number of blocks used)
E85B BDE0FF           (      monitor.asm):00693 (7)     186         jsr     BinToBcd            ; Convert total extended RAM to BCD => Q
E85E BDE393           (      monitor.asm):00694 (7)     193         jsr     OutBcd              ; Output BCD number (in Q)
                      (      monitor.asm):00695                 
E861 BDE416           (      monitor.asm):00696 (7)     200         jsr     OutStr              ; Output string will "Total RAM"
E864 3506             (      monitor.asm):00697 (4+2)   206         puls    D                   ; Restore Extended RAM tally to D
E866 C30040           (      monitor.asm):00698 (3)     209         addd    #64                 ; Add 64 to tally
E869 BDE0FF           (      monitor.asm):00699 (7)     216         jsr     BinToBcd            ; Convert total RAM to BCD
E86C BDE393           (      monitor.asm):00700 (7)     223         jsr     OutBcd              ; Output BCD number
E86F BDE416           (      monitor.asm):00701 (7)     230         jsr     OutStr              ; Output string to the end
E872                  (      monitor.asm):00702                 MemSizeEnd:
                      (      monitor.asm):00703                     ; Restore the state of the first MMU bank
E872 3502             (      monitor.asm):00704 (4+1)   235         puls    A                   ; Get the saved bank block to accumulator
E874 B7FFA0           (      monitor.asm):00705 (4)     239         sta     $FFA0               ; Restore the block number to it's previous state
                      (      monitor.asm):00706                     ; Restore the state of the task number
E877 3502             (      monitor.asm):00707 (4+1)   244         puls    A                   ; Get the saved active task to accumulator
E879 B7FF91           (      monitor.asm):00708 (4)     248         sta     $FF91               ; Restore active task to it's previous state
                      (      monitor.asm):00709                     ; Restore MMU state
E87C 3502             (      monitor.asm):00710 (4+1)   253         puls    A                   ; Get the INIT1 status register to accumulator
E87E B7FF90           (      monitor.asm):00711 (4)     257         sta     $FF90               ; Restore the INIT1 register to it's previous state
E881 39               (      monitor.asm):00712 (4)     261         rts
                      (      monitor.asm):00713                 
                      (      monitor.asm):00714                 ; MemSize subroutine
                      (      monitor.asm):00715                 ; ------------------
                      (      monitor.asm):00716                 
E882                  (      monitor.asm):00717                 MemSizeValidate:
E882 3406             (      monitor.asm):00718 (4+2)   267         pshs    D
E884 9600             (      monitor.asm):00719 (3)     270         lda     $0000               ; Read first byte of bank 0
E886 1F89             (      monitor.asm):00720 (4)     274         tfr     A,B                 ; Save existing data to B
E888 8655             (      monitor.asm):00721 (2)     276         lda     #$55                ; Load a test pattern in A
E88A 9700             (      monitor.asm):00722 (3)     279         sta     $0000               ; Save test pattern in memory
E88C 9600             (      monitor.asm):00723 (3)     282         lda     $0000               ; Reload from memory
E88E 8155             (      monitor.asm):00724 (2)     284         cmpa    #$55                ; Compare values to see if they match
E890 260E             (      monitor.asm):00725 (3)     287         bne     MemSizeEmpty        ; If not equal, exit with Carry clear
E892 86AA             (      monitor.asm):00726 (2)     289         lda     #$AA                ; Load a second test pattern in A, to test for a fluke
E894 9700             (      monitor.asm):00727 (3)     292         sta     $0000               ; Save test pattern in memory
E896 9600             (      monitor.asm):00728 (3)     295         lda     $0000               ; Reload from memory
E898 81AA             (      monitor.asm):00729 (2)     297         cmpa    #$AA                ; Compare values to see if they match
E89A 2604             (      monitor.asm):00730 (3)     300         bne     MemSizeEmpty        ; If not equal, exit with Carry clear
E89C 1A01             (      monitor.asm):00731 (2)     302         orcc    #$01                ; Set carry flag to indicate there is an active memory cell
E89E 2002             (      monitor.asm):00732 (3)     305         bra     MemSizeValEnd       ; End subroutine
E8A0                  (      monitor.asm):00733                 MemSizeEmpty:
E8A0 1CFE             (      monitor.asm):00734 (2)     307         andcc   #$FE                ; Clear Carry to indicate the memory cell is empty
E8A2                  (      monitor.asm):00735                 MemSizeValEnd:
E8A2 D700             (      monitor.asm):00736 (3)     310         stb     $0000               ; Save back orginal data that was saved in B
E8A4 3586             (      monitor.asm):00737 (4+4)   318         puls    D,PC
                      (      monitor.asm):00738                 
                      (      monitor.asm):00739                 ;  __  __   __  __   _   _ 
                      (      monitor.asm):00740                 ; |  \/  | |  \/  | | | | |
                      (      monitor.asm):00741                 ; | |\/| | | |\/| | | | | |
                      (      monitor.asm):00742                 ; | |  | | | |  | | | |_| |
                      (      monitor.asm):00743                 ; |_|  |_| |_|  |_|  \___/ 
                      (      monitor.asm):00744                 ;
                      (      monitor.asm):00745                 ; MMU commands
                      (      monitor.asm):00746                 ; ============
                      (      monitor.asm):00747                 
                      (      monitor.asm):00748                     PRAGMA cc
                      (      monitor.asm):00749                 
E8A6                  (      monitor.asm):00750                 Mmu:
E8A6 BDEBB2           (      monitor.asm):00751 (7)     7           jsr     SkipSpaces          ; Skip leading spaces
E8A9 BFF453           (      monitor.asm):00752 (5)     12          stx     TempWord            ; Store string pointer for parameter list cycling
E8AC A684             (      monitor.asm):00753 (4+0)   16          lda     ,X                  ; Load first character from parameter string to see if it's empty
E8AE 2745             (      monitor.asm):00754 (3)     19          beq     MmuStatus           ; If no parameter has been entered, then print MMU status
E8B0 7CF43D           (      monitor.asm):00755 (6)     25          inc     CmdErrorPtr         ; Increment Error pointer 1 space to account for parameter delimiter
E8B3 11B6F43D         (      monitor.asm):00756 (5)     30          lde     CmdErrorPtr         ; Load command error pointer to E for later use
E8B7 108EF31B         (      monitor.asm):00757 (4)     34          ldy     #MmuList            ; Load parameter list table location in Y
E8BB                  (      monitor.asm):00758                 MmuParseChar:
E8BB A680             (      monitor.asm):00759 (4+1)   39          lda     ,X+                 ; Load first character from parameter prompt string
E8BD BDE14B           (      monitor.asm):00760 (7)     46          jsr     UpperCase           ; Convert character to upper case (parameter list is in upper case)
E8C0 E6A0             (      monitor.asm):00761 (4+1)   51          ldb     ,Y+                 ; Load a character from the parameter list
E8C2 2B1D             (      monitor.asm):00762 (3)     54          bmi     MmuParseValid       ; Parameter code end delimiter? Execute parameter
E8C4 103789           (      monitor.asm):00763 (4)     58          cmpr    A,B                 ; Compare parameter string to parameter list character
E8C7 2605             (      monitor.asm):00764 (3)     61          bne     MmuParseSkip        ; Skip parameter list entry and point to next parameter
E8C9 7CF43D           (      monitor.asm):00765 (6)     67          inc     CmdErrorPtr         ; Increment command line error pointer
E8CC 20ED             (      monitor.asm):00766 (3)     70          bra     MmuParseChar        ; Go and compare the next character
E8CE                  (      monitor.asm):00767                 MmuParseSkip:
E8CE BEF453           (      monitor.asm):00768 (5)     75          ldx     TempWord            ; Restore parameter prompt pointer to starting position
E8D1 11B7F43D         (      monitor.asm):00769 (5)     80          ste     CmdErrorPtr         ; Restore command prompt error pointer
E8D5                  (      monitor.asm):00770                 MmuParseSkipLoop:
E8D5 E6A0             (      monitor.asm):00771 (4+1)   85          ldb     ,Y+                 ; Read next character
E8D7 2AFC             (      monitor.asm):00772 (3)     88          bpl     MmuParseSkipLoop    ; Loop until parameter list end delimiter is found
E8D9 3122             (      monitor.asm):00773 (4+1)   93          leay    2,Y                 ; Jump over parameter address
E8DB E6A4             (      monitor.asm):00774 (4+0)   97          ldb     ,Y                  ; Is it the end of the parameter list
E8DD 2712             (      monitor.asm):00775 (3)     100         beq     MmuParseNone        ; Yes it is, print error and exit
E8DF 20DA             (      monitor.asm):00776 (3)     103         bra     MmuParseChar        ; Repeat process until parameter found
E8E1                  (      monitor.asm):00777                 MmuParseValid:
                      (      monitor.asm):00778                     ; Check for characters after valid parameter
E8E1 8120             (      monitor.asm):00779 (2)     105         cmpa    #' '                ; Check for a parameter separator (space)
E8E3 2704             (      monitor.asm):00780 (3)     108         beq     MmuParseExecute     ; Yes, then execute parameter
E8E5 8100             (      monitor.asm):00781 (2)     110         cmpa    #$00                ; Check for an end of line in string (null)
E8E7 2608             (      monitor.asm):00782 (3)     113         bne     MmuParseNone        ; If it's something else, the parameter invalid, else execute
E8E9                  (      monitor.asm):00783                 MmuParseExecute:
                      (      monitor.asm):00784                 ;   inc     CmdErrorPtr         ; Shift pointer by 1 for arguments in command line
E8E9 ECA4             (      monitor.asm):00785 (5+0)   118         ldd     ,Y                  ; Load address of parameter from table
E8EB EDC3             (      monitor.asm):00786 (5+2)   125         std     ,--U                ; Save address to user stack
E8ED 301F             (      monitor.asm):00787 (4+1)   130         leax    -1,X                ; Backup pointer 1 position, because of the auto advance above
E8EF 6ED1             (      monitor.asm):00788 (3+6)   139         jmp     [,U++]              ; Execute parameter
E8F1                  (      monitor.asm):00789                 MmuParseNone:
E8F1 BDE4DA           (      monitor.asm):00790 (7)     146         jsr     ErrInvalidParameter ;
E8F4 39               (      monitor.asm):00791 (4)     150         rts
                      (      monitor.asm):00792                 
                      (      monitor.asm):00793                 ; MMU subroutines
                      (      monitor.asm):00794                 ; ---------------
                      (      monitor.asm):00795                 
                      (      monitor.asm):00796                 ; Prints the status of the MMU (Enabled or not, Task 0 or 1, and all bank registers)
E8F5                  (      monitor.asm):00797                 MmuStatus:
E8F5 8EF2BD           (      monitor.asm):00798 (3)     153         ldx     #MmuMsg
E8F8 BDE416           (      monitor.asm):00799 (7)     160         jsr     OutStr              ; Print up to Enabled status
                      (      monitor.asm):00800                     ; Is the MMU enabled or disabled
E8FB B6FF90           (      monitor.asm):00801 (4)     164         lda     $FF90               ; Load status of INIT0 register
E8FE 8440             (      monitor.asm):00802 (2)     166         anda    #%01000000          ; Check the status of bit 6
E900 2611             (      monitor.asm):00803 (3)     169         bne     MmuEnabled          ; If it's enabled, go print ON
E902 864F             (      monitor.asm):00804 (2)     171         lda     #'O'                ; Else print OFF
E904 BDE1BC           (      monitor.asm):00805 (7)     178         jsr     OutChar
E907 8646             (      monitor.asm):00806 (2)     180         lda     #'F'
E909 BDE1BC           (      monitor.asm):00807 (7)     187         jsr     OutChar
E90C 8646             (      monitor.asm):00808 (2)     189         lda     #'F'
E90E BDE1BC           (      monitor.asm):00809 (7)     196         jsr     OutChar
E911 200A             (      monitor.asm):00810 (3)     199         bra     MmuTaskNum          ; Check task number
E913                  (      monitor.asm):00811                 MmuEnabled:
E913 864F             (      monitor.asm):00812 (2)     201         lda     #'O'
E915 BDE1BC           (      monitor.asm):00813 (7)     208         jsr     OutChar
E918 864E             (      monitor.asm):00814 (2)     210         lda     #'N'
E91A BDE1BC           (      monitor.asm):00815 (7)     217         jsr     OutChar
E91D                  (      monitor.asm):00816                 MmuTaskNum:
                      (      monitor.asm):00817                     ; What is the task number?
E91D BDE416           (      monitor.asm):00818 (7)     224         jsr     OutStr              ; Print up to Task 0/1
E920 B6FF91           (      monitor.asm):00819 (4)     228         lda     $FF91               ; Load the status of INIT1 register
E923 8401             (      monitor.asm):00820 (2)     230         anda    #%00000001          ; Check the status of bit 1
E925 2607             (      monitor.asm):00821 (3)     233         bne     MmuTaskNum1         ; If it's 1, go print 1
E927 8630             (      monitor.asm):00822 (2)     235         lda     #'0'                ; Else print 0
E929 BDE1BC           (      monitor.asm):00823 (7)     242         jsr     OutChar
E92C 2005             (      monitor.asm):00824 (3)     245         bra     MmuTaskRegs
E92E                  (      monitor.asm):00825                 MmuTaskNum1:
E92E 8631             (      monitor.asm):00826 (2)     247         lda     #'1'
E930 BDE1BC           (      monitor.asm):00827 (7)     254         jsr     OutChar
E933                  (      monitor.asm):00828                 MmuTaskRegs:
                      (      monitor.asm):00829                     ; Print the status of the bank registers $FFA0 to $FFAF
E933 BDE416           (      monitor.asm):00830 (7)     261         jsr     OutStr              ; Print up to Task 1
E936 108EFFA0         (      monitor.asm):00831 (4)     265         ldy     #TASK0              ; Load base task 0 address ($FFA0)
E93A C608             (      monitor.asm):00832 (2)     267         ldb     #8                  ; 8 block counter
E93C                  (      monitor.asm):00833                 MmuTask0Loop:
E93C A6A4             (      monitor.asm):00834 (4+0)   271         lda     ,Y                  ; Load content pointed by Y and increment to next address
E93E BDE3CE           (      monitor.asm):00835 (7)     278         jsr     OutByte             ; Print content
E941 862D             (      monitor.asm):00836 (2)     280         lda     #'-'                ; Print separator
E943 BDE1BC           (      monitor.asm):00837 (7)     287         jsr     OutChar
E946 3121             (      monitor.asm):00838 (4+1)   292         leay    1,Y
E948 5A               (      monitor.asm):00839 (1)     293         decb                        ; Decrease pointer
E949 26F1             (      monitor.asm):00840 (3)     296         bne     MmuTask0Loop        ; Loop until all 8 blocks are printed
E94B 5C               (      monitor.asm):00841 (1)     297         incb                        ; 0+1 is the number of characters to delete
E94C BDE1DA           (      monitor.asm):00842 (7)     304         jsr     DelChar             ; Delete last dash
E94F BDE416           (      monitor.asm):00843 (7)     311         jsr     OutStr              ; Print till Task 1:
E952 108EFFA8         (      monitor.asm):00844 (4)     315         ldy     #TASK1              ; Load base task 1 address ($FFA8)
E956 C608             (      monitor.asm):00845 (2)     317         ldb     #8                  ; 8 block counter
E958                  (      monitor.asm):00846                 MmuTask1Loop:
E958 A6A4             (      monitor.asm):00847 (4+0)   321         lda     ,Y                  ; Load the content pointed by Y and increment to next address
E95A BDE3CE           (      monitor.asm):00848 (7)     328         jsr     OutByte             ; Print content
E95D 862D             (      monitor.asm):00849 (2)     330         lda     #'-'                ; Print separator
E95F BDE1BC           (      monitor.asm):00850 (7)     337         jsr     OutChar
E962 3121             (      monitor.asm):00851 (4+1)   342         leay    1,Y
E964 5A               (      monitor.asm):00852 (1)     343         decb                        ; Decrement pointer
E965 26F1             (      monitor.asm):00853 (3)     346         bne     MmuTask1Loop        ; Loop until all 8 blocks are printed
E967 5C               (      monitor.asm):00854 (1)     347         incb                        ; 0+1 is the number of characters to delete
E968 BDE1DA           (      monitor.asm):00855 (7)     354         jsr     DelChar             ; Delete last dash
E96B BDE3F0           (      monitor.asm):00856 (7)     361         jsr     OutCRLF             ; Change line
E96E                  (      monitor.asm):00857                 MmuStatusEnd:
E96E 39               (      monitor.asm):00858 (4)     365         rts
                      (      monitor.asm):00859                 
                      (      monitor.asm):00860                 ; Turns on the MMU
E96F                  (      monitor.asm):00861                 MmuOn:
E96F B6FF90           (      monitor.asm):00862 (4)     369         lda     $FF90               ; Load INIT0
E972 8A40             (      monitor.asm):00863 (2)     371         ora     #%01000000          ; Activate bit 6
E974 B7FF90           (      monitor.asm):00864 (4)     375         sta     $FF90               ; Store INIT0 to activate MMU
E977 39               (      monitor.asm):00865 (4)     379         rts
                      (      monitor.asm):00866                 
                      (      monitor.asm):00867                 ; Turns off the MMU
E978                  (      monitor.asm):00868                 MmuOff:
E978 B6FF90           (      monitor.asm):00869 (4)     383         lda     $FF90               ; Load INIT0
E97B 84BF             (      monitor.asm):00870 (2)     385         anda    #%10111111          ; Deactivate bit 6
E97D B7FF90           (      monitor.asm):00871 (4)     389         sta     $FF90               ; Store INIT0 to activate MMU
E980 39               (      monitor.asm):00872 (4)     393         rts
                      (      monitor.asm):00873                     
                      (      monitor.asm):00874                 ; Select the Task number
E981                  (      monitor.asm):00875                 MmuTask:
E981 BDEBB2           (      monitor.asm):00876 (7)     400         jsr     SkipSpaces          ; Remove leading spaces
E984 A684             (      monitor.asm):00877 (4+0)   404         lda     ,X                  ; Load first character
E986 271C             (      monitor.asm):00878 (3)     407         beq     MmuTaskErr          ; Is it the end of the string?
E988 8130             (      monitor.asm):00879 (2)     409         cmpa    #'0'                ; Is it task 0?
E98A 2706             (      monitor.asm):00880 (3)     412         beq     MmuTaskSet0         ; Yes, then set to task 0
E98C 8131             (      monitor.asm):00881 (2)     414         cmpa    #'1'                ; Is it task 1?
E98E 270B             (      monitor.asm):00882 (3)     417         beq     MmuTaskSet1         ; Yes, then set to task 1
E990 2012             (      monitor.asm):00883 (3)     420         bra     MmuTaskErr
E992                  (      monitor.asm):00884                 MmuTaskSet0:
E992 B6FF91           (      monitor.asm):00885 (4)     424         lda     $FF91               ; Load INIT1
E995 84FE             (      monitor.asm):00886 (2)     426         anda    #%11111110          ; Deactivate bit 0
E997 B7FF91           (      monitor.asm):00887 (4)     430         sta     $FF91               ; Store INIT1 to switch to task 0
E99A 39               (      monitor.asm):00888 (4)     434         rts
E99B                  (      monitor.asm):00889                 MmuTaskSet1:
E99B B6FF91           (      monitor.asm):00890 (4)     438         lda     $FF91               ; Load INIT1
E99E 8A01             (      monitor.asm):00891 (2)     440         ora     #%00000001          ; Activate bit 0
E9A0 B7FF91           (      monitor.asm):00892 (4)     444         sta     $FF91               ; Store INIT1 to switch to task 1
E9A3 39               (      monitor.asm):00893 (4)     448         rts
E9A4                  (      monitor.asm):00894                 MmuTaskErr:
E9A4 BDE4DA           (      monitor.asm):00895 (7)     455         jsr     ErrInvalidParameter ; Print invalid parameter message
E9A7 39               (      monitor.asm):00896 (4)     459         rts
                      (      monitor.asm):00897                     
                      (      monitor.asm):00898                 ; Reset the MMU to it's defaults
E9A8                  (      monitor.asm):00899                 MmuReset:
E9A8 BDE978           (      monitor.asm):00900 (7)     466         jsr     MmuOff              ; Disable MMU
E9AB BDE992           (      monitor.asm):00901 (7)     473         jsr     MmuTaskSet0         ; Switch to Task 0
                      (      monitor.asm):00902                     ; Reset Banks to default
E9AE 8EFC00           (      monitor.asm):00903 (3)     476         ldx     #BlockTable         ; Block table base address
E9B1 108EFFA0         (      monitor.asm):00904 (4)     480         ldy     #TASK0              ; Bank registers base address
E9B5 4F               (      monitor.asm):00905 (1)     481         clra                        ; Set A to 0
E9B6                  (      monitor.asm):00906                 MmuResetLoop:
E9B6 A780             (      monitor.asm):00907 (4+1)   486         sta     ,X+                 ; Store value in block table
E9B8 A7A0             (      monitor.asm):00908 (4+1)   491         sta     ,Y+                 ; Store value in bank register
E9BA 4C               (      monitor.asm):00909 (1)     492         inca                        ; Increment A
E9BB 810F             (      monitor.asm):00910 (2)     494         cmpa    #$0F                ; Are we at the last address?
E9BD 26F7             (      monitor.asm):00911 (3)     497         bne     MmuResetLoop        ; No, continue reseting the bank registers
E9BF 8607             (      monitor.asm):00912 (2)     499         lda     #$07                ; Set the 8th bank of task 1 to match that of task 0
E9C1 A784             (      monitor.asm):00913 (4+0)   503         sta     ,X                  ; Store it
E9C3 A7A4             (      monitor.asm):00914 (4+0)   507         sta     ,Y                  ; Store it
E9C5 39               (      monitor.asm):00915 (4)     511         rts
                      (      monitor.asm):00916                 
                      (      monitor.asm):00917                 ;  ____                  _    
                      (      monitor.asm):00918                 ; |  _ \    ___    ___  | | __
                      (      monitor.asm):00919                 ; | |_) |  / _ \  / _ \ | |/ /
                      (      monitor.asm):00920                 ; |  __/  |  __/ |  __/ |   < 
                      (      monitor.asm):00921                 ; |_|      \___|  \___| |_|\_\
                      (      monitor.asm):00922                 ;
                      (      monitor.asm):00923                 ; Read a byte from a specific or current address
                      (      monitor.asm):00924                 ; ==============================================
                      (      monitor.asm):00925                 
                      (      monitor.asm):00926                     PRAGMA cc
                      (      monitor.asm):00927                     
E9C6                  (      monitor.asm):00928                 Peek:
E9C6 BDEBB2           (      monitor.asm):00929 (7)     7           jsr     SkipSpaces
E9C9 A684             (      monitor.asm):00930 (4+0)   11          lda     ,X
E9CB 2708             (      monitor.asm):00931 (3)     14          beq     PeekDisplay
E9CD BDE285           (      monitor.asm):00932 (7)     21          jsr     GetStrWord
E9D0 241A             (      monitor.asm):00933 (3)     24          bcc     PeekInvalidAddr
E9D2 FDF43E           (      monitor.asm):00934 (5)     29          std     CurrAddress
E9D5                  (      monitor.asm):00935                 PeekDisplay:
E9D5 FCF43E           (      monitor.asm):00936 (5)     34          ldd     CurrAddress
E9D8 BDE441           (      monitor.asm):00937 (7)     41          jsr     OutWord
E9DB 863D             (      monitor.asm):00938 (2)     43          lda     #'='
E9DD BDE1BC           (      monitor.asm):00939 (7)     50          jsr     OutChar
E9E0 A69FF43E         (      monitor.asm):00940 (4+5)   59          lda     [CurrAddress]
E9E4 BDE3CE           (      monitor.asm):00941 (7)     66          jsr     OutByte
E9E7 BDE3F0           (      monitor.asm):00942 (7)     73          jsr     OutCRLF
E9EA 2003             (      monitor.asm):00943 (3)     76          bra     PeekEnd
E9EC                  (      monitor.asm):00944                 PeekInvalidAddr:
E9EC BDE4B3           (      monitor.asm):00945 (7)     83          jsr     ErrInvalidAddress
E9EF                  (      monitor.asm):00946                 PeekEnd:
E9EF 39               (      monitor.asm):00947 (4)     87          rts
                      (      monitor.asm):00948                 
                      (      monitor.asm):00949                 ;  ____            _           
                      (      monitor.asm):00950                 ; |  _ \    ___   | | __   ___ 
                      (      monitor.asm):00951                 ; | |_) |  / _ \  | |/ /  / _ \
                      (      monitor.asm):00952                 ; |  __/  | (_) | |   <  |  __/
                      (      monitor.asm):00953                 ; |_|      \___/  |_|\_\  \___|
                      (      monitor.asm):00954                 ;
                      (      monitor.asm):00955                 ;
                      (      monitor.asm):00956                 ; Writes a byte at a specific address
                      (      monitor.asm):00957                 ; ===================================
                      (      monitor.asm):00958                 
                      (      monitor.asm):00959                     PRAGMA cc
                      (      monitor.asm):00960                     
E9F0                  (      monitor.asm):00961                 Poke:
E9F0 BDEBB2           (      monitor.asm):00962 (7)     7           jsr     SkipSpaces          ; Remove excessive leading spaces
E9F3 A684             (      monitor.asm):00963 (4+0)   11          lda     ,X                  ; Load character
E9F5 2735             (      monitor.asm):00964 (3)     14          beq     PokeNoParameters    ; If no parameters, print no parameter error
E9F7 BDE285           (      monitor.asm):00965 (7)     21          jsr     GetStrWord          ; Get an address
E9FA 242B             (      monitor.asm):00966 (3)     24          bcc     PokeInvalidAddress  ; If error in address, print invalid address error
E9FC FDF43E           (      monitor.asm):00967 (5)     29          std     CurrAddress         ; Save address
E9FF BDEBB2           (      monitor.asm):00968 (7)     36          jsr     SkipSpaces          ; Remove unecessary spaces
EA02 BDE1F0           (      monitor.asm):00969 (7)     43          jsr     GetStrByte          ; Get byte
EA05 241B             (      monitor.asm):00970 (3)     46          bcc     PokeInvalidByte     ; If error in byte, print invalid byte error
EA07 A79FF43E         (      monitor.asm):00971 (4+5)   55          sta     [CurrAddress]       ; Poke value at address
EA0B FCF43E           (      monitor.asm):00972 (5)     60          ldd     CurrAddress         ; Print address
EA0E BDE441           (      monitor.asm):00973 (7)     67          jsr     OutWord             ;
EA11 863D             (      monitor.asm):00974 (2)     69          lda     #'='                ; Print a colon
EA13 BDE1BC           (      monitor.asm):00975 (7)     76          jsr     OutChar             ;
EA16 A69FF43E         (      monitor.asm):00976 (4+5)   85          lda     [CurrAddress]       ; Load A from Current Address
EA1A BDE3CE           (      monitor.asm):00977 (7)     92          jsr     OutByte             ; Print byte value
EA1D BDE3F0           (      monitor.asm):00978 (7)     99          jsr     OutCRLF             ; New line
EA20 200D             (      monitor.asm):00979 (3)     102         bra     PokeEnd
EA22                  (      monitor.asm):00980                 PokeInvalidByte:
EA22 BDE4C0           (      monitor.asm):00981 (7)     109         jsr     ErrInvalidByte      ; Print invalid byte
EA25 2008             (      monitor.asm):00982 (3)     112         bra     PokeEnd
EA27                  (      monitor.asm):00983                 PokeInvalidAddress:
EA27 BDE4B3           (      monitor.asm):00984 (7)     119         jsr     ErrInvalidAddress   ; Print invalid address error
EA2A 2003             (      monitor.asm):00985 (3)     122         bra     PokeEnd
EA2C                  (      monitor.asm):00986                 PokeNoParameters:
EA2C BDE4E7           (      monitor.asm):00987 (7)     129         jsr     ErrNoParameter      ; Print no parameter error
EA2F                  (      monitor.asm):00988                 PokeEnd:
EA2F 39               (      monitor.asm):00989 (4)     133         rts
                      (      monitor.asm):00990                 
                      (      monitor.asm):00991                 ;  ____           _           _     ____                   _         _                       
                      (      monitor.asm):00992                 ; |  _ \   _ __  (_)  _ __   | |_  |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):00993                 ; | |_) | | '__| | | | '_ \  | __| | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):00994                 ; |  __/  | |    | | | | | | | |_  |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):00995                 ; |_|     |_|    |_| |_| |_|  \__| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):00996                 ;                                                  |___/                                     
                      (      monitor.asm):00997                 ;
                      (      monitor.asm):00998                 ; Print Registers
                      (      monitor.asm):00999                 ; ===============
                      (      monitor.asm):01000                 
                      (      monitor.asm):01001                     PRAGMA cc
                      (      monitor.asm):01002                     
EA30                  (      monitor.asm):01003                 PrintRegisters:
                      (      monitor.asm):01004                     ; Print Register A
EA30 8641             (      monitor.asm):01005 (2)     2           lda     #'A'
EA32 BDE1BC           (      monitor.asm):01006 (7)     9           jsr     OutChar
EA35 863A             (      monitor.asm):01007 (2)     11          lda     #':'
EA37 BDE1BC           (      monitor.asm):01008 (7)     18          jsr     OutChar
EA3A B6F444           (      monitor.asm):01009 (4)     22          lda     RegA
EA3D BDE3CE           (      monitor.asm):01010 (7)     29          jsr     OutByte
EA40 8620             (      monitor.asm):01011 (2)     31          lda     #' '
EA42 BDE1BC           (      monitor.asm):01012 (7)     38          jsr     OutChar
                      (      monitor.asm):01013                     ; Print Register B
EA45 8642             (      monitor.asm):01014 (2)     40          lda     #'B'
EA47 BDE1BC           (      monitor.asm):01015 (7)     47          jsr     OutChar
EA4A 863A             (      monitor.asm):01016 (2)     49          lda     #':'
EA4C BDE1BC           (      monitor.asm):01017 (7)     56          jsr     OutChar
EA4F B6F445           (      monitor.asm):01018 (4)     60          lda     RegB
EA52 BDE3CE           (      monitor.asm):01019 (7)     67          jsr     OutByte
EA55 8620             (      monitor.asm):01020 (2)     69          lda     #' '
EA57 BDE1BC           (      monitor.asm):01021 (7)     76          jsr     OutChar
                      (      monitor.asm):01022                     ; Print Register E
EA5A 8645             (      monitor.asm):01023 (2)     78          lda     #'E'
EA5C BDE1BC           (      monitor.asm):01024 (7)     85          jsr     OutChar
EA5F 863A             (      monitor.asm):01025 (2)     87          lda     #':'
EA61 BDE1BC           (      monitor.asm):01026 (7)     94          jsr     OutChar
EA64 B6F446           (      monitor.asm):01027 (4)     98          lda     RegE
EA67 BDE3CE           (      monitor.asm):01028 (7)     105         jsr     OutByte
EA6A 8620             (      monitor.asm):01029 (2)     107         lda     #' '
EA6C BDE1BC           (      monitor.asm):01030 (7)     114         jsr     OutChar
                      (      monitor.asm):01031                     ; Print Register F
EA6F 8646             (      monitor.asm):01032 (2)     116         lda     #'F'
EA71 BDE1BC           (      monitor.asm):01033 (7)     123         jsr     OutChar
EA74 863A             (      monitor.asm):01034 (2)     125         lda     #':'
EA76 BDE1BC           (      monitor.asm):01035 (7)     132         jsr     OutChar
EA79 B6F447           (      monitor.asm):01036 (4)     136         lda     RegF
EA7C BDE3CE           (      monitor.asm):01037 (7)     143         jsr     OutByte
EA7F 8620             (      monitor.asm):01038 (2)     145         lda     #' '
EA81 BDE1BC           (      monitor.asm):01039 (7)     152         jsr     OutChar
                      (      monitor.asm):01040                     ; Print Register X
EA84 8658             (      monitor.asm):01041 (2)     154         lda     #'X'
EA86 BDE1BC           (      monitor.asm):01042 (7)     161         jsr     OutChar
EA89 863A             (      monitor.asm):01043 (2)     163         lda     #':'
EA8B BDE1BC           (      monitor.asm):01044 (7)     170         jsr     OutChar
EA8E FCF448           (      monitor.asm):01045 (5)     175         ldd     RegX
EA91 BDE441           (      monitor.asm):01046 (7)     182         jsr     OutWord
EA94 8620             (      monitor.asm):01047 (2)     184         lda     #' '
EA96 BDE1BC           (      monitor.asm):01048 (7)     191         jsr     OutChar
                      (      monitor.asm):01049                     ; Print Register Y
EA99 8659             (      monitor.asm):01050 (2)     193         lda     #'Y'
EA9B BDE1BC           (      monitor.asm):01051 (7)     200         jsr     OutChar
EA9E 863A             (      monitor.asm):01052 (2)     202         lda     #':'
EAA0 BDE1BC           (      monitor.asm):01053 (7)     209         jsr     OutChar
EAA3 FCF44A           (      monitor.asm):01054 (5)     214         ldd     RegY
EAA6 BDE441           (      monitor.asm):01055 (7)     221         jsr     OutWord
EAA9 8620             (      monitor.asm):01056 (2)     223         lda     #' '
EAAB BDE1BC           (      monitor.asm):01057 (7)     230         jsr     OutChar
                      (      monitor.asm):01058                     ; Print Register U
EAAE 8655             (      monitor.asm):01059 (2)     232         lda     #'U'
EAB0 BDE1BC           (      monitor.asm):01060 (7)     239         jsr     OutChar
EAB3 863A             (      monitor.asm):01061 (2)     241         lda     #':'
EAB5 BDE1BC           (      monitor.asm):01062 (7)     248         jsr     OutChar
EAB8 FCF44C           (      monitor.asm):01063 (5)     253         ldd     RegU
EABB BDE441           (      monitor.asm):01064 (7)     260         jsr     OutWord
EABE 8620             (      monitor.asm):01065 (2)     262         lda     #' '
EAC0 BDE1BC           (      monitor.asm):01066 (7)     269         jsr     OutChar
                      (      monitor.asm):01067                     ; Print Register S
EAC3 8653             (      monitor.asm):01068 (2)     271         lda     #'S'
EAC5 BDE1BC           (      monitor.asm):01069 (7)     278         jsr     OutChar
EAC8 863A             (      monitor.asm):01070 (2)     280         lda     #':'
EACA BDE1BC           (      monitor.asm):01071 (7)     287         jsr     OutChar
EACD FCF44E           (      monitor.asm):01072 (5)     292         ldd     RegS
EAD0 BDE441           (      monitor.asm):01073 (7)     299         jsr     OutWord
EAD3 8620             (      monitor.asm):01074 (2)     301         lda     #' '
EAD5 BDE1BC           (      monitor.asm):01075 (7)     308         jsr     OutChar
                      (      monitor.asm):01076                     ; Print Register CC
EAD8 8643             (      monitor.asm):01077 (2)     310         lda     #'C'
EADA BDE1BC           (      monitor.asm):01078 (7)     317         jsr     OutChar
EADD BDE1BC           (      monitor.asm):01079 (7)     324         jsr     OutChar
EAE0 863A             (      monitor.asm):01080 (2)     326         lda     #':'
EAE2 BDE1BC           (      monitor.asm):01081 (7)     333         jsr     OutChar
EAE5 B6F442           (      monitor.asm):01082 (4)     337         lda     RegCC
EAE8 BDE3CE           (      monitor.asm):01083 (7)     344         jsr     OutByte
EAEB 8620             (      monitor.asm):01084 (2)     346         lda     #' '
EAED BDE1BC           (      monitor.asm):01085 (7)     353         jsr     OutChar
                      (      monitor.asm):01086                     ; Print Register DP
EAF0 8644             (      monitor.asm):01087 (2)     355         lda     #'D'
EAF2 BDE1BC           (      monitor.asm):01088 (7)     362         jsr     OutChar
EAF5 8650             (      monitor.asm):01089 (2)     364         lda     #'P'
EAF7 BDE1BC           (      monitor.asm):01090 (7)     371         jsr     OutChar
EAFA 863A             (      monitor.asm):01091 (2)     373         lda     #':'
EAFC BDE1BC           (      monitor.asm):01092 (7)     380         jsr     OutChar
EAFF B6F443           (      monitor.asm):01093 (4)     384         lda     RegDP
EB02 BDE3CE           (      monitor.asm):01094 (7)     391         jsr     OutByte
EB05 8620             (      monitor.asm):01095 (2)     393         lda     #' '
EB07 BDE1BC           (      monitor.asm):01096 (7)     400         jsr     OutChar
                      (      monitor.asm):01097                     ; Print Program Counter
EB0A 8650             (      monitor.asm):01098 (2)     402         lda     #'P'
EB0C BDE1BC           (      monitor.asm):01099 (7)     409         jsr     OutChar
EB0F 8643             (      monitor.asm):01100 (2)     411         lda     #'C'
EB11 BDE1BC           (      monitor.asm):01101 (7)     418         jsr     OutChar
EB14 863A             (      monitor.asm):01102 (2)     420         lda     #':'
EB16 BDE1BC           (      monitor.asm):01103 (7)     427         jsr     OutChar
EB19 FCF450           (      monitor.asm):01104 (5)     432         ldd     RegPC
EB1C BDE441           (      monitor.asm):01105 (7)     439         jsr     OutWord
EB1F BDE3F0           (      monitor.asm):01106 (7)     446         jsr     OutCRLF
EB22 39               (      monitor.asm):01107 (4)     450         rts
                      (      monitor.asm):01108                 
                      (      monitor.asm):01109                 ;  ____                  _       ____                   _         _                       
                      (      monitor.asm):01110                 ; |  _ \   _   _   ___  | |__   |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):01111                 ; | |_) | | | | | / __| | '_ \  | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):01112                 ; |  __/  | |_| | \__ \ | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):01113                 ; |_|      \__,_| |___/ |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):01114                 ;                                               |___/                                     
                      (      monitor.asm):01115                 ;
                      (      monitor.asm):01116                 ; Push Registers
                      (      monitor.asm):01117                 ; ==============
                      (      monitor.asm):01118                 ; Input:    User Stack contains register content after a return from run
                      (      monitor.asm):01119                 
                      (      monitor.asm):01120                     PRAGMA cc
                      (      monitor.asm):01121                     
EB23                  (      monitor.asm):01122                 PushRegisters:  
                      (      monitor.asm):01123                     ; Recover register values from last run command
EB23 103B             (      monitor.asm):01124 (6)     6           puluw
EB25 377F             (      monitor.asm):01125 (4+10)  20          pulu    CC,A,B,DP,X,Y,S     ; Restore all, except PC
                      (      monitor.asm):01126                     ; Save registers in variables
EB27 3401             (      monitor.asm):01127 (4+1)   25          pshs    CC                  ; Store CC so it's not altered
EB29 B7F444           (      monitor.asm):01128 (4)     29          sta     RegA                ; Save the A register
EB2C 3502             (      monitor.asm):01129 (4+1)   34          puls    A                   ; Restore CC so it can be saved
EB2E B7F442           (      monitor.asm):01130 (4)     38          sta     RegCC               ; Save the condition code register
EB31 F7F445           (      monitor.asm):01131 (4)     42          stb     RegB                ; Save the B register
EB34 11B7F446         (      monitor.asm):01132 (5)     47          ste     RegE                ; Save the E register
EB38 11F7F447         (      monitor.asm):01133 (5)     52          stf     RegF                ; Save the F register
EB3C BFF448           (      monitor.asm):01134 (5)     57          stx     RegX                ; Save the X register
EB3F 10BFF44A         (      monitor.asm):01135 (6)     63          sty     RegY                ; Save the Y register
EB43 10FFF44E         (      monitor.asm):01136 (6)     69          sts     RegS                ; Save the systemp stack
EB47 3706             (      monitor.asm):01137 (4+2)   75          pulu    D                   ; Restore PC in D
EB49 830002           (      monitor.asm):01138 (3)     78          subd    #$0002              ; Substract 2 from program counter to account for the pshu instruction
EB4C FDF450           (      monitor.asm):01139 (5)     83          std     RegPC               ; Save the program counter that was in D
EB4F FFF44C           (      monitor.asm):01140 (5)     88          stu     RegU                ; Save the user stack
EB52 39               (      monitor.asm):01141 (4)     92          rts
                      (      monitor.asm):01142                 
                      (      monitor.asm):01143                 ;  ____            _   _   ____                   _         _                       
                      (      monitor.asm):01144                 ; |  _ \   _   _  | | | | |  _ \    ___    __ _  (_)  ___  | |_    ___   _ __   ___ 
                      (      monitor.asm):01145                 ; | |_) | | | | | | | | | | |_) |  / _ \  / _` | | | / __| | __|  / _ \ | '__| / __|
                      (      monitor.asm):01146                 ; |  __/  | |_| | | | | | |  _ <  |  __/ | (_| | | | \__ \ | |_  |  __/ | |    \__ \
                      (      monitor.asm):01147                 ; |_|      \__,_| |_| |_| |_| \_\  \___|  \__, | |_| |___/  \__|  \___| |_|    |___/
                      (      monitor.asm):01148                 ;                                         |___/                                     
                      (      monitor.asm):01149                 ;
                      (      monitor.asm):01150                 ; Pull Registers
                      (      monitor.asm):01151                 ; ==============
                      (      monitor.asm):01152                 
                      (      monitor.asm):01153                     PRAGMA cc
                      (      monitor.asm):01154                     
EB53                  (      monitor.asm):01155                 PullRegisters:  
EB53 B6F442           (      monitor.asm):01156 (4)     4           lda     RegCC               ; Load CC register
EB56 3402             (      monitor.asm):01157 (4+1)   9           pshs    A                   ; Store it so it can be restored
EB58 B6F444           (      monitor.asm):01158 (4)     13          lda     RegA                ; Load the A register
EB5B F6F445           (      monitor.asm):01159 (4)     17          ldb     RegB                ; Load the B register
EB5E 11B6F446         (      monitor.asm):01160 (5)     22          lde     RegE                ; Load the E register
EB62 11F6F447         (      monitor.asm):01161 (5)     27          ldf     RegF                ; Load the F register
EB66 BEF448           (      monitor.asm):01162 (5)     32          ldx     RegX                ; Load the X register
EB69 10BEF44A         (      monitor.asm):01163 (6)     38          ldy     RegY                ; Load the Y register
EB6D FEF44C           (      monitor.asm):01164 (5)     43          ldu     RegU                ; Load the user stack
EB70 3581             (      monitor.asm):01165 (4+3)   50          puls    CC,PC
                      (      monitor.asm):01166                 
                      (      monitor.asm):01167                 ;  ____                  
                      (      monitor.asm):01168                 ; |  _ \   _   _   _ __  
                      (      monitor.asm):01169                 ; | |_) | | | | | | '_ \ 
                      (      monitor.asm):01170                 ; |  _ <  | |_| | | | | |
                      (      monitor.asm):01171                 ; |_| \_\  \__,_| |_| |_|
                      (      monitor.asm):01172                 ;
                      (      monitor.asm):01173                 ; Execute code at address specified, or CurrAddress
                      (      monitor.asm):01174                 ; -------------------------------------------------
                      (      monitor.asm):01175                 ; Input:    X = Command line string
                      (      monitor.asm):01176                 
                      (      monitor.asm):01177                     PRAGMA cc
                      (      monitor.asm):01178                     
EB72                  (      monitor.asm):01179                 Run:
EB72 BDEBB2           (      monitor.asm):01180 (7)     7           jsr     SkipSpaces          ; Removes possible leading spaces
EB75 A684             (      monitor.asm):01181 (4+0)   11          lda     ,X                  ; Read character from command line
EB77 2708             (      monitor.asm):01182 (3)     14          beq     RunValidate         ; Use current address
EB79                  (      monitor.asm):01183                 RunGetAddress:
EB79 BDE285           (      monitor.asm):01184 (7)     21          jsr     GetStrWord          ; Get address from the input buffer
EB7C 2413             (      monitor.asm):01185 (3)     24          bcc     RunError            ; Invalid address, then print error
EB7E FDF43E           (      monitor.asm):01186 (5)     29          std     CurrAddress         ; Save address to memory
EB81                  (      monitor.asm):01187                 RunValidate:
EB81 A69FF43E         (      monitor.asm):01188 (4+5)   38          lda     [CurrAddress]       ; Load byte at specified address
EB85 270D             (      monitor.asm):01189 (3)     41          beq     RunEnd              ; If it's zero, then don't try to execute code
EB87                  (      monitor.asm):01190                 RunExecute:
EB87 7CF441           (      monitor.asm):01191 (6)     47          inc     RunFlag             ; Make run flag non zero
EB8A BDEB53           (      monitor.asm):01192 (7)     54          jsr     PullRegisters       ; Restore registers from previous command
EB8D 6E9FF43E         (      monitor.asm):01193 (3+5)   62          jmp     [CurrAddress]       ; Execute code at specified address
EB91                  (      monitor.asm):01194                 RunError:
EB91 BDE4B3           (      monitor.asm):01195 (7)     69          jsr     ErrInvalidAddress   ; If there's an error in the address, print it
EB94                  (      monitor.asm):01196                 RunEnd:
EB94 39               (      monitor.asm):01197 (4)     73          rts
                      (      monitor.asm):01198                 
                      (      monitor.asm):01199                 ;  ____           _        _          _       _                           
                      (      monitor.asm):01200                 ; / ___|    ___  | |_     / \      __| |   __| |  _ __    ___   ___   ___ 
                      (      monitor.asm):01201                 ; \___ \   / _ \ | __|   / _ \    / _` |  / _` | | '__|  / _ \ / __| / __|
                      (      monitor.asm):01202                 ;  ___) | |  __/ | |_   / ___ \  | (_| | | (_| | | |    |  __/ \__ \ \__ \
                      (      monitor.asm):01203                 ; |____/   \___|  \__| /_/   \_\  \__,_|  \__,_| |_|     \___| |___/ |___/
                      (      monitor.asm):01204                 ;
                      (      monitor.asm):01205                 ; Sets the current address
                      (      monitor.asm):01206                 ; ========================
                      (      monitor.asm):01207                 ; Input:    X = Command line string
                      (      monitor.asm):01208                 
                      (      monitor.asm):01209                     PRAGMA cc
                      (      monitor.asm):01210                     
EB95                  (      monitor.asm):01211                 SetAddress:
EB95 BDEBB2           (      monitor.asm):01212 (7)     7           jsr     SkipSpaces          ; Remove leading spaces
EB98 A684             (      monitor.asm):01213 (4+0)   11          lda     ,X                  ; Load first character
EB9A 270F             (      monitor.asm):01214 (3)     14          beq     SetAddressDefault   ; Is it the end of the string?
EB9C BDE285           (      monitor.asm):01215 (7)     21          jsr     GetStrWord          ; Get address from the input buffer
EB9F 2405             (      monitor.asm):01216 (3)     24          bcc     SetAddressError     ; Error in address
EBA1 FDF43E           (      monitor.asm):01217 (5)     29          std     CurrAddress         ; Save the address
EBA4 200B             (      monitor.asm):01218 (3)     32          bra     SetAddressEnd
EBA6                  (      monitor.asm):01219                 SetAddressError:
EBA6 BDE4B3           (      monitor.asm):01220 (7)     39          jsr     ErrInvalidAddress   ; Display address error
EBA9 2006             (      monitor.asm):01221 (3)     42          bra     SetAddressEnd
EBAB                  (      monitor.asm):01222                 SetAddressDefault:
EBAB CC0000           (      monitor.asm):01223 (3)     45          ldd     #$0000
EBAE FDF43E           (      monitor.asm):01224 (5)     50          std     CurrAddress         ; Set default address to $0000
EBB1                  (      monitor.asm):01225                 SetAddressEnd:
EBB1 39               (      monitor.asm):01226 (4)     54          rts
                      (      monitor.asm):01227                 
                      (      monitor.asm):01228                 ;  ____    _      _           ____                                      
                      (      monitor.asm):01229                 ; / ___|  | | __ (_)  _ __   / ___|   _ __     __ _    ___    ___   ___ 
                      (      monitor.asm):01230                 ; \___ \  | |/ / | | | '_ \  \___ \  | '_ \   / _` |  / __|  / _ \ / __|
                      (      monitor.asm):01231                 ;  ___) | |   <  | | | |_) |  ___) | | |_) | | (_| | | (__  |  __/ \__ \
                      (      monitor.asm):01232                 ; |____/  |_|\_\ |_| | .__/  |____/  | .__/   \__,_|  \___|  \___| |___/
                      (      monitor.asm):01233                 ;                    |_|             |_|
                      (      monitor.asm):01234                 ;
                      (      monitor.asm):01235                 ; Skip leading spaces in string and positions pointer to first non-space character
                      (      monitor.asm):01236                 ; ================================================================================
                      (      monitor.asm):01237                 ; Input:    X = Starting position of string pointer
                      (      monitor.asm):01238                 ; Output:   X = New position of pointer
                      (      monitor.asm):01239                 
                      (      monitor.asm):01240                     PRAGMA cc
                      (      monitor.asm):01241                 
EBB2                  (      monitor.asm):01242                 SkipSpaces:
EBB2 3402             (      monitor.asm):01243 (4+1)   5           pshs    A
EBB4                  (      monitor.asm):01244                 SkipSpacesLoop:
EBB4 A684             (      monitor.asm):01245 (4+0)   9           lda     ,X                  ; Load character from string
EBB6 270B             (      monitor.asm):01246 (3)     12          beq     SkipSpacesEnd       ; Is it the end of the string? Yes, then exit
EBB8 8120             (      monitor.asm):01247 (2)     14          cmpa    #' '                ; Is it a space?
EBBA 2607             (      monitor.asm):01248 (3)     17          bne     SkipSpacesEnd       ; Not a space? Then end subroutine
EBBC 3001             (      monitor.asm):01249 (4+1)   22          leax    1,X                 ; Increment index for next character
EBBE 7CF43D           (      monitor.asm):01250 (6)     28          inc     CmdErrorPtr         ; Increment error pointer to next potential error location
EBC1 20F1             (      monitor.asm):01251 (3)     31          bra     SkipSpacesLoop      ; Go and read another character
EBC3                  (      monitor.asm):01252                 SkipSpacesEnd:
EBC3 3582             (      monitor.asm):01253 (4+3)   38          puls    A,PC
                      (      monitor.asm):01254                 
                      (      monitor.asm):01255                 ; __        __                             ____                    _   
                      (      monitor.asm):01256                 ; \ \      / /   __ _   _ __   _ __ ___   | __ )    ___     ___   | |_ 
                      (      monitor.asm):01257                 ;  \ \ /\ / /   / _` | | '__| | '_ ` _ \  |  _ \   / _ \   / _ \  | __|
                      (      monitor.asm):01258                 ;   \ V  V /   | (_| | | |    | | | | | | | |_) | | (_) | | (_) | | |_ 
                      (      monitor.asm):01259                 ;    \_/\_/     \__,_| |_|    |_| |_| |_| |____/   \___/   \___/   \__|
                      (      monitor.asm):01260                 ;
                      (      monitor.asm):01261                 ; Warm boot the computer
                      (      monitor.asm):01262                 ; ======================
                      (      monitor.asm):01263                 
EBC5                  (      monitor.asm):01264                 Warmboot:
EBC5 7EE011           (      monitor.asm):01265 (3)     41          jmp     Warm                ; Warm boots the computer
                      (      monitor.asm):01266                     
                      (      monitor.asm):01267                 ; __        __         _   _          
                      (      monitor.asm):01268                 ; \ \      / /  _ __  (_) | |_    ___ 
                      (      monitor.asm):01269                 ;  \ \ /\ / /  | '__| | | | __|  / _ \
                      (      monitor.asm):01270                 ;   \ V  V /   | |    | | | |_  |  __/
                      (      monitor.asm):01271                 ;    \_/\_/    |_|    |_|  \__|  \___|
                      (      monitor.asm):01272                 ;
                      (      monitor.asm):01273                 ; Write a sequence of bytes starting at a base address
                      (      monitor.asm):01274                 ; ====================================================
                      (      monitor.asm):01275                 
                      (      monitor.asm):01276                     PRAGMA cc
                      (      monitor.asm):01277                 
EBC8                  (      monitor.asm):01278                 Write:
                      (      monitor.asm):01279                     ; Get base address
EBC8 BDEBB2           (      monitor.asm):01280 (7)     7           jsr     SkipSpaces          ; Skipe leading white spaces
EBCB A684             (      monitor.asm):01281 (4+0)   11          lda     ,X                  ; Load first character
EBCD 272E             (      monitor.asm):01282 (3)     14          beq     WriteNoParameter    ; If it's the end of the string, then missing parameter
EBCF BDE285           (      monitor.asm):01283 (7)     21          jsr     GetStrWord          ; Get address from the input buffer
EBD2 242D             (      monitor.asm):01284 (3)     24          bcc     WriteAddressError   ; Error in address
EBD4 FDF43E           (      monitor.asm):01285 (5)     29          std     CurrAddress         ; Save the address
EBD7 1F02             (      monitor.asm):01286 (4)     33          tfr     D,Y                 ; Copy address to Y
                      (      monitor.asm):01287                     ; Get first byte
EBD9 114F             (      monitor.asm):01288 (2)     35          clre                        ; Set number of bytes to zero
EBDB BDEBB2           (      monitor.asm):01289 (7)     42          jsr     SkipSpaces          ; Skipe leading white spaces
EBDE A684             (      monitor.asm):01290 (4+0)   46          lda     ,X                  ; Load character
EBE0 271B             (      monitor.asm):01291 (3)     49          beq     WriteNoParameter    ; If it's the end of the string, then missing parameter
EBE2 BDE1F0           (      monitor.asm):01292 (7)     56          jsr     GetStrByte          ; Get address from the input buffer
EBE5 241E             (      monitor.asm):01293 (3)     59          bcc     WriteByteError      ; Error in byte
EBE7 A7A0             (      monitor.asm):01294 (4+1)   64          sta     ,Y+                 ; Store byte at address
EBE9 114C             (      monitor.asm):01295 (2)     66          ince                        ; Set byte count to 1
                      (      monitor.asm):01296                     ; Get remaining bytes if any
EBEB                  (      monitor.asm):01297                 WriteByteLoop:
EBEB BDEBB2           (      monitor.asm):01298 (7)     73          jsr     SkipSpaces          ; Skipe leading white spaces
EBEE A684             (      monitor.asm):01299 (4+0)   77          lda     ,X                  ; Load character
EBF0 2717             (      monitor.asm):01300 (3)     80          beq     WriteConfirm        ; Read back and print bytes to confirm proper write
EBF2 BDE1F0           (      monitor.asm):01301 (7)     87          jsr     GetStrByte          ; Get address from the input buffer
EBF5 240E             (      monitor.asm):01302 (3)     90          bcc     WriteByteError      ; Error in byte
EBF7 A7A0             (      monitor.asm):01303 (4+1)   95          sta     ,Y+                 ; Store byte at address
EBF9 114C             (      monitor.asm):01304 (2)     97          ince                        ; Increment byte counter
EBFB 20EE             (      monitor.asm):01305 (3)     100         bra     WriteByteLoop
EBFD                  (      monitor.asm):01306                 WriteNoParameter:
EBFD BDE4E7           (      monitor.asm):01307 (7)     107         jsr     ErrNoParameter      ; Display no parameter error
EC00 39               (      monitor.asm):01308 (4)     111         rts
EC01                  (      monitor.asm):01309                 WriteAddressError:
EC01 BDE4B3           (      monitor.asm):01310 (7)     118         jsr     ErrInvalidAddress   ; Display address error
EC04 39               (      monitor.asm):01311 (4)     122         rts
EC05                  (      monitor.asm):01312                 WriteByteError:
EC05 BDE4C0           (      monitor.asm):01313 (7)     129         jsr     ErrInvalidByte      ; Display address error
EC08 39               (      monitor.asm):01314 (4)     133         rts
EC09                  (      monitor.asm):01315                 WriteConfirm:   
EC09 FCF43E           (      monitor.asm):01316 (5)     138         ldd     CurrAddress         ; Load base address
EC0C 1F02             (      monitor.asm):01317 (4)     142         tfr     D,Y                 ; Copy address to Y
EC0E BDE441           (      monitor.asm):01318 (7)     149         jsr     OutWord             ; Print base address
EC11 863A             (      monitor.asm):01319 (2)     151         lda     #':'                ; Separate address and byte with colon
EC13 BDE1BC           (      monitor.asm):01320 (7)     158         jsr     OutChar             ; Print separator
EC16                  (      monitor.asm):01321                 WriteConfirmLoop:
EC16 A6A0             (      monitor.asm):01322 (4+1)   163         lda     ,Y+                 ; Read byte
EC18 BDE3CE           (      monitor.asm):01323 (7)     170         jsr     OutByte             ; Print byte
EC1B 114A             (      monitor.asm):01324 (2)     172         dece                        ; Decrement byte counter
EC1D 2707             (      monitor.asm):01325 (3)     175         beq     WriteEnd            ; Is it the end? Then exit
EC1F 862C             (      monitor.asm):01326 (2)     177         lda     #','                ; Separate bytes with comma
EC21 BDE1BC           (      monitor.asm):01327 (7)     184         jsr     OutChar             ; Print comma
EC24 20F0             (      monitor.asm):01328 (3)     187         bra     WriteConfirmLoop    ; Check for next byte
EC26                  (      monitor.asm):01329                 WriteEnd:
EC26 10BFF43E         (      monitor.asm):01330 (6)     193         sty     CurrAddress         ; Save state of current address
EC2A BDE3F0           (      monitor.asm):01331 (7)     200         jsr     OutCRLF             ; Change line
EC2D 39               (      monitor.asm):01332 (4)     204         rts
                      (      monitor.asm):01333                     
                      (         main.asm):00191                     INCLUDE "data.asm"          ; Keep data include file at the end of the list
                      (         data.asm):00001                 ; ****************************************************************************************
                      (         data.asm):00002                 ; * Text and Data
                      (         data.asm):00003                 ; ****************************************************************************************
                      (         data.asm):00004                 
                      (         data.asm):00005                     PRAGMA cc
                      (         data.asm):00006                 
EC2E                  (         data.asm):00007                 BootMsg:    ;                                        *                       *               *
EC2E 2D2D2D2D2D2D2D2D (         data.asm):00008                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
EC56 0D0A             (         data.asm):00009                     .db     CR,LF
EC58 4D6963726F486F62 (         data.asm):00010                     .str    "MicroHobbyist's Retro Homebrew Computers"
     6279697374277320
     526574726F20486F
     6D65627265772043
     6F6D707574657273
EC80 0D0A             (         data.asm):00011                     .db     CR,LF
EC82 4C6F676963537061 (         data.asm):00012                     .str    "LogicSpark-09, a 6309 project, rev "
     726B2D30392C2061
     2036333039207072
     6F6A6563742C2072
     657620
ECA5 000D0A           (         data.asm):00013                     .db     NULL,CR,LF
ECA8 44657369676E6564 (         data.asm):00014                     .str    "Designed by Frederic Segard  (2024)"
     2062792046726564
     6572696320536567
     6172642020283230
     323429
ECCB 0D0A0A00         (         data.asm):00015                     .db     CR,LF,LF,NULL
ECCF 2062797465732066 (         data.asm):00016                     .str    " bytes free "
     72656520
ECDB 0D0A00           (         data.asm):00017                     .db     CR,LF,NULL
ECDE 206279746573206F (         data.asm):00018                     .str    " bytes of unallocated shadow RAM"
     6620756E616C6C6F
     6361746564207368
     61646F772052414D
ECFE 0D0A             (         data.asm):00019                     .db     CR,LF
ED00 2D2D2D2D2D2D2D2D (         data.asm):00020                     .str    "----------------------------------------"
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
     2D2D2D2D2D2D2D2D
ED28 0D0A0A00         (         data.asm):00021                     .db     CR,LF,LF,NULL
                      (         data.asm):00022                 
ED2C                  (         data.asm):00023                 CmdList:
ED2C 41444452         (         data.asm):00024                     .str    "ADDR"
ED30 FF               (         data.asm):00025                     .db     EOD
ED31 EB95             (         data.asm):00026                     .dw     SetAddress          ; Run code at current or specified address
ED33 434C53           (         data.asm):00027                     .str    "CLS"
ED36 FF               (         data.asm):00028                     .db     EOD
ED37 E159             (         data.asm):00029                     .dw     Cls                 ; Clear screen
ED39 44494147         (         data.asm):00030                     .str    "DIAG"
ED3D FF               (         data.asm):00031                     .db     EOD
ED3E E574             (         data.asm):00032                     .dw     Diagnostics         ; Display content of memory
ED40 44554D50         (         data.asm):00033                     .str    "DUMP"
ED44 FF               (         data.asm):00034                     .db     EOD
ED45 E652             (         data.asm):00035                     .dw     Dump                ; Display content of memory
ED47 48454C50         (         data.asm):00036                     .str    "HELP"
ED4B FF               (         data.asm):00037                     .db     EOD
ED4C E501             (         data.asm):00038                     .dw     CmdHelp             ; Help for various commands
ED4E 494E54           (         data.asm):00039                     .str    "INT"
ED51 FF               (         data.asm):00040                     .db     EOD
ED52 E6B6             (         data.asm):00041                     .dw     IntTest             ; Test priority interrupt encoder
ED54 4C4F4144         (         data.asm):00042                     .str    "LOAD"
ED58 FF               (         data.asm):00043                     .db     EOD
ED59 E6CF             (         data.asm):00044                     .dw     LoadIntelHex        ; Upload Intel Hex code
ED5B 4D4150           (         data.asm):00045                     .str    "MAP"
ED5E FF               (         data.asm):00046                     .db     EOD
ED5F E79D             (         data.asm):00047                     .dw     MemoryMap           ; Memory map of LogicSpark-09
ED61 4D454D           (         data.asm):00048                     .str    "MEM"
ED64 FF               (         data.asm):00049                     .db     EOD
ED65 E7F0             (         data.asm):00050                     .dw     MemSize             ; Memory Size installed
ED67 4D4D55           (         data.asm):00051                     .str    "MMU"
ED6A FF               (         data.asm):00052                     .db     EOD
ED6B E8A6             (         data.asm):00053                     .dw     Mmu                 ; MMU Commands and status
ED6D 5045454B         (         data.asm):00054                     .str    "PEEK"
ED71 FF               (         data.asm):00055                     .db     EOD
ED72 E9C6             (         data.asm):00056                     .dw     Peek                ; Read a byte of memory
ED74 504F4B45         (         data.asm):00057                     .str    "POKE"
ED78 FF               (         data.asm):00058                     .db     EOD
ED79 E9F0             (         data.asm):00059                     .dw     Poke                ; Write a byte of memory
ED7B 524547           (         data.asm):00060                     .str    "REG"
ED7E FF               (         data.asm):00061                     .db     EOD
ED7F EA30             (         data.asm):00062                     .dw     PrintRegisters      ; Print registers
ED81 52554E           (         data.asm):00063                     .str    "RUN"
ED84 FF               (         data.asm):00064                     .db     EOD
ED85 EB72             (         data.asm):00065                     .dw     Run                 ; Run code at current or specified address
ED87 544147           (         data.asm):00066                     .str    "TAG"
ED8A FF               (         data.asm):00067                     .db     EOD
ED8B E7C5             (         data.asm):00068                     .dw     MemTag              ; Tags memory cells to block numbers (except #07)
ED8D 5741524D         (         data.asm):00069                     .str    "WARM"
ED91 FF               (         data.asm):00070                     .db     EOD
ED92 EBC5             (         data.asm):00071                     .dw     Warmboot            ; Warmboot the monitor
ED94 5752495445       (         data.asm):00072                     .str    "WRITE"
ED99 FF               (         data.asm):00073                     .db     EOD
ED9A EBC8             (         data.asm):00074                     .dw     Write               ; Write sequetial bytes to memory
ED9C 00               (         data.asm):00075                     .db     NULL
                      (         data.asm):00076                 
ED9D                  (         data.asm):00077                 CmdHelpMsg: ;                                        *                       *               *
ED9D 4C697374206F6620 (         data.asm):00078                     .str    "List of valid commands:"
     76616C696420636F
     6D6D616E64733A
EDB4 0D0A             (         data.asm):00079                     .db     CR,LF
EDB6 202020414444523A (         data.asm):00080                     .str    "   ADDR: Set current address"
     2053657420637572
     72656E7420616464
     72657373
EDD2 0D0A             (         data.asm):00081                     .db     CR,LF
EDD4 202020434C533A20 (         data.asm):00082                     .str    "   CLS: Clear screen"
     436C656172207363
     7265656E
EDE8 0D0A             (         data.asm):00083                     .db     CR,LF
EDEA 202020444941473A (         data.asm):00084                     .str    "   DIAG: Diagnostics"
     20446961676E6F73
     74696373
EDFE 0D0A             (         data.asm):00085                     .db     CR,LF
EE00 20202044554D503A (         data.asm):00086                     .str    "   DUMP: Display memory content"
     20446973706C6179
     206D656D6F727920
     636F6E74656E74
EE1F 0D0A             (         data.asm):00087                     .db     CR,LF
EE21 20202048454C503A (         data.asm):00088                     .str    "   HELP: This help screen"
     2054686973206865
     6C70207363726565
     6E
EE3A 0D0A             (         data.asm):00089                     .db     CR,LF
EE3C 202020494E543A20 (         data.asm):00090                     .str    "   INT: Test priority interrupt encoder"
     5465737420707269
     6F7269747920696E
     7465727275707420
     656E636F646572
EE63 0D0A             (         data.asm):00091                     .db     CR,LF
EE65 2020204C4F41443A (         data.asm):00092                     .str    "   LOAD: Load Intel Hex from console"
     204C6F616420496E
     74656C2048657820
     66726F6D20636F6E
     736F6C65
EE89 0D0A             (         data.asm):00093                     .db     CR,LF
EE8B 2020204D41503A20 (         data.asm):00094                     .str    "   MAP: Memory and I/O map of system"
     4D656D6F72792061
     6E6420492F4F206D
     6170206F66207379
     7374656D
EEAF 0D0A             (         data.asm):00095                     .db     CR,LF
EEB1 2020204D454D3A20 (         data.asm):00096                     .str    "   MEM: Available memory on system"
     417661696C61626C
     65206D656D6F7279
     206F6E2073797374
     656D
EED3 0D0A             (         data.asm):00097                     .db     CR,LF
EED5 2020204D4D553A20 (         data.asm):00098                     .str    "   MMU: Memory Management Unit Commands and Status"
     4D656D6F7279204D
     616E6167656D656E
     7420556E69742043
     6F6D6D616E647320
     616E642053746174
     7573
EF07 0D0A             (         data.asm):00099                     .db     CR,LF
EF09 2020205045454B3A (         data.asm):00100                     .str    "   PEEK: Read a byte of memory"
     2052656164206120
     62797465206F6620
     6D656D6F7279
EF27 0D0A             (         data.asm):00101                     .db     CR,LF
EF29 202020504F4B453A (         data.asm):00102                     .str    "   POKE: Write a byte into memory"
     2057726974652061
     206279746520696E
     746F206D656D6F72
     79
EF4A 0D0A             (         data.asm):00103                     .db     CR,LF
EF4C 2020205245473A20 (         data.asm):00104                     .str    "   REG: Print the registers content"
     5072696E74207468
     6520726567697374
     65727320636F6E74
     656E74
EF6F 0D0A             (         data.asm):00105                     .db     CR,LF
EF71 20202052554E3A20 (         data.asm):00106                     .str    "   RUN: Execute code"
     4578656375746520
     636F6465
EF85 0D0A             (         data.asm):00107                     .db     CR,LF
EF87 2020205441473A20 (         data.asm):00108                     .str    "   TAG: Tags memory to block numbers (except #07)"
     54616773206D656D
     6F727920746F2062
     6C6F636B206E756D
     6265727320286578
     6365707420233037
     29
EFB8 0D0A             (         data.asm):00109                     .db     CR,LF
EFBA 2020205741524D3A (         data.asm):00110                     .str    "   WARM: Warm boots the computer"
     205761726D20626F
     6F74732074686520
     636F6D7075746572
EFDA 0D0A             (         data.asm):00111                     .db     CR,LF
EFDC 2020205752495445 (         data.asm):00112                     .str    "   WRITE: Write data sequentially to memory"
     3A20577269746520
     6461746120736571
     75656E7469616C6C
     7920746F206D656D
     6F7279
F007 0D0A00           (         data.asm):00113                     .db     CR,LF,NULL
                      (         data.asm):00114                 
F00A                  (         data.asm):00115                 DiagMessage:
F00A 446961676E6F7374 (         data.asm):00116                     .str    "Diagnostics"
     696373
F015 0D0A00           (         data.asm):00117                     .db     CR,LF,NULL
                      (         data.asm):00118                 
F018                  (         data.asm):00119                 DiagTestingMsg:
F018 202054657374696E (         data.asm):00120                     .str    "  Testing 512K chip #"
     67203531324B2063
     6869702023
F02D 00               (         data.asm):00121                     .db     NULL
                      (         data.asm):00122                 
F02E                  (         data.asm):00123                 DiagPassMsg:
F02E 50617373         (         data.asm):00124                     .str    "Pass"
F032 0D0A00           (         data.asm):00125                     .db     CR,LF,NULL
                      (         data.asm):00126                 
F035                  (         data.asm):00127                 DiagFailMsg:
F035 4661696C         (         data.asm):00128                     .str    "Fail"
F039 0D0A00           (         data.asm):00129                     .db     CR,LF,NULL
                      (         data.asm):00130                 
F03C                  (         data.asm):00131                 DiagSkipMsg:
F03C 536B6970         (         data.asm):00132                     .str    "Skip"
F040 0D0A00           (         data.asm):00133                     .db     CR,LF,NULL
                      (         data.asm):00134                     
F043                  (         data.asm):00135                 ErrInvalidAddrMsg:
F043 496E76616C696420 (         data.asm):00136                     .str    "Invalid address!"
     6164647265737321
F053 0D0A00           (         data.asm):00137                     .db     CR,LF,NULL
                      (         data.asm):00138                 
F056                  (         data.asm):00139                 ErrInvalidByteMsg:
F056 496E76616C696420 (         data.asm):00140                     .str    "Invalid byte!"
     6279746521
F063 0D0A00           (         data.asm):00141                     .db     CR,LF,NULL
                      (         data.asm):00142                 
F066                  (         data.asm):00143                 ErrInvalidParamMsg:
F066 496E76616C696420 (         data.asm):00144                     .str    "Invalid parameter!"
     706172616D657465
     7221
F078 0D0A00           (         data.asm):00145                     .db     CR,LF,NULL
                      (         data.asm):00146                 
F07B                  (         data.asm):00147                 ErrNoParameterMsg:
F07B 4E6F20706172616D (         data.asm):00148                     .str    "No parameter was specified."
     6574657220776173
     2073706563696669
     65642E
F096 0D0A00           (         data.asm):00149                     .db     CR,LF,NULL
                      (         data.asm):00150                 
F099                  (         data.asm):00151                 ErrInvalidCmdMsg:
F099 496E76616C696420 (         data.asm):00152                     .str    "Invalid command!"
     636F6D6D616E6421
F0A9 0D0A00           (         data.asm):00153                     .db     CR,LF,NULL
                      (         data.asm):00154                 
F0AC                  (         data.asm):00155                 ErrSyntaxErrorMsg:
F0AC 53796E7461782065 (         data.asm):00156                     .str    "Syntax error!"
     72726F7221
F0B9 0D0A00           (         data.asm):00157                     .db     CR,LF,NULL
                      (         data.asm):00158                     
F0BC                  (         data.asm):00159                 LoadStartMsg:
F0BC 4C6F616420363330 (         data.asm):00160                     .str    "Load 6309 code in Intel Hex format"
     3920636F64652069
     6E20496E74656C20
     48657820666F726D
     6174
F0DE 0D0A             (         data.asm):00161                     .db     CR,LF
F0E0 5072657373204553 (         data.asm):00162                     .str    "Press ESC to cancel."
     4320746F2063616E
     63656C2E
F0F4 0D0A00           (         data.asm):00163                     .db     CR,LF,NULL
                      (         data.asm):00164                 
F0F7                  (         data.asm):00165                 LoadUserAbortErr:
F0F7 5472616E73666572 (         data.asm):00166                     .str    "Transfer aborted by user"
     2061626F72746564
     2062792075736572
F10F 0D0A00           (         data.asm):00167                     .db     CR,LF,NULL
                      (         data.asm):00168                 
F112                  (         data.asm):00169                 LoadRecordErr:
F112 556E6B6E6F776E20 (         data.asm):00170                     .str    "Unknown record type: "
     7265636F72642074
     7970653A20
F127 00               (         data.asm):00171                     .db     NULL
                      (         data.asm):00172                 
F128                  (         data.asm):00173                 LoadFailedErr:
F128 446F776E6C6F6164 (         data.asm):00174                     .str    "Download failed due to checksum error"
     206661696C656420
     64756520746F2063
     6865636B73756D20
     6572726F72
F14D 0D0A00           (         data.asm):00175                     .db     CR,LF,NULL
                      (         data.asm):00176                 
F150                  (         data.asm):00177                 LoadSuccessMsg:
F150 446F776E6C6F6164 (         data.asm):00178                     .str    "Download Successful"
     2053756363657373
     66756C
F163 0D0A00           (         data.asm):00179                     .db     CR,LF,NULL
                      (         data.asm):00180                 
F166                  (         data.asm):00181                 MemoryMapMsg:
                      (         data.asm):00182                     ; Memory Map:
F166 4D656D6F7279204D (         data.asm):00183                     .str    "Memory Map:"
     61703A
F171 0D0A             (         data.asm):00184                     .db     CR,LF
F173 20202052414D3A20 (         data.asm):00185                     .str    "   RAM:       $0000-$"
     2020202020202430
     3030302D24
F188 000D0A           (         data.asm):00186                     .db     NULL,CR,LF
F18B 202020524F4D3A20 (         data.asm):00187                     .str    "   ROM:       $"
     20202020202024
F19A 000D0A           (         data.asm):00188                     .db     NULL,CR,LF
F19D 202020436F6E7374 (         data.asm):00189                     .str    "   Const. RAM: $FE00-$FEFF"
     2E2052414D3A2024
     464530302D244645
     4646
F1B7 0D0A             (         data.asm):00190                     .db     CR,LF
F1B9 202020492F4F2072 (         data.asm):00191                     .str    "   I/O range:  $FF00-$FFEF"
     616E67653A202024
     464630302D244646
     4546
F1D3 0D0A             (         data.asm):00192                     .db     CR,LF
F1D5 202020566563746F (         data.asm):00193                     .str    "   Vectors:    $FFF0-$FFFF"
     72733A2020202024
     464646302D244646
     4646
F1EF 0D0A             (         data.asm):00194                     .db     CR,LF
F1F1 492F4F204D61703A (         data.asm):00195                     .str    "I/O Map:"
F1F9 0D0A             (         data.asm):00196                     .db     CR,LF
F1FB 202020496E742E20 (         data.asm):00197                     .str    "   Int. Vect.: $FF09 (R)"
     566563742E3A2024
     4646303920285229
F213 0D0A             (         data.asm):00198                     .db     CR,LF
F215 2020204143494120 (         data.asm):00199                     .str    "   ACIA #1:    $FF68-FF6B"
     23313A2020202024
     464636382D464636
     42
F22E 0D0A             (         data.asm):00200                     .db     CR,LF
F230 2020204143494120 (         data.asm):00201                     .str    "   ACIA #2:    $FF6C-FF6F"
     23323A2020202024
     464636432D464636
     46
F249 0D0A00           (         data.asm):00202                     .db     CR,LF,NULL
                      (         data.asm):00203                 
F24C                  (         data.asm):00204                 MemorySizeMsg:
                      (         data.asm):00205                     ; Memory Size:
F24C 4D656D6F72792053 (         data.asm):00206                     .str    "Memory Size:"
     697A653A
F258 0D0A             (         data.asm):00207                     .db     CR,LF
F25A 2020204261736520 (         data.asm):00208                     .str    "   Base RAM:     64KB ("
     52414D3A20202020
     2036344B422028
F271 00               (         data.asm):00209                     .db     NULL
F272 2062797465732066 (         data.asm):00210                     .str    " bytes free)"
     72656529
F27E 0D0A             (         data.asm):00211                     .db     CR,LF
F280 202020457874656E (         data.asm):00212                     .str    "   Extended RAM: "
     6465642052414D3A
     20
F291 00               (         data.asm):00213                     .db     NULL
F292 4B422028         (         data.asm):00214                     .str    "KB ("
F296 00               (         data.asm):00215                     .db     NULL
F297 20626C6F636B7320 (         data.asm):00216                     .str    " blocks free)"
     6672656529
F2A4 0D0A             (         data.asm):00217                     .db     CR,LF
F2A6 202020546F74616C (         data.asm):00218                     .str    "   Total RAM:    "
     2052414D3A202020
     20
F2B7 00               (         data.asm):00219                     .db     NULL
F2B8 4B42             (         data.asm):00220                     .str    "KB"
F2BA 0D0A00           (         data.asm):00221                     .db     CR,LF,NULL
                      (         data.asm):00222                 
F2BD                  (         data.asm):00223                 MmuMsg:
                      (         data.asm):00224                     ; MMU status:
F2BD 4D4D552053746174 (         data.asm):00225                     .str    "MMU Status:"
     75733A
F2C8 0D0A             (         data.asm):00226                     .db     CR,LF
F2CA 2020204D4D552028 (         data.asm):00227                     .str    "   MMU (ON/OFF): "
     4F4E2F4F4646293A
     20
F2DB 000D0A           (         data.asm):00228                     .db     NULL,CR,LF
F2DE 2020205461736B20 (         data.asm):00229                     .str    "   Task (0/1): "
     28302F31293A20
F2ED 000D0A           (         data.asm):00230                     .db     NULL,CR,LF
F2F0 5461736B20726567 (         data.asm):00231                     .str    "Task registers:"
     6973746572733A
F2FF 0D0A             (         data.asm):00232                     .db     CR,LF
F301 2020205461736B20 (         data.asm):00233                     .str    "   Task 0: "
     303A20
F30C 000D0A           (         data.asm):00234                     .db     NULL,CR,LF
F30F 2020205461736B20 (         data.asm):00235                     .str    "   Task 1: "
     313A20
F31A 00               (         data.asm):00236                     .db     NULL
                      (         data.asm):00237                 
F31B                  (         data.asm):00238                 MmuList:
F31B 4F4E             (         data.asm):00239                     .str    "ON"
F31D FF               (         data.asm):00240                     .db     EOD
F31E E96F             (         data.asm):00241                     .dw     MmuOn
F320 4F4646           (         data.asm):00242                     .str    "OFF"
F323 FF               (         data.asm):00243                     .db     EOD
F324 E978             (         data.asm):00244                     .dw     MmuOff
F326 5441534B         (         data.asm):00245                     .str    "TASK"
F32A FF               (         data.asm):00246                     .db     EOD
F32B E981             (         data.asm):00247                     .dw     MmuTask
F32D 5245534554       (         data.asm):00248                     .str    "RESET"
F332 FF               (         data.asm):00249                     .db     EOD
F333 E9A8             (         data.asm):00250                     .dw     MmuReset
F335 00               (         data.asm):00251                     .db     NULL
                      (         main.asm):00192                 
                      (         main.asm):00193                 ;  ___           _                                          _         
                      (         main.asm):00194                 ; |_ _|  _ __   | |_    ___   _ __   _ __   _   _   _ __   | |_   ___ 
                      (         main.asm):00195                 ;  | |  | '_ \  | __|  / _ \ | '__| | '__| | | | | | '_ \  | __| / __|
                      (         main.asm):00196                 ;  | |  | | | | | |_  |  __/ | |    | |    | |_| | | |_) | | |_  \__ \
                      (         main.asm):00197                 ; |___| |_| |_|  \__|  \___| |_|    |_|     \__,_| | .__/   \__| |___/
                      (         main.asm):00198                 ;                                                  |_|
                      (         main.asm):00199                 ; ----------------------------------------------------------------------------------------
                      (         main.asm):00200                 
                      (         main.asm):00201                     PRAGMA cc
                      (         main.asm):00202                     
F336                  (         main.asm):00203                 IllegalDiv0:
F336 3B               (         main.asm):00204 (17+?)  17          rti
                      (         main.asm):00205                     
                      (         main.asm):00206                     PRAGMA cc
                      (         main.asm):00207                 
F337                  (         main.asm):00208                 SoftInt3:
F337 3B               (         main.asm):00209 (17+?)  17          rti
                      (         main.asm):00210                     
                      (         main.asm):00211                     PRAGMA cc
                      (         main.asm):00212                 
F338                  (         main.asm):00213                 SoftInt2:
F338 3B               (         main.asm):00214 (17+?)  17          rti
                      (         main.asm):00215                     
                      (         main.asm):00216                     PRAGMA cc
                      (         main.asm):00217                 
F339                  (         main.asm):00218                 SoftInt1:
F339 3B               (         main.asm):00219 (17+?)  17          rti
                      (         main.asm):00220                     
                      (         main.asm):00221                     PRAGMA cc
                      (         main.asm):00222                 
F33A                  (         main.asm):00223                 FIRQInt:
F33A 3B               (         main.asm):00224 (17+?)  17          rti
                      (         main.asm):00225                 
                      (         main.asm):00226                     PRAGMA cc
                      (         main.asm):00227                 
F33B                  (         main.asm):00228                 IRQInt:
F33B 3B               (         main.asm):00229 (17+?)  17          rti
                      (         main.asm):00230                 
                      (         main.asm):00231                     PRAGMA cc
                      (         main.asm):00232                 
F33C                  (         main.asm):00233                 NMIInt:
F33C 3B               (         main.asm):00234 (17+?)  17          rti
                      (         main.asm):00235                 
                      (         main.asm):00236                 ;  ____                   __     __                 _           _       _
                      (         main.asm):00237                 ; / ___|   _   _   ___    \ \   / /   __ _   _ __  (_)   __ _  | |__   | |   ___   ___ 
                      (         main.asm):00238                 ; \___ \  | | | | / __|    \ \ / /   / _` | | '__| | |  / _` | | '_ \  | |  / _ \ / __|
                      (         main.asm):00239                 ;  ___) | | |_| | \__ \     \ V /   | (_| | | |    | | | (_| | | |_) | | | |  __/ \__ \
                      (         main.asm):00240                 ; |____/   \__, | |___/      \_/     \__,_| |_|    |_|  \__,_| |_.__/  |_|  \___| |___/
                      (         main.asm):00241                 ;          |___/
                      (         main.asm):00242                 ;
                      (         main.asm):00243                 ; System variables used by monitor subroutines
                      (         main.asm):00244                 ; ============================================
                      (         main.asm):00245                 
F33D                  (         main.asm):00246                 VarStart:
F33D                  (         main.asm):00247                 InStrBuffer:    .ds     $100    ; String input for console input
F43D                  (         main.asm):00248                 CmdErrorPtr:    .ds     1       ; Command prompt error pointer
F43E                  (         main.asm):00249                 CurrAddress:    .ds     2       ; Current address, useful for monitor actions
F440                  (         main.asm):00250                 CurrBank:       .ds     1       ; Current bank number, relative to current address
F441                  (         main.asm):00251                 RunFlag         .ds     1       ; Run flag to indicate registers should be saved or not
F442                  (         main.asm):00252                 RegCC:          .ds     1       ; Register CC
F443                  (         main.asm):00253                 RegDP:          .ds     1       ; Register DP
F444                  (         main.asm):00254                 RegA:           .ds     1       ; Register A
F445                  (         main.asm):00255                 RegB:           .ds     1       ; Register B
F446                  (         main.asm):00256                 RegE:           .ds     1       ; Register E
F447                  (         main.asm):00257                 RegF:           .ds     1       ; Register F
F448                  (         main.asm):00258                 RegX:           .ds     2       ; Register X
F44A                  (         main.asm):00259                 RegY:           .ds     2       ; Register Y
F44C                  (         main.asm):00260                 RegU:           .ds     2       ; User stack
F44E                  (         main.asm):00261                 RegS:           .ds     2       ; System stack
F450                  (         main.asm):00262                 RegPC:          .ds     2       ; Register PC
F452                  (         main.asm):00263                 TempByte:       .ds     1       ; Temporary storage byte (8-bit)
F453                  (         main.asm):00264                 TempWord:                       ; Temporary storage word (16-bit deconstructed)
F453                  (         main.asm):00265                 TempW1:         .ds     1       ; Word MSB
F454                  (         main.asm):00266                 TempW2:         .ds     1       ; Word LSB
F455                  (         main.asm):00267                 TempQuad:                       ; Temporary storage quad (32-bit deconstructed)
F455                  (         main.asm):00268                 TempQ1:         .ds     1       ; Quad High MSB
F456                  (         main.asm):00269                 TempQ2:         .ds     1       ; Quad Low MSB
F457                  (         main.asm):00270                 TempQ3:         .ds     1       ; Quad High LSB
F458                  (         main.asm):00271                 TempQ4:         .ds     1       ; Quad Low LSB
F459                  (         main.asm):00272                 RxBuffer        .ds     $100    ; ACIA #1 receive buffer
F559                  (         main.asm):00273                 VarEnd:
                      (         main.asm):00274                 
F559 4141414141414141 (         main.asm):00275                     FILL 'A',StackEnd-VarEnd    ; Clear area with A's to indicate available shadow RAM
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     4141414141414141
     41414141414141
FA00 5555555555555555 (         main.asm):00276                     FILL 'U',UsrSize            ; Clear area with U's to indicate user stack area
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
     5555555555555555
FB00 5353535353535353 (         main.asm):00277                     FILL 'S',SysSize            ; Clear area with S's to insicate system stack area
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
     5353535353535353
                      (         main.asm):00278                 
                      (         main.asm):00279                 ;  ____    _                  _    
                      (         main.asm):00280                 ; | __ )  | |   ___     ___  | | __
                      (         main.asm):00281                 ; |  _ \  | |  / _ \   / __| | |/ /
                      (         main.asm):00282                 ; | |_) | | | | (_) | | (__  |   < 
                      (         main.asm):00283                 ; |____/  |_|  \___/   \___| |_|\_\
                      (         main.asm):00284                 ;
                      (         main.asm):00285                 ; Block assignment table
                      (         main.asm):00286                 ; ======================
                      (         main.asm):00287                 
                      (         main.asm):00288                     ORG $FC00
                      (         main.asm):00289                 
FC00                  (         main.asm):00290                 BlockTable:
FC00 0000000000000000 (         main.asm):00291                     FILL $00,BlkTblSize         ; Clear area with 0's to indicate bank RAM block usage
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
     0000000000000000
                      (         main.asm):00292                 
                      (         main.asm):00293                 ;      _                             
                      (         main.asm):00294                 ;     | |  _   _   _ __ ___    _ __  
                      (         main.asm):00295                 ;  _  | | | | | | | '_ ` _ \  | '_ \ 
                      (         main.asm):00296                 ; | |_| | | |_| | | | | | | | | |_) |
                      (         main.asm):00297                 ;  \___/   \__,_| |_| |_| |_| | .__/ 
                      (         main.asm):00298                 ;                             |_|    
                      (         main.asm):00299                 ;
                      (         main.asm):00300                 ; Subroutine jump table to be called by external programs
                      (         main.asm):00301                 ; =======================================================
                      (         main.asm):00302                 
                      (         main.asm):00303                     ORG $FD00
                      (         main.asm):00304                 
FD00                  (         main.asm):00305                 JmpStart:
FD00 E159             (         main.asm):00306                 JmpCls:             .dw     Cls
FD02 E1DA             (         main.asm):00307                 JmpDelChar:         .dw     DelChar
FD04 E1F0             (         main.asm):00308                 JmpGetStrByte:      .dw     GetStrByte
FD06 E25F             (         main.asm):00309                 JmpGetStrNibble:    .dw     GetStrNibble
FD08 E285             (         main.asm):00310                 JmpGetStrWord:      .dw     GetStrWord
FD0A E2F4             (         main.asm):00311                 JmpInByte:          .dw     InByte
FD0C E1A2             (         main.asm):00312                 JmpInChar:          .dw     InChar
FD0E E1AD             (         main.asm):00313                 JmpInCharNW:        .dw     InCharNW
FD10 E305             (         main.asm):00314                 JmpInStr:           .dw     InStr
FD12 E374             (         main.asm):00315                 JmpInWord:          .dw     InWord
FD14 E1BC             (         main.asm):00316                 JmpOutChar:         .dw     OutChar
FD16 E3CE             (         main.asm):00317                 JmpOutByte:         .dw     OutByte
FD18 E3F0             (         main.asm):00318                 JmpOutCRLF:         .dw     OutCRLF
FD1A E3FE             (         main.asm):00319                 JmpOutNibble:       .dw     OutNibble
FD1C E416             (         main.asm):00320                 JmpOutStr:          .dw     OutStr
FD1E E441             (         main.asm):00321                 JmpOutWord:         .dw     OutWord
FD20 E087             (         main.asm):00322                 JmpAscToBinNibble:  .dw     AscToBinNibble
FD22 E09A             (         main.asm):00323                 JmpAscToBinByte:    .dw     AscToBinByte
FD24 E0B0             (         main.asm):00324                 JmpAscToBinWord:    .dw     AscToBinWord
FD26 E0C2             (         main.asm):00325                 JmpBinToAscNibble:  .dw     BinToAscNibble
FD28 E0D2             (         main.asm):00326                 JmpBinToAscByte:    .dw     BinToAscByte
FD2A E0EE             (         main.asm):00327                 JmpBinToAscWord:    .dw     BinToAscWord
FD2C E0FF             (         main.asm):00328                 JmpBinToBcd:        .dw     BinToBcd
FD2E E14B             (         main.asm):00329                 JmpUpperCase:       .dw     UpperCase
FD30 E393             (         main.asm):00330                 JmpOutBcd:          .dw     OutBcd
FD32                  (         main.asm):00331                 JmpTableEnd:
                      (         main.asm):00332                 
FD32 4A4A4A4A4A4A4A4A (         main.asm):00333                     FILL 'J',ConstRAM-JmpTableEnd ; Clear area with $00
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A4A4A
     4A4A4A4A4A4A
                      (         main.asm):00334                 
                      (         main.asm):00335                 ;   ____                         _                     _   
                      (         main.asm):00336                 ;  / ___|   ___    _ __    ___  | |_    __ _   _ __   | |_ 
                      (         main.asm):00337                 ; | |      / _ \  | '_ \  / __| | __|  / _` | | '_ \  | __|
                      (         main.asm):00338                 ; | |___  | (_) | | | | | \__ \ | |_  | (_| | | | | | | |_ 
                      (         main.asm):00339                 ;  \____|  \___/  |_| |_| |___/  \__|  \__,_| |_| |_|  \__|
                      (         main.asm):00340                 ;
                      (         main.asm):00341                 ; This range is constant to all upper 8th block in a RAM banking system
                      (         main.asm):00342                 ; =====================================================================
                      (         main.asm):00343                 
                      (         main.asm):00344                     PRAGMA cc
                      (         main.asm):00345                     ORG $FE00                   ; Constant RAM ($FE00-$FEFF)
                      (         main.asm):00346                     
FE00                  (         main.asm):00347                 ConstRAM:
FE00                  (         main.asm):00348                     .DS     256                 
                      (         main.asm):00349                 
                      (         main.asm):00350                     ORG $FF00                   ; I/O range ($FF00-$FFEF)
                      (         main.asm):00351                 
FF00                  (         main.asm):00352                 InputOutputRange:
FF00                  (         main.asm):00353                     .DS     240
                      (         main.asm):00354                 
                      (         main.asm):00355                     ORG $FFF0                   ; Reset and Interrupt vectors ($FFF0-$FFFF)
                      (         main.asm):00356                 
FFF0                  (         main.asm):00357                 Vectors:
FFF0 F336             (         main.asm):00358                     .DW     IllegalDiv0         ; Illegal Opcode and Division by Zero Trap (6309 only)
FFF2 F337             (         main.asm):00359                     .DW     SoftInt3            ; SWI3
FFF4 F338             (         main.asm):00360                     .DW     SoftInt2            ; SWI2
FFF6 F339             (         main.asm):00361                     .DW     SoftInt1            ; SWI
FFF8 F33A             (         main.asm):00362                     .DW     FIRQInt             ; FIRQ
FFFA F33B             (         main.asm):00363                     .DW     IRQInt              ; IRQ
FFFC F33C             (         main.asm):00364                     .DW     NMIInt              ; NMI
FFFE 0000             (         main.asm):00365                     .DW     Reset               ; RESET
                      (         main.asm):00366                 
                      (         main.asm):00367                     END

Symbol Table:
[ G] AscToBinByte                     E09A
[ G] AscToBinNibble                   E087
[ G] AscToBinNibbleAlpha              E094
[ G] AscToBinNibbleEnd                E096
[ G] AscToBinWord                     E0B0
[ G] BinToAscByte                     E0D2
[ G] BinToAscNibble                   E0C2
[ G] BinToAscNibbleAlpha              E0CE
[ G] BinToAscNibbleEnd                E0D0
[ G] BinToAscWord                     E0EE
[ G] BinToBcd                         E0FF
[ G] BlkTblSize                       0100
[ G] BlockTable                       FC00
[ G] BootMsg                          EC2E
[ G] BS                               0008
[ G] BytePerLine                      0010
[ G] Cls                              E159
[ G] CmdErrorPtr                      F43D
[ G] CmdHelp                          E501
[ G] CmdHelpMsg                       ED9D
[ G] CmdList                          ED2C
[ G] CmdParse                         E508
[ G] CmdParseChar                     E516
[ G] CmdParseEnd                      E551
[ G] CmdParseExecute                  E543
[ G] CmdParseNone                     E54E
[ G] CmdParseSkip                     E529
[ G] CmdParseSkipLoop                 E52F
[ G] CmdParseValid                    E53B
[ G] CmdPrompt                        E552
[ G] Com1_Command                     FF6A
[ G] Com1_Control                     FF6B
[ G] Com1_Data                        FF68
[ G] Com1_Status                      FF69
[ G] Com1Init                         E18F
[ G] Com1RxNoWait                     E1AD
[ G] Com1RxNoWaitEnd                  E1BB
[ G] Com1RxWait                       E1A2
[ G] Com1Tx                           E1BC
[ G] Com1TxNotReady                   E1BE
[ G] ConstRAM                         FE00
[ G] CR                               000D
[ G] CurrAddress                      F43E
[ G] CurrBank                         F440
[ G] Delay                            E1CB
[ G] DelayEnd                         E1D7
[ G] DelayLoop                        E1D1
[ G] DelChar                          E1DA
[ G] DelCharLoop                      E1DE
[ G] Diag512                          E5D3
[ G] Diag512Continue                  E5FE
[ G] Diag512Loop                      E5EA
[ G] DiagBlock                        E621
[ G] DiagBlockLoop                    E624
[ G] DiagCellEnd                      E651
[ G] DiagCellPattern                  E645
[ G] DiagEnd                          E5C3
[ G] DiagFail                         E60C
[ G] DiagFailMsg                      F035
[ G] DiagMessage                      F00A
[ G] Diagnostics                      E574
[ G] DiagPass                         E613
[ G] DiagPassFail                     E608
[ G] DiagPassMsg                      F02E
[ G] DiagSkip                         E61A
[ G] DiagSkipMsg                      F03C
[ G] DiagTest                         E62F
[ G] DiagTestingMsg                   F018
[ G] Dump                             E652
[ G] DumpAddr                         E669
[ G] DumpByte                         E67A
[ G] DumpChar                         E693
[ G] DumpCharDot                      E69E
[ G] DumpCharPrint                    E6A0
[ G] DumpDisplay                      E661
[ G] DumpEnd                          E6B5
[ G] DumpInvalidAddress               E6B2
[ G] EOD                              00FF
[ G] ErrInvalidAddress                E4B3
[ G] ErrInvalidAddrMsg                F043
[ G] ErrInvalidByte                   E4C0
[ G] ErrInvalidByteMsg                F056
[ G] ErrInvalidCmdMsg                 F099
[ G] ErrInvalidCommand                E4CD
[ G] ErrInvalidParameter              E4DA
[ G] ErrInvalidParamMsg               F066
[ G] ErrNoParameter                   E4E7
[ G] ErrNoParameterMsg                F07B
[ G] ErrorPointerLoop                 E4A1
[ G] ErrPointer                       E49A
[ G] ErrSyntaxError                   E4F4
[ G] ErrSyntaxErrorMsg                F0AC
[ G] ESC                              001B
[ G] FIRQInt                          F33A
[ G] GetStrByte                       E1F0
[ G] GetStrByteCount                  E1F9
[ G] GetStrByteEnd                    E23E
[ G] GetStrByteError                  E23C
[ G] GetStrByteFixed                  E242
[ G] GetStrByteFixedEnd               E25D
[ G] GetStrByteFixedErr               E25B
[ G] GetStrByteGood                   E238
[ G] GetStrByteParse                  E204
[ G] GetStrByteParse2                 E215
[ G] GetStrByteParseMore              E22E
[ G] GetStrNibble                     E25F
[ G] GetStrNibbleEnd                  E27F
[ G] GetStrNibbleError                E276
[ G] GetStrNibbleGood                 E27A
[ G] GetStrWord                       E285
[ G] GetStrWordCount                  E28C
[ G] GetStrWordEnd                    E2F1
[ G] GetStrWordError                  E2EF
[ G] GetStrWordGood                   E2E9
[ G] GetStrWordParse                  E297
[ G] GetStrWordParse2                 E2AA
[ G] GetStrWordParse3                 E2B7
[ G] GetStrWordParse4                 E2CB
[ G] GetStrWordParseMore              E2DF
[ G] IllegalDiv0                      F336
[ G] InByte                           E2F4
[ G] InChar                           E1A2
[ G] InCharNW                         E1AD
[ G] Init                             E000
[ G] INIT0                            FF90
[ G] INIT1                            FF91
[ G] InputOutputRange                 FF00
[ G] InStr                            E305
[ G] InStrBackspace                   E325
[ G] InStrBuffer                      F33D
[ G] InStrClearCarry                  E36E
[ G] InStrEnd                         E370
[ G] InStrEscape                      E33C
[ G] InStrPrintCR                     E35E
[ G] InStrReadChar                    E30F
[ G] InStrStoreChar                   E355
[ G] IntTest                          E6B6
[ G] IntTestEnd                       E6CE
[ G] IntTestLoop                      E6B8
[ G] IntVector                        FF09
[ G] InWord                           E374
[ G] IRQInt                           F33B
[ G] JmpAscToBinByte                  FD22
[ G] JmpAscToBinNibble                FD20
[ G] JmpAscToBinWord                  FD24
[ G] JmpBinToAscByte                  FD28
[ G] JmpBinToAscNibble                FD26
[ G] JmpBinToAscWord                  FD2A
[ G] JmpBinToBcd                      FD2C
[ G] JmpCls                           FD00
[ G] JmpDelChar                       FD02
[ G] JmpGetStrByte                    FD04
[ G] JmpGetStrNibble                  FD06
[ G] JmpGetStrWord                    FD08
[ G] JmpInByte                        FD0A
[ G] JmpInChar                        FD0C
[ G] JmpInCharNW                      FD0E
[ G] JmpInStr                         FD10
[ G] JmpInWord                        FD12
[ G] JmpOutBcd                        FD30
[ G] JmpOutByte                       FD16
[ G] JmpOutChar                       FD14
[ G] JmpOutCRLF                       FD18
[ G] JmpOutNibble                     FD1A
[ G] JmpOutStr                        FD1C
[ G] JmpOutWord                       FD1E
[ G] JmpStart                         FD00
[ G] JmpTableEnd                      FD32
[ G] JmpUpperCase                     FD2E
[ G] LF                               000A
[ G] LoadCheckFlag                    E772
[ G] LoadChecksum                     E73F
[ G] LoadData                         E72F
[ G] LoadEnd                          E79C
[ G] LoadEOF                          E75E
[ G] LoadFailedErr                    F128
[ G] LoadFailure                      E753
[ G] LoadIntelHex                     E6CF
[ G] LoadRecord                       E6D7
[ G] LoadRecordErr                    F112
[ G] LoadRecordType                   E712
[ G] LoadStart                        E6E7
[ G] LoadStartMsg                     F0BC
[ G] LoadSuccess                      E782
[ G] LoadSuccessMsg                   F150
[ G] LoadUserAbortErr                 F0F7
[ G] Main                             E062
[ G] MainRunExec                      E07D
[ G] MaxCmdSize                       0046
[ G] MemoryMap                        E79D
[ G] MemoryMapMsg                     F166
[ G] MemorySizeMsg                    F24C
[ G] MemSize                          E7F0
[ G] MemSizeDisplay                   E837
[ G] MemSizeEmpty                     E8A0
[ G] MemSizeEnd                       E872
[ G] MemSizeValEnd                    E8A2
[ G] MemSizeValidate                  E882
[ G] MemTag                           E7C5
[ G] MemTagEnd                        E7EF
[ G] MemTagLoop                       E7CC
[ G] Mmu                              E8A6
[ G] MmuEnabled                       E913
[ G] MmuList                          F31B
[ G] MmuMsg                           F2BD
[ G] MmuOff                           E978
[ G] MmuOn                            E96F
[ G] MmuParseChar                     E8BB
[ G] MmuParseExecute                  E8E9
[ G] MmuParseNone                     E8F1
[ G] MmuParseSkip                     E8CE
[ G] MmuParseSkipLoop                 E8D5
[ G] MmuParseValid                    E8E1
[ G] MmuReset                         E9A8
[ G] MmuResetLoop                     E9B6
[ G] MmuStatus                        E8F5
[ G] MmuStatusEnd                     E96E
[ G] MmuTask                          E981
[ G] MmuTask0Loop                     E93C
[ G] MmuTask1Loop                     E958
[ G] MmuTaskErr                       E9A4
[ G] MmuTaskNum                       E91D
[ G] MmuTaskNum1                      E92E
[ G] MmuTaskRegs                      E933
[ G] MmuTaskSet0                      E992
[ G] MmuTaskSet1                      E99B
[ G] NMIInt                           F33C
[ G] NULL                             0000
[ G] OutBcd                           E393
[ G] OutBcdSub                        E3B1
[ G] OutBcdSubEnd                     E3CD
[ G] OutBcdSubLSB                     E3BD
[ G] OutBcdSubLSB2                    E3CA
[ G] OutByte                          E3CE
[ G] OutByteDigit1NLZ                 E3E9
[ G] OutByteLZ                        E3CE
[ G] OutByteNLZ                       E3DD
[ G] OutChar                          E1BC
[ G] OutCRLF                          E3F0
[ G] OutNibble                        E3FE
[ G] OutNibbleLSB                     E3FE
[ G] OutNibbleMSB                     E408
[ G] OutStr                           E416
[ G] OutStrEnd                        E425
[ G] OutStrLoop                       E418
[ G] OutStrLZ                         E416
[ G] OutStrNLZ                        E427
[ G] OutStrNLZEnd                     E43F
[ G] OutStrNLZLoop                    E42A
[ G] OutStrNLZPrintChar               E438
[ G] OutWord                          E441
[ G] OutWordNLZ                       E45E
[ G] OutWordNLZ2                      E471
[ G] OutWordNLZ3                      E481
[ G] OutWordNLZ4                      E491
[ G] OutWordNLZp2                     E47C
[ G] OutWordNLZp3                     E48C
[ G] Peek                             E9C6
[ G] PeekDisplay                      E9D5
[ G] PeekEnd                          E9EF
[ G] PeekInvalidAddr                  E9EC
[ G] Poke                             E9F0
[ G] PokeEnd                          EA2F
[ G] PokeInvalidAddress               EA27
[ G] PokeInvalidByte                  EA22
[ G] PokeNoParameters                 EA2C
[ G] PrintRegisters                   EA30
[ G] PromptSize                       0009
[ G] PullRegisters                    EB53
[ G] PushRegisters                    EB23
[ G] RegA                             F444
[ G] RegB                             F445
[ G] RegCC                            F442
[ G] RegDP                            F443
[ G] RegE                             F446
[ G] RegF                             F447
[ G] RegPC                            F450
[ G] RegS                             F44E
[ G] RegU                             F44C
[ G] RegX                             F448
[ G] RegY                             F44A
[ G] Reset                            0000
[ G] RevMajor                         0000
[ G] RevMinor                         0007
[ G] RomDisable                       FF08
[ G] RomStart                         E000
[ G] Run                              EB72
[ G] RunEnd                           EB94
[ G] RunError                         EB91
[ G] RunExecute                       EB87
[ G] RunFlag                          F441
[ G] RunGetAddress                    EB79
[ G] RunValidate                      EB81
[ G] RxBuffer                         F459
[ G] ScrHorzRes                       0050
[ G] ScrVertRes                       0018
[ G] SetAddress                       EB95
[ G] SetAddressDefault                EBAB
[ G] SetAddressEnd                    EBB1
[ G] SetAddressError                  EBA6
[ G] ShadowBlk                        1F00
[ G] ShadowCopy                       0005
[ G] ShadowEnd                        0024
[ G] SkipSpaces                       EBB2
[ G] SkipSpacesEnd                    EBC3
[ G] SkipSpacesLoop                   EBB4
[ G] SoftInt1                         F339
[ G] SoftInt2                         F338
[ G] SoftInt3                         F337
[ G] SPACE                            0020
[ G] StackEnd                         FA00
[ G] SysSize                          0100
[ G] SysStack                         FC00
[ G] TAB                              0009
[ G] TASK0                            FFA0
[ G] TASK1                            FFA8
[ G] TempByte                         F452
[ G] TempQ1                           F455
[ G] TempQ2                           F456
[ G] TempQ3                           F457
[ G] TempQ4                           F458
[ G] TempQuad                         F455
[ G] TempW1                           F453
[ G] TempW2                           F454
[ G] TempWord                         F453
[ G] UpperCase                        E14B
[ G] UpperCaseEnd                     E157
[ G] UsrSize                          0100
[ G] UsrStack                         FB00
[ G] VarEnd                           F559
[ G] VarStart                         F33D
[ G] Vectors                          FFF0
[ G] Warm                             E011
[ G] Warmboot                         EBC5
[ G] Write                            EBC8
[ G] WriteAddressError                EC01
[ G] WriteByteError                   EC05
[ G] WriteByteLoop                    EBEB
[ G] WriteConfirm                     EC09
[ G] WriteConfirmLoop                 EC16
[ G] WriteEnd                         EC26
[ G] WriteNoParameter                 EBFD
